//
//  GZSymbolKeyboard.m
//  HanvonKeyboard
//
//  Created by hanvon on 2017/11/9.
//  Copyright © 2017年 hanvon. All rights reserved.
//

#import "GZSymbolKeyboard.h"
#import "GZSymbolCollectionCell.h"
#import "GZButton+GZSetting.h"

//#import "GZKeyboardSkin.h"

@interface GZSymbolKeyboard()<UIScrollViewDelegate,UICollectionViewDelegate,UICollectionViewDataSource>
{
    CGFloat collectionCellW;
    CGFloat collectionCellH;
    NSInteger selected; //目前已经选择的符号分类
    int kbType; //常用符号的类型 1中文 2英文
    NSTimer *timer; //定时器 删除按钮长按
    BOOL isLock; //是否点击了锁定
}
@property (nonatomic,strong) UICollectionView *collectionView;
@property (nonatomic,strong) NSMutableArray *dataArray;
@property (nonatomic,strong) NSMutableArray *common_keys; //常用符号 键数组
@property (nonatomic,strong) NSMutableArray *common_all; //常用符号 健值对数组
//@property (nonatomic,strong) NSMutableArray *common_pinyin_keys; //常用符号 键数组
//@property (nonatomic,strong) NSMutableArray *common_pinyin_all; //常用符号 健值对数组
//@property (nonatomic,strong) NSMutableArray *common_eglish_keys; //常用符号 键数组
//@property (nonatomic,strong) NSMutableArray *common_eglish_all; //常用符号 健值对数组
@end


@implementation GZSymbolKeyboard

- (instancetype)initWithFrame:(CGRect)frame andKeyboardType:(int)keyboardType {
    self = [super initWithFrame:frame];
    if (self) {
        //创建view
        self.backgroundColor = RGBA(210, 213, 219, 1.0);
        selected = 111;
        kbType = keyboardType;
        isLock = NO;

        _common_all = [[[GZUserPlist sharedUserPlist] getSymbolsByName:@"common"] mutableCopy];
        _common_keys = [[[GZUserPlist sharedUserPlist] getSymbolsAllKeysByName:@"common"] mutableCopy];
        _dataArray = [_common_keys mutableCopy];
//        if (keyboardType == 1) {
//            _common_pinyin_all = [[[GZUserPlist sharedUserPlist] getSymbolsByName:@"common_pinyin"] mutableCopy];
//            _common_pinyin_keys = [[[GZUserPlist sharedUserPlist] getSymbolsAllKeysByName:@"common_pinyin"] mutableCopy];
//            _dataArray = _common_pinyin_keys;
//        }else if (keyboardType == 2) {
//            _common_eglish_all = [[[GZUserPlist sharedUserPlist] getSymbolsByName:@"common_eglish"] mutableCopy];
//            _common_eglish_keys = [[[GZUserPlist sharedUserPlist] getSymbolsAllKeysByName:@"common_eglish"] mutableCopy];
//            _dataArray = _common_eglish_keys;
//        }

        [self createViews:frame];
    }
    return self;
}

- (void)changeViewFrame:(CGRect)newFrame {

    self.frame = newFrame;

    //键盘布局 水平间距5 垂直间距7
    //键盘布局 顶部间距3 底部间距3
    CGFloat spaceX = 5.0;
    CGFloat spaceY = 7.0;
    CGFloat top = 3.0;
    CGFloat bottom = 3.0;

    CGFloat bottomViewH = 35; //底部固定视图高度
    CGFloat height = newFrame.size.height - top - bottom - spaceY - bottomViewH;
    CGFloat buttonW = (newFrame.size.width - spaceX*3 - 4)/6.5; //符号按钮宽1 左边的导航宽1.5 4是collection的cell之间的间距

    collectionCellW = buttonW;
    collectionCellH = height/5.0;

    //左侧导航
    CGFloat scrollButtonH = height/4;
    CGFloat scrollButtonW = buttonW*1.5;

    UIView *scrollsuperView = (UIView*)[self viewWithTag:110];//[[UIView alloc] initWithFrame:];
    scrollsuperView.frame = CGRectMake(spaceX, top, scrollButtonW, height);


    UIScrollView *scroll = (UIScrollView*)[self viewWithTag:109];//[[UIScrollView alloc] initWithFrame:];
    scroll.frame = CGRectMake(0, 0, scrollButtonW, height);


    for (int i=0; i<6; i++) {
        //按钮
        UIButton *button = (UIButton*)[self viewWithTag:111+i];
        button.frame = CGRectMake(0, i*(scrollButtonH+0.5), scrollButtonW, scrollButtonH);

        //分割线
        if (i != 5) {
            UILabel *line = (UILabel*)[self viewWithTag:131+i];//[[UILabel alloc] initWithFrame:];
            line.frame = CGRectMake(5, (i+1)*(scrollButtonH+0.5), scrollButtonW-10, 0.5);
        }
    }


    //右侧符号
    CGFloat collectionX = spaceX*2 + scrollButtonW;
    CGFloat collectionW = buttonW*5 + 4; //4是cell的间距

    UIView *collectionsuperView = (UIView*)[self viewWithTag:100];//[[UIView alloc] initWithFrame:];
    collectionsuperView.frame = CGRectMake(collectionX, top, collectionW, height);

    _collectionView.frame = CGRectMake(0, 0, collectionW, height);


    //底部固定view
    CGFloat superviewY = top + height + spaceY;
    CGFloat superviewW = self.frame.size.width - spaceX*2;
    UIView *superView = (UIView*)[self viewWithTag:120];//[[UIView alloc] initWithFrame:];
    superView.frame = CGRectMake(spaceX, superviewY, superviewW, bottomViewH);

    CGFloat supBttonW = superviewW/3.0;
    for (int i=0; i<3; i++) {
        UIButton *button = (UIButton*)[self viewWithTag:121+i];
        button.frame = CGRectMake(i*supBttonW, 0, supBttonW, bottomViewH);
    }
}


- (void)changeBackgroudColor {
    GZUserDefaults *share = [GZUserDefaults shareUserDefaults];

    NSString *skinName = [share getGroupValueForKey:@"keyboardSkin"];
    GZKeyboardSkin *skin = [GZKeyboardSkin defaultKeyboardSkin];
    //背景图
    if (skin.backgroudImage_kb) {
        UIImageView *imageview = [[UIImageView alloc] initWithFrame:self.bounds];
        imageview.image = [UIImage imageNamed:skin.backgroudImage_kb];
        [self addSubview:imageview];
    }
    //背景色
    self.backgroundColor = skin.backgroungColor_kb;

    _collectionView.backgroundColor = skin.backgroungColor_kb;
    [_collectionView reloadData];

    //左侧
    //NSArray *scrollSubs = [NSArray arrayWithObjects:@"常用",@"中文",@"英文",@"表情",@"邮箱",@"网址", nil];
    for (int i=0; i<6; i++) {
        //按钮
        GZFunctionButton_symbol_l *button = (GZFunctionButton_symbol_l*)[self viewWithTag:111+i];
        [button setButtonStyleWithSkin:skinName];
//        //分割线
//        if (i != 5) {
//            UILabel *line = [[UILabel alloc] initWithFrame:CGRectMake(5, (i+1)*(scrollButtonH+0.5), scrollButtonW-10, 0.5)];
//            line.backgroundColor = RGBA(210, 213, 219, 1.0);
//            line.tag = 131+i;
//            [scroll addSubview:line];
//        }
        if (selected-111 == i) {
            button.backgroundColor = [UIColor lightGrayColor];
        }
    }
    //底端
    //NSArray *images = [NSArray arrayWithObjects:@"keyboard_back",@"keyboard_unlock",@"keyboard_clear", nil];
    for (int i=0; i<3; i++) {
        GZFunctionButton_symbol_b *button = (GZFunctionButton_symbol_b*)[self viewWithTag:121+i];
        [button setButtonStyleWithSkin:skinName];
    }
}

- (void)createViews:(CGRect)frame {
    //键盘布局 水平间距5 垂直间距7
    //键盘布局 顶部间距3 底部间距3
    CGFloat spaceX = 5.0;
    CGFloat spaceY = 7.0;
    CGFloat top = 3.0;
    CGFloat bottom = 3.0;

    CGFloat bottomViewH = 35; //底部固定视图高度
    CGFloat height = frame.size.height - top - bottom - spaceY - bottomViewH;
    CGFloat buttonW = (frame.size.width - spaceX*3 - 4)/6.5; //符号按钮宽1 左边的导航宽1.5 4是collection的cell之间的间距

    collectionCellW = buttonW;
    collectionCellH = height/5.0;

    //左侧导航
    CGFloat scrollButtonH = height/4;
    CGFloat scrollButtonW = buttonW*1.5;

    UIView *scrollsuperView = [[UIView alloc] initWithFrame:CGRectMake(spaceX, top, scrollButtonW, height)];
    scrollsuperView.backgroundColor = [UIColor lightGrayColor];
    scrollsuperView.layer.cornerRadius = 5;
    scrollsuperView.layer.shadowColor = [UIColor blackColor].CGColor;
    scrollsuperView.layer.shadowOpacity = 1.0;
    scrollsuperView.layer.shadowOffset = CGSizeMake(0, 3);
    scrollsuperView.layer.shadowRadius = 5;
//    scrollsuperView.layer.shadowPath = [UIBezierPath bezierPathWithRect:scrollsuperView.bounds].CGPath;
    [self addSubview:scrollsuperView];
    scrollsuperView.tag = 110;

    UIScrollView *scroll = [[UIScrollView alloc] initWithFrame:CGRectMake(0, 0, scrollButtonW, height)];
    scroll.delegate = self;
    scroll.backgroundColor = RGBA(210, 213, 219, 1.0);
    scroll.layer.cornerRadius = 5;
    scroll.contentSize = CGSizeMake(buttonW*1.5, scrollButtonH*6);
    scroll.showsVerticalScrollIndicator = NO;
    scroll.tag = 109;
    [scrollsuperView addSubview:scroll];

    GZUserDefaults *share = [GZUserDefaults shareUserDefaults];
    NSString *skin = [share getGroupValueForKey:@"keyboardSkin"];

    NSArray *scrollSubs = [NSArray arrayWithObjects:@"常用",@"中文",@"英文",@"表情",@"邮箱",@"网址", nil];
    for (int i=0; i<6; i++) {
        //按钮
        GZFunctionButton_symbol_l *button = [GZFunctionButton_symbol_l buttonWithType:UIButtonTypeSystem];
        //button.backgroundColor = [UIColor whiteColor];
        [button setButtonStyleWithSkin:skin];
        //[button setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
        button.titleLabel.font = [UIFont systemFontOfSize:18];
        [button setTitle:scrollSubs[i] forState:UIControlStateNormal];
        button.frame = CGRectMake(0, i*(scrollButtonH+0.5), scrollButtonW, scrollButtonH);
        button.tag = 111+i;
        [button addTarget:self action:@selector(didPartTap:) forControlEvents:UIControlEventTouchUpInside];
        [scroll addSubview:button];

        //分割线
        if (i != 5) {
            UILabel *line = [[UILabel alloc] initWithFrame:CGRectMake(5, (i+1)*(scrollButtonH+0.5), scrollButtonW-10, 0.5)];
            line.backgroundColor = RGBA(210, 213, 219, 1.0);
            line.tag = 131+i;
            [scroll addSubview:line];
        }

        if (selected-111 == i) {
            button.backgroundColor = [UIColor lightGrayColor];
        }
    }


    //右侧符号
    CGFloat collectionX = spaceX*2 + scrollButtonW;
    CGFloat collectionW = buttonW*5 + 4; //4是cell的间距

    UIView *collectionsuperView = [[UIView alloc] initWithFrame:CGRectMake(collectionX, top, collectionW, height)];
    collectionsuperView.backgroundColor = [UIColor lightGrayColor];
    collectionsuperView.layer.cornerRadius = 5;
    collectionsuperView.layer.shadowColor = [UIColor blackColor].CGColor;
    collectionsuperView.layer.shadowOpacity = 1.0;
    collectionsuperView.layer.shadowOffset = CGSizeMake(0, 3);
    collectionsuperView.layer.shadowRadius = 5;
//    collectionsuperView.layer.shadowPath = [UIBezierPath bezierPathWithRect:collectionsuperView.bounds].CGPath;
    [self addSubview:collectionsuperView];
    collectionsuperView.tag = 100;

    UICollectionViewFlowLayout *flow = [[UICollectionViewFlowLayout alloc] init];
    flow.scrollDirection = UICollectionViewScrollDirectionVertical; //垂直滑动方向
    flow.minimumInteritemSpacing = 1; //水平最小间距
    flow.minimumLineSpacing = 1;

    if (!_collectionView) {
        GZKeyboardSkin *sk = [GZKeyboardSkin defaultKeyboardSkin];
        _collectionView = [[UICollectionView alloc] initWithFrame:CGRectMake(0, 0, collectionW, height) collectionViewLayout:flow];
        _collectionView.backgroundColor = sk.backgroungColor_kb;
        _collectionView.dataSource = self;
        _collectionView.delegate = self;
        _collectionView.bounces = YES;
        _collectionView.layer.cornerRadius = 5;
        _collectionView.showsVerticalScrollIndicator = NO;
        [_collectionView registerClass:[GZSymbolCollectionCell class] forCellWithReuseIdentifier:@"synbolCollectionCell"];
        [collectionsuperView addSubview:_collectionView];
    }


    //底部固定view
    CGFloat superviewY = top + height + spaceY;
    CGFloat superviewW = self.frame.size.width - spaceX*2;
    UIView *superView = [[UIView alloc] initWithFrame:CGRectMake(spaceX, superviewY, superviewW, bottomViewH)];
    superView.backgroundColor = [UIColor lightGrayColor];
    superView.layer.cornerRadius = 5;
    superView.layer.shadowColor = [UIColor blackColor].CGColor;
    superView.layer.shadowOpacity = 1.0;
    superView.layer.shadowOffset = CGSizeMake(0, 3);
    superView.layer.shadowRadius = 5;
//    superView.layer.shadowPath = [UIBezierPath bezierPathWithRect:superView.bounds].CGPath;
    [self addSubview:superView];
    superView.tag = 120;

    //NSArray *superViewSubs = [NSArray arrayWithObjects:@"返回",@"锁定",@"删除", nil];
    NSArray *images = [NSArray arrayWithObjects:@"keyboard_back",@"keyboard_unlock",@"keyboard_clear", nil];
    CGFloat supBttonW = superviewW/3.0;
    for (int i=0; i<3; i++) {
        GZFunctionButton_symbol_b *button = [GZFunctionButton_symbol_b buttonWithType:UIButtonTypeCustom];
        //button.backgroundColor = [UIColor clearColor];
        [button setButtonStyleWithSkin:skin];
        button.frame = CGRectMake(i*supBttonW, 0, supBttonW, bottomViewH);
        button.tag = 121+i;
        [button setImage:[UIImage imageNamed:images[i]] forState:UIControlStateNormal];
        [superView addSubview:button];

        if (i != 2) {
            [button addTarget:self action:@selector(didFuncTap:) forControlEvents:UIControlEventTouchUpInside];
        }else {
            [button addTarget:self action:@selector(didTouchDown) forControlEvents:UIControlEventTouchDown];
            [button addTarget:self action:@selector(didTouchUp) forControlEvents:UIControlEventTouchUpInside];
            [button addTarget:self action:@selector(didTouchUp) forControlEvents:UIControlEventTouchDragInside]; //移动手指出按钮
        }
    }
}


#pragma mark -- collectionView协议
//每个item之间的间距
- (CGFloat)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout*)collectionViewLayout minimumInteritemSpacingForSectionAtIndex:(NSInteger)section {
    return 1.0;
}
//cell的大小
- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath *)indexPath {
    return CGSizeMake(collectionCellW, collectionCellH);
}
//定义每个Section 的 margin
-(UIEdgeInsets)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout insetForSectionAtIndex:(NSInteger)section {
    return UIEdgeInsetsMake(0, 0, 0, 0);//分别为上、左、下、右
}
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView {
    return 1;
}
- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section {
    return _dataArray.count;
}

- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath {
    static NSString *cellID = @"synbolCollectionCell";
    GZSymbolCollectionCell *cell = (GZSymbolCollectionCell*)[collectionView dequeueReusableCellWithReuseIdentifier:cellID forIndexPath:indexPath];
    [cell setTitleText:_dataArray[indexPath.row]];
    
    GZKeyboardSkin *skin = [GZKeyboardSkin defaultKeyboardSkin];
    cell.backgroundColor = skin.backgroungColor_cd_subs;
    cell.titleLabel.textColor = skin.titleColor_cd_btn;
    cell.titleLabel.backgroundColor = skin.backgroungColor_cd_btn;
    return cell;
}
- (void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath {
    GZSymbolCollectionCell *cell = (GZSymbolCollectionCell*)[collectionView cellForItemAtIndexPath:indexPath];
    cell.titleLabel.backgroundColor = RGBA(75, 143, 252, 1);
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW,(int64_t)(0.1 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        cell.titleLabel.backgroundColor = [UIColor whiteColor];
    });
    //[collectionView deselectItemAtIndexPath:indexPath animated:YES];

    [[GZSoundPlay defaultSoundPlay] playSystemSound:1103];

    //存储符号使用频次 数据
    [self resetDataByIndex:(int)indexPath.row];

    if (self.sendSelectedStr) {
        NSString *str =_dataArray[indexPath.row];
        self.sendSelectedStr(str);
    }

    //不是锁定状态 选择完了就返回  也就是removeself
    if (!isLock && self.sendSelectedFunc) {
        self.sendSelectedFunc(1);
    }
}


//当cell高亮时返回是否高亮
- (BOOL)collectionView:(UICollectionView *)collectionView shouldHighlightItemAtIndexPath:(NSIndexPath *)indexPath {
    return YES;
}
- (void)collectionView:(UICollectionView *)collectionView didHighlightItemAtIndexPath:(NSIndexPath *)indexPath {
    GZSymbolCollectionCell *cell = (GZSymbolCollectionCell*)[collectionView cellForItemAtIndexPath:indexPath];
    cell.titleLabel.backgroundColor = RGBA(75, 143, 252, 1);
}
- (void)collectionView:(UICollectionView *)collectionView didUnhighlightItemAtIndexPath:(NSIndexPath *)indexPath {
    GZSymbolCollectionCell *cell = (GZSymbolCollectionCell*)[collectionView cellForItemAtIndexPath:indexPath];
    cell.titleLabel.backgroundColor = [UIColor whiteColor];
}




#pragma mark -- plist相关
//点击后 修改数据源 准备存储到plist
//存储符号使用频次 数据
- (void)resetDataByIndex:(int)index {
    if (selected == 111) {
        //目前在常用类别
        NSString *ke = [_common_keys objectAtIndex:index];
        int num = [[[_common_all objectAtIndex:index] allValues].firstObject intValue];
        num++;
        NSDictionary *dic = [NSDictionary dictionaryWithObject:@(num) forKey:ke];
        [_common_all replaceObjectAtIndex:index withObject:dic];
    }else {
        //在其他类别
        NSString *str =_dataArray[index];
        int amount = 0; //记录循环次数
        int num = (int)_common_keys.count;
        for (int i=0; i<num; i++) {
            NSString *va = _common_keys[i];
            if ([va isEqualToString:str]) {
                int num = [[[_common_all objectAtIndex:i] allValues].firstObject intValue];
                num++;
                NSDictionary *dic = [NSDictionary dictionaryWithObject:@(num) forKey:va];
                [_common_all replaceObjectAtIndex:i withObject:dic];
                break;
            }else {
                amount ++;
                continue;
            }
        }
        //符号是新添加的
        if (amount == num || num == 0) {
            [_common_keys addObject:str];
            [_common_all addObject:[NSDictionary dictionaryWithObject:@1 forKey:str]];
        }
    }
}

#pragma mark -- 导航按钮
- (void)didPartTap:(UIButton*)tap {
    NSInteger tagN = tap.tag;//@"常用",@"中文",@"英文",@"表情",@"邮箱",@"网址

    if (selected == tagN) {
        return;
    }else {
        [_dataArray removeAllObjects];
        _dataArray = nil;
    }

    tap.backgroundColor = [UIColor lightGrayColor];

    GZKeyboardSkin *skin = [GZKeyboardSkin defaultKeyboardSkin];
    UIColor *nomalColor = skin.backgroungColor_btn_symbol_l;

    UIButton *button1 = (UIButton*)[self viewWithTag:111];
    UIButton *button2 = (UIButton*)[self viewWithTag:112];
    UIButton *button3 = (UIButton*)[self viewWithTag:113];
    UIButton *button4 = (UIButton*)[self viewWithTag:114];
    UIButton *button5 = (UIButton*)[self viewWithTag:115];
    UIButton *button6 = (UIButton*)[self viewWithTag:116];

    NSArray *data;

    switch (tagN) {
        case 111:{
            button2.backgroundColor = nomalColor;//[UIColor whiteColor];
            button3.backgroundColor = nomalColor;//[UIColor whiteColor];
            button4.backgroundColor = nomalColor;//[UIColor whiteColor];
            button5.backgroundColor = nomalColor;//[UIColor whiteColor];
            button6.backgroundColor = nomalColor;//[UIColor whiteColor];
            data = _common_keys;
            break;
        }
        case 112:{
            button1.backgroundColor = nomalColor;//[UIColor whiteColor];
            button3.backgroundColor = nomalColor;//[UIColor whiteColor];
            button4.backgroundColor = nomalColor;//[UIColor whiteColor];
            button5.backgroundColor = nomalColor;//[UIColor whiteColor];
            button6.backgroundColor = nomalColor;//[UIColor whiteColor];
            data = [NSArray arrayWithObjects:@"，",@"。",@"？",@"：",@"；",@"“",@"”",@"《",@"》",@"！",@"（",@"）", nil];
            break;
        }
        case 113:{
            button1.backgroundColor = nomalColor;//[UIColor whiteColor];
            button2.backgroundColor = nomalColor;//[UIColor whiteColor];
            button4.backgroundColor = nomalColor;//[UIColor whiteColor];
            button5.backgroundColor = nomalColor;//[UIColor whiteColor];
            button6.backgroundColor = nomalColor;//[UIColor whiteColor]
            data = [NSArray arrayWithObjects:@",",@".",@"?",@"_",@"/",@"|",@"<",@">",@"=",@"+",@"-",@"*",@"/", nil];
            break;
        }
        case 114:{
            button1.backgroundColor = nomalColor;//[UIColor whiteColor];
            button2.backgroundColor = nomalColor;//[UIColor whiteColor];
            button3.backgroundColor = nomalColor;//[UIColor whiteColor];
            button5.backgroundColor = nomalColor;//[UIColor whiteColor];
            button6.backgroundColor = nomalColor;//[UIColor whiteColor];
            data = [NSArray arrayWithObjects:@"~_~",@"@_@",@"-_-",@"|_|",@"$_$",@"!_!",@"*_*", nil];
            break;
        }
        case 115:{
            button1.backgroundColor = nomalColor;//[UIColor whiteColor];
            button2.backgroundColor = nomalColor;//[UIColor whiteColor];
            button3.backgroundColor = nomalColor;//[UIColor whiteColor];
            button4.backgroundColor = nomalColor;//[UIColor whiteColor];
            button6.backgroundColor = nomalColor;//[UIColor whiteColor];
            data = [NSArray arrayWithObjects:@"@qq.com",@"@163.com",@"@sina.com",@"@139.com",nil];
            break;
        }
        case 116:{
            button1.backgroundColor = nomalColor;//[UIColor whiteColor];
            button2.backgroundColor = nomalColor;//[UIColor whiteColor];
            button3.backgroundColor = nomalColor;//[UIColor whiteColor];
            button4.backgroundColor = nomalColor;//[UIColor whiteColor];
            button5.backgroundColor = nomalColor;//[UIColor whiteColor];
            data = [NSArray arrayWithObjects:@".com",@".com",@".cn",@".org", nil];
            break;
        }
        default:
            break;
    }

    selected = tagN;
    _dataArray = [data mutableCopy];
    [_collectionView reloadData];
}

- (void)didFuncTap:(UIButton*)tap {
    UIButton *button = (UIButton*)tap;
    NSInteger tagN = button.tag;
    int type = 0; //1返回   2锁定  3删除

    switch (tagN) {
        case 121:
            type = 1;
            break;
        case 122:{
            type = 2;
            isLock = !isLock;
            if (isLock) {
                [button setImage:[UIImage imageNamed:@"keyboard_lock"] forState:UIControlStateNormal];
            }else {
                [button setImage:[UIImage imageNamed:@"keyboard_unlock"] forState:UIControlStateNormal];
            }
            break;
        }
        case 123:
            type = 3;
            break;
        default:
            break;
    }

    if (type != 0 && self.sendSelectedFunc) {
        self.sendSelectedFunc(type);
    }
}


//删除按钮---------------------------------
/*
 UIControlEventTouchDown即按钮按下时应触发的方法。
 实际使用过程中会出现延迟响应或间歇无响应，
 但是放开手指时会直接响应UIControlEventTouchDown、UIControlEventTouchUpInside两个方法
 touchesBegan不响应 不能用之获取按钮坐标
 */
- (void)didTouchDown {
    NSLog(@"didTouchDown");

    [self deleteActionStart]; //延时问题

    if (!timer) {
        timer = [NSTimer scheduledTimerWithTimeInterval:0.12 target:self selector:@selector(deleteActionStart) userInfo:nil repeats:YES];
    }
}
- (void)didTouchUp {
    NSLog(@"didTouchUp");
    [timer invalidate];
    timer = nil;
    [self deleteActionStop];
}

- (void)deleteActionStart {
    if (self.sendDeleteTap) {
        self.sendDeleteTap(YES);
    }
}
- (void)deleteActionStop {
    if (self.sendDeleteTap) {
        self.sendDeleteTap(NO);
    }
}


- (void)dealloc {
    NSLog(@"符号键盘 销毁");

    //存储plist
    [[GZUserPlist sharedUserPlist] saveSymbols:[_common_all copy] withName:@"common"];

    for (UIView *view in self.subviews) {
        [view removeFromSuperview];
    }


    UIScrollView *scroll = (UIScrollView*)[self viewWithTag:109];
    if (scroll) {
        [scroll removeFromSuperview];
        scroll = nil;
    }
    for (int i=0; i<6; i++) {
        //按钮
        UIButton *button = (UIButton*)[self viewWithTag:111+i];
        if (button) {
            [button removeFromSuperview];
            button = nil;
        }
        //分割线
        if (i != 5) {
            UILabel *line = (UILabel*)[self viewWithTag:131+i];
            if (line) {
                [line removeFromSuperview];
                line = nil;
            }
        }
    }

    for (int i=0; i<3; i++) {
        UIButton *button = (UIButton*)[self viewWithTag:121+i];
        if (button) {
            [button removeFromSuperview];
            button = nil;
        }
    }
    UIView *scrollsuperView = (UIView*)[self viewWithTag:110];
    if (scrollsuperView) {
        [scrollsuperView removeFromSuperview];
        scrollsuperView = nil;
    }

    UIView *collectionsuperView = (UIView*)[self viewWithTag:100];
    if (collectionsuperView) {
        [collectionsuperView removeFromSuperview];
        collectionsuperView = nil;
    }

    UIView *superView = (UIView*)[self viewWithTag:120];
    if (superView) {
        [superView removeFromSuperview];
        superView = nil;
    }

    if (_collectionView) {
        [_collectionView removeFromSuperview];
        _collectionView = nil;
    }
    if (_dataArray) {
        [_dataArray removeAllObjects];
        _dataArray = nil;
    }

    if (_common_all) {
        [_common_all removeAllObjects];
        _common_all = nil;
    }
    if (_common_keys) {
        [_common_keys removeAllObjects];
        _common_keys = nil;
    }
    if (timer) {
        [timer invalidate];
        timer = nil;
    }
}


@end
