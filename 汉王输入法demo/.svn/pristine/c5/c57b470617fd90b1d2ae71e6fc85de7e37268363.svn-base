//
//  GZUserPlist.m
//  HanvonInput
//
//  Created by hanvon on 2017/11/20.
//  Copyright © 2017年 hanvon. All rights reserved.
//

#import "GZUserPlist.h"

@interface GZUserPlist()
{
@private
    NSFileManager *fileManager;
    dispatch_queue_t ioQueue;
}
@end


@implementation GZUserPlist
+ (GZUserPlist *)sharedUserPlist {
    static GZUserPlist *_sharedManager = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        _sharedManager = [[GZUserPlist alloc] init];
    });
    return _sharedManager;
}
- (id)init{
    self = [super init];
    if (self) {
//        dispatch_queue_t global_queue = dispatch_get_global_queue(0, 0);
        ioQueue = dispatch_queue_create("com.hanvon.symbol", DISPATCH_QUEUE_SERIAL);
        fileManager = [NSFileManager defaultManager];
    }
    return self;
}


- (void)saveSymbol:(NSString*)symbol withName:(NSString*)name isNeedSort:(BOOL)isNeed {
    NSString *name1 = [NSString stringWithFormat:@"symbol_%@",name];
    NSString *plistPath = [CACHESPath stringByAppendingPathComponent:[NSString stringWithFormat:@"%@.plist",name1]];
    NSMutableArray *originArr = [[NSMutableArray arrayWithContentsOfFile:plistPath] mutableCopy];

    int amount = 0; //记录循环次数
    for (int i=0; i<originArr.count; i++) {
        NSDictionary *dic = [originArr objectAtIndex:i];
        NSString *dicKey = [dic allKeys].firstObject;
        //原本有这个符号 则增加符号使用频次
        if ([symbol isEqualToString:dicKey]) {
            NSNumber *dicValue = [dic valueForKey:dicKey];
            int num = [dicValue intValue] + 1;
            NSDictionary *new = [NSDictionary dictionaryWithObject:@(num) forKey:dicKey];
            [originArr replaceObjectAtIndex:i withObject:new];
            break;
        }else {
            amount ++;
            continue;
        }
    }
    //符号是新添加的
    if (amount == (int)originArr.count - 1 || originArr.count == 0) {
        NSDictionary *new = [NSDictionary dictionaryWithObject:@1 forKey:name];
        [originArr addObject:new];
    }

    //保存
    if (!isNeed) {
        BOOL isok = [originArr writeToFile:plistPath atomically:YES];
        if (isok) {
            [originArr removeAllObjects];
            originArr = nil;
        }
    }else {
        NSArray *arr = [originArr copy];
        [self saveSymbols:arr withName:name];

        [originArr removeAllObjects];
        originArr = nil;
    }
}

- (void)saveSymbols:(NSArray*)symbols withName:(NSString*)name {

    NSString *name1 = [NSString stringWithFormat:@"symbol_%@",name];
    NSString *plistPath = [CACHESPath stringByAppendingPathComponent:[NSString stringWithFormat:@"%@.plist",name1]];

    dispatch_async(ioQueue, ^{
        //根据新数组元素键 进行降序排列
        NSArray *result = [symbols sortedArrayUsingComparator:^NSComparisonResult(NSDictionary *obj1, NSDictionary *obj2) {
            NSNumber *new1 = [obj1 allValues].firstObject;
            NSNumber *new2 = [obj2 allValues].firstObject;
            return [new2 compare:new1]; //降序排列的 键
        }];

        //保存
        if (![fileManager fileExistsAtPath:plistPath]) {
            NSLog(@"不存在");
            NSMutableArray *dictplist = [[NSMutableArray alloc] initWithArray:result];
            [dictplist writeToFile:plistPath atomically:YES];
        }else {
            BOOL isok = [result writeToFile:plistPath atomically:YES];
            NSLog(@"%d",isok);
        }

        dispatch_sync(dispatch_get_main_queue(), ^{
            return;
        });
    });
}

- (void)sortDataArrayByName:(NSString*)name {

    NSString *name1 = [NSString stringWithFormat:@"symbol_%@",name];
    NSString *plistPath = [CACHESPath stringByAppendingPathComponent:[NSString stringWithFormat:@"%@.plist",name1]];
    NSArray *symbols = [NSArray arrayWithContentsOfFile:plistPath];

    dispatch_async(ioQueue, ^{
        //根据新数组元素键 进行降序排列
        NSArray *result = [symbols sortedArrayUsingComparator:^NSComparisonResult(NSDictionary *obj1, NSDictionary *obj2) {
            NSNumber *new1 = [obj1 allValues].firstObject;
            NSNumber *new2 = [obj2 allValues].firstObject;
            return [new2 compare:new1]; //降序排列的 键
        }];

        //保存
        if (![fileManager fileExistsAtPath:plistPath]) {
            NSLog(@"不存在");
            NSMutableArray *dictplist = [[NSMutableArray alloc] initWithArray:result];
            [dictplist writeToFile:plistPath atomically:YES];
        }else {
            BOOL isok = [result writeToFile:plistPath atomically:YES];
            NSLog(@"%d",isok);
        }

        dispatch_sync(dispatch_get_main_queue(), ^{
            return;
        });
    });
}

- (NSArray*)getSymbolsByName:(NSString*)name {
    NSString *name1 = [NSString stringWithFormat:@"symbol_%@",name];
    NSString *plistPath = [CACHESPath stringByAppendingPathComponent:[NSString stringWithFormat:@"%@.plist",name1]];

    NSArray *arr = [NSArray arrayWithContentsOfFile:plistPath];

    return arr;
}

- (NSArray*)getSymbolsAllKeysByName:(NSString*)name {
    NSArray *arr = [self getSymbolsByName:name];
    NSMutableArray *result = [[NSMutableArray alloc] initWithCapacity:arr.count];

    for (int i=0; i<arr.count; i++) {
        NSDictionary *dic = arr[i];
        NSString *key = [dic allKeys].firstObject;
        [result addObject:key];
    }
    return result;
}

@end
