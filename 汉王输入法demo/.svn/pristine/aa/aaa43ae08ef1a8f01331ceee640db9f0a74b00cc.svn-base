//
//  KeyboardViewController.m
//  HanvonKeyboard
//
//  Created by hanvon on 2017/11/4.
//  Copyright © 2017年 hanvon. All rights reserved.
//

#import "KeyboardViewController.h"
#import "GZCandidateBarView.h"
#import "GZCandidateMoreView.h"
#import "GZQwertyKeyboard.h"
#import "GZWrightKeyboard.h"
#import "GZSquaredKeyboard.h"
#import "GZStrokeKeyboard.h"
#import "GZNumberKeyboard.h"
#import "GZSymbolKeyboard.h"
#import "GZSettingBoard.h"
#import "GZKeyboardSelect.h"
#import "GZExpressionKeyboard.h"
#import "GZUserPhrasesView.h"

#import "GZQwerty.h"
#import "GZWright.h"
#import "GZSquared.h"
#import "GZStroke.h"

#import "GZSoundPlay.h"
//#import "GZRequest.h"


#define navigaitonHeight 60 //导航栏的高度
#define navigationButtonBottom 10 //导航上按钮距离底端距离
/**
 *KeyboardType 输入框设置的键盘类型
 *ReturnType 输入框设置的return键类型
 ***/
typedef NS_ENUM(NSInteger, KeyboardType) {
    Default = 0, //正常
    NumbersAndPunctuation, //数字
    URL, //地址
    EmailAddress, //邮箱
    WebSearch, //浏览器地址
    ASCLLCapable //英文 正常
};
typedef NS_ENUM(NSInteger, ReturnType) {
    DefaultReturn = 0,
    SendReturn, //发送
};


@interface KeyboardViewController () {
    //    clock_t clt0;
    //    clock_t clt1;
}
@property (nonatomic, strong) NSLayoutConstraint *heightConstraint; //键盘整体高度约束
@property (nonatomic, assign) KeyboardType keyboard_type_last; //上一次 输入框设置的键盘类型
@property (nonatomic, assign) KeyboardType keyboard_type; //输入框设置的键盘类型
@property (nonatomic, assign) ReturnType return_type; //输入框设置的return键类型
@property (nonatomic, assign) BOOL isQuitOutApp; //是否点击了隐藏键盘
@property (nonatomic, assign) BOOL isInput; //全键盘 是否是正在输入中

@property (nonatomic, assign) BOOL isWrightTimeout; //手写 间隔时间超时
//@property (nonatomic,strong) NSString *wrightFirst; //手写 超时时 第一个候选
@property (nonatomic, assign) BOOL isWrightPreciate; //手写 是否联想状态
@property (nonatomic, assign) int wrightNum; //手写中 上屏文字的个数

@property (nonatomic, strong) GZCandidateBarView *tabBar; //候选框
@property (nonatomic, strong) GZCandidateMoreView *tabBarMore; //候选框 展示更多
@property (nonatomic, strong) GZQwertyKeyboard *textKeyboard; //全键盘
@property (nonatomic, strong) GZWrightKeyboard *wrightKeyboard; //手写键盘
@property (nonatomic, strong) GZSquaredKeyboard *squaredKeyboard; //九宫格键盘
@property (nonatomic, strong) GZStrokeKeyboard *strokeKeyboard; //笔画键盘
@property (nonatomic, strong) GZNumberKeyboard *numberKeyboard; //数字键盘
@property (nonatomic, strong) GZSymbolKeyboard *symbolKeyboard; //符号键盘
@property (nonatomic, strong) GZSettingBoard *settingBoard; //设置
@property (nonatomic, strong) GZKeyboardSelect *selectBoard; //选择键盘
@property (nonatomic, strong) GZExpressionKeyboard *expressionBoard; //表情键盘
@property (nonatomic, strong) GZUserPhrasesView *userPhrasesBoard; //快捷短语
@end



@implementation KeyboardViewController

#pragma mark -- memorry waring
- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    NSLog(@"******* ******* ******* ******* ");
    NSLog(@"Warning!!!!!!didReceiveMemoryWarning!!!!!!");
    [[GZSoundPlay defaultSoundPlay] releseSoundPlay];
    //[[GZUserDefaults shareUserDefaults] releaseUserPlist];
    [[GZUserPlist sharedUserPlist] releaseUserPlist];
    [[GZPublicMethod sharedPublicMethod] releasePublicMethod];
}

#pragma mark -- life cycle
/**
 *Host App在调用Extension的时候会首先调用
 *如果实现了的话，会先执行里面的函数再viewDidLoad
 */
- (void)beginRequestWithExtensionContext:(NSExtensionContext *)context {
    [super beginRequestWithExtensionContext:context];
    NSLog(@"开始启动Extension");
    _isQuitOutApp = NO;
    //存储字典到沙盒
    [self saveDictioryToDoc];
    //键盘设置
    [self setSettings];
}
- (void)viewDidLoad {
    [super viewDidLoad];
    NSLog(@"启动viewDidload");
    //夜间模式 0日间模式 1夜间模式
    GZUserDefaults *share = [GZUserDefaults shareUserDefaults];
    NSNumber *nightMode = [share getValueForKey:@"nightMode"];
    if ([nightMode isEqualToNumber:@1]) {
        self.view.backgroundColor = [UIColor blackColor];
        self.view.alpha = 0.5;
    }else {
        self.view.backgroundColor = [UIColor whiteColor];
        self.view.alpha = 1;
    }
    //添加导航
    [self addNavigationBarView];
    //识别并添加键盘
    [self recognizeAndAddKeyboard];
}
- (void)updateViewConstraints {
    [super updateViewConstraints];
    NSLog(@"updateViewConstraints");
}
- (void)viewWillLayoutSubviews{
    [super viewWillLayoutSubviews];
    NSLog(@"viewWillLayoutSubviews");
}
- (void)textWillChange:(id<UITextInput>)textInput {
    NSLog(@"textWillChange");
    if (_isQuitOutApp) {
        return;
    }
    [self removeLitallSettingBoards];
    [self removeLittalKeyboardTimer];
    [self setNavigationStatus];
}
- (void)textDidChange:(id<UITextInput>)textInput {
    NSLog(@"textDidChange");
    if (_isQuitOutApp) {
        return;
    }
    //键盘类型
    UIKeyboardType systemKeyboardType = self.textDocumentProxy.keyboardType;
    switch (systemKeyboardType) {
        case UIKeyboardTypeDefault: {
            NSLog(@"输入框类型:Default");
            _keyboard_type = 0;
            break;
        }
        case UIKeyboardTypeASCIICapable: {
            NSLog(@"输入框类型ASCIICapable");
            _keyboard_type = 5;
            break;
        }
        case UIKeyboardTypeNumbersAndPunctuation: {
            NSLog(@"输入框类型NumbersAndPunctuation");
            _keyboard_type = 1;
            break;
        }
        case UIKeyboardTypeURL: {
            NSLog(@"输入框类型URL");
            _keyboard_type = 2;
            break;
        }
        case UIKeyboardTypeNumberPad: {
            NSLog(@"输入框类型NumberPad");
            _keyboard_type = 1;
            break;
        }
        case UIKeyboardTypePhonePad: {
            NSLog(@"输入框类型PhonePad");
            _keyboard_type = 1;
            break;
        }
        case UIKeyboardTypeNamePhonePad: {
            NSLog(@"输入框类型NamePhonePad");
            _keyboard_type = 0;
            break;
        }
        case UIKeyboardTypeEmailAddress: {
            NSLog(@"输入框类型EmailAddress");
            _keyboard_type = 3;
            break;
        }
        case UIKeyboardTypeDecimalPad: {
            NSLog(@"输入框类型DecimalPad");
            _keyboard_type = 1;
            break;
        }
        case UIKeyboardTypeTwitter: {
            NSLog(@"输入框类型Twitter");
            _keyboard_type = 0;
            break;
        }
        case UIKeyboardTypeWebSearch: {
            NSLog(@"输入框类型WebSearch");
            _keyboard_type = 0;
            break;
        }

        default:{
            if (@available(iOS 10.0, *)) {
                if (systemKeyboardType == UIKeyboardTypeASCIICapableNumberPad) {
                    NSLog(@"输入框类型ASCIICapableNumberPad");
                    _keyboard_type = 5;
                    break;
                }
            }
            NSLog(@"不知道输入框类型");
            _keyboard_type = 0;
            break;
        }
    }

    //return类型
    UIReturnKeyType system_returntype = self.textDocumentProxy.returnKeyType;
    if (system_returntype == UIReturnKeySend) {
        _return_type = 1;
    }else {
        _return_type = 0;
    }

    if (_keyboard_type == _keyboard_type_last) {
        //上一次与这一次的输入框类型相同
        return;
    }

    //输入框类型
    [self setKeyboarType];
}
- (void)viewWillAppear:(BOOL)animated {
    [super viewWillAppear:animated];
    NSLog(@"viewWillAppear");
    //约束键盘高度
    CGFloat height = [self getKeyboardViewHeight];
    [self setKeyboardViewHeight:height+navigaitonHeight]; //整体高度=键盘+导航的高度
}
- (void)viewDidAppear:(BOOL)animated {
    [super viewDidAppear:animated];
    NSLog(@"viewDidAppear");
}
- (void)viewWillDisappear:(BOOL)animated {
    [super viewWillDisappear:animated];
    NSLog(@"viewWillDisappear");
}
- (void)viewDidDisappear:(BOOL)animated {
    [super viewDidDisappear:animated];
    NSLog(@"viewDidDisappear");
    [self removeAllSelfViews];
}
- (void)dealloc {
    NSLog(@"main主页面 销毁");
    [[GZQueue shareQueue] cancel];
    [[GZSoundPlay defaultSoundPlay] releseSoundPlay];
    //[[GZUserDefaults shareUserDefaults] releaseUserPlist];
    [[GZUserPlist sharedUserPlist] releaseUserPlist];
    [[GZPublicMethod sharedPublicMethod] releasePublicMethod];
    //    clt1 = clock();
    //    NSLog(@"span:%lu", clt1 - clt0);
}


#pragma mark -- 数据
//存储字典到沙盒
- (void)saveDictioryToDoc {
    NSLog(@"keyboard存储字典到沙盒");

    NSFileManager *manager = [NSFileManager defaultManager];
    GZUserPlist *plist = [GZUserPlist sharedUserPlist];

    //中文全键盘、中文九键盘、中文笔画键盘
    NSString *userDict_chinese = [plist getUserDictionaryPath:@"ml-user.dic"];
    if (![manager fileExistsAtPath:userDict_chinese]) {
        NSLog(@"开启线程1——中文用户词典");
        dispatch_queue_t global_queue = dispatch_get_global_queue(0, 0);
        dispatch_async(global_queue, ^{
            [plist saveUserDictionary:@"ml-user.dic"];
            dispatch_sync(dispatch_get_main_queue(), ^{
                NSLog(@"线程1——中文用户词典成功");
                return;
            });
        });
    }else {
        NSLog(@"saved中文用户词典");
    }

    //英文
    NSString *userDict_english = [plist getUserDictionaryPath:@"en-user.dic"];
    if (![manager fileExistsAtPath:userDict_english]) {
        NSLog(@"开启线程2——英文用户词典");
        dispatch_queue_t global_queue = dispatch_get_global_queue(0, 0);
        dispatch_async(global_queue, ^{
            [plist saveUserDictionary:@"en-user.dic"];
            dispatch_sync(dispatch_get_main_queue(), ^{
                NSLog(@"线程2——英文用户词典成功");
                return;
            });
        });
    }else {
        NSLog(@"saved英文用户词典");
    }
}

//键盘基本设置
- (void)setSettings {
    GZUserDefaults *share = [GZUserDefaults shareUserDefaults];

    NSNumber *chineseAssociation = [share getValueForKey:@"chineseAssociation"]; //中文联想
    NSNumber *nightMode = [share getValueForKey:@"nightMode"]; //夜间模式 0日间模式 1夜间模式
    NSNumber *fuzzy = [share getValueForKey:@"fuzzy"]; //模糊音
    NSNumber *recovery = [share getValueForKey:@"recovery"]; //纠错
    NSNumber *sound = [share getValueForKey:@"sound"]; //声音
    NSNumber *shock = [share getValueForKey:@"shock"]; //震动
    if (chineseAssociation == NULL) {
        [share saveValue:@1 forKey:@"chineseAssociation"]; //中文联想
    }
    if (nightMode == NULL) {
        [share saveValue:@0 forKey:@"nightMode"]; //夜间模式 0日间模式 1夜间模式
    }
    if (fuzzy == NULL) {
        [share saveValue:@0 forKey:@"fuzzy"]; //模糊音
    }
    if (recovery == NULL) {
        [share saveValue:@0 forKey:@"recovery"]; //纠错
    }
    if (sound == NULL) {
        [share saveValue:@1 forKey:@"sound"]; //声音
    }
    if (shock == NULL) {
        [share saveValue:@0 forKey:@"shock"]; //震动
    }

    //皮肤设置
    //    NSString *skinName = [share getGroupValueForKey:@"keyboardSkin"];
    //    if (skinName == nil|| !skinName || [skinName isKindOfClass:[NSNull class]] || skinName == NULL) {
    //        skinName = @"default";
    //    }
    //    NSLog(@"模式：%@",skinName);
    //    GZKeyboardSkin *skin = [GZKeyboardSkin defaultKeyboardSkin];
    //    [skin setSkin:skinName];
}

//识别并添加键盘
- (void)recognizeAndAddKeyboard {
    //键盘类型
    GZUserDefaults *share = [GZUserDefaults shareUserDefaults];

    NSString *lastKeyboard = [share getValueForKey:@"lastKeyboard"];
    NSLog(@"KeyboardType_last == %@",lastKeyboard);
    if (lastKeyboard == nil || lastKeyboard.length == 0 || lastKeyboard == NULL) {
        //上次使用的键盘没有
        NSString *keyboardStr = [share getValueForKey:@"keyboardType"];
        NSLog(@"KeyboardType == %@",keyboardStr);
        if (keyboardStr == nil || !keyboardStr || [keyboardStr isKindOfClass:[NSNull class]] || keyboardStr == NULL) {
            //第一次进入
            [share saveValue:@"wright" forKey:@"keyboardType"];
            [share saveValue:@"wright" forKey:@"lastKeyboard"];
            [self addKeyboardView:3];
            return;
        }
        if ([keyboardStr isEqualToString:@"qwerty_pinyin"]) {
            [self addKeyboardView:1];
        }else if ([keyboardStr isEqualToString:@"qwerty_english"]) {
            [self addKeyboardView:2];
        }else if ([keyboardStr isEqualToString:@"wright"]) {
            [self addKeyboardView:3];
        }else if ([keyboardStr isEqualToString:@"squared"]) {
            [self addKeyboardView:4];
        }else if ([keyboardStr isEqualToString:@"stroke"]) {
            [self addKeyboardView:5];
        }else {
            [share saveValue:@"wright" forKey:@"keyboardType"];
            [share saveValue:@"wright" forKey:@"lastKeyboard"];
            [self addKeyboardView:3];
        }
    }else if ([lastKeyboard isEqualToString:@"qwerty_pinyin"]) {
        //上次使用键盘是全键盘
        [share saveValue:@"qwerty_pinyin" forKey:@"keyboardType"];
        [self addKeyboardView:1];
    }else if ([lastKeyboard isEqualToString:@"wright"]) {
        //上次使用键盘是手写
        [share saveValue:@"wright" forKey:@"keyboardType"];
        [self addKeyboardView:3];
    }else if ([lastKeyboard isEqualToString:@"squared"]) {
        //上次使用键盘是九键
        [share saveValue:@"squared" forKey:@"keyboardType"];
        [self addKeyboardView:4];
    }else if ([lastKeyboard isEqualToString:@"stroke"]) {
        //上次使用键盘是笔画
        [share saveValue:@"stroke" forKey:@"keyboardType"];
        [self addKeyboardView:5];
    }else {}
}

//根据输入框设置的键盘类型
- (void)setKeyboarType {
    if (_isQuitOutApp) {
        return;
    }
    if (_keyboard_type == _keyboard_type_last) {
        //上一次与这一次的输入框类型相同
        return;
    }
    _keyboard_type_last = _keyboard_type; //重新赋值

    int typ = 0; //1中文 2英文 0数字

    switch (_keyboard_type) {
        case Default: {
            [self removeLitallKeyboards];
            typ = 1;
            break;
        }
        case NumbersAndPunctuation: {
            if (!_numberKeyboard) {
                [self addNumberKeyboardView];
            }else {
                [_numberKeyboard stopTimer];
                [self.view bringSubviewToFront:_numberKeyboard];
            }
            if (_expressionBoard) {
                [_expressionBoard removeFromSuperview];
                _expressionBoard = nil;
            }
            if (_symbolKeyboard) {
                [_symbolKeyboard removeFromSuperview];
                _symbolKeyboard = nil;
            }
            typ = 0;
            break;
        }
        case URL: {
            [self removeLitallKeyboards];
            typ = 2;
            break;
        }
        case EmailAddress: {
            [self removeLitallKeyboards];
            typ = 2;
            break;
        }
        case WebSearch: {
            [self removeLitallKeyboards];
            typ = 2;
            break;
        }
        case ASCLLCapable: {
            //英文 正常
            [self removeLitallKeyboards];
            typ = 2;
            break;
        }
        default:
            break;
    }

    if (typ == 0) {
        return;
    }
    GZUserDefaults *share = [GZUserDefaults shareUserDefaults];
    NSString *lastKeyboard = [share getValueForKey:@"lastKeyboard"];
    NSString *nowKeyboard = [share getValueForKey:@"keyboardType"];
    if (lastKeyboard == nil || lastKeyboard.length == 0 || lastKeyboard == NULL) {
        //上次使用的键盘没有
        if (nowKeyboard == nil || !nowKeyboard || [nowKeyboard isKindOfClass:[NSNull class]] || nowKeyboard == NULL) {
            //第一次进入
            if (typ == 2) {
                [share saveValue:@"qwerty_english" forKey:@"keyboardType"];
                [share saveValue:@"wright" forKey:@"lastKeyboard"];
                [self addKeyboardView:2];
            }else if (typ == 1) {
                [share saveValue:@"wright" forKey:@"keyboardType"];
                [share saveValue:@"wright" forKey:@"lastKeyboard"];
                [self addKeyboardView:3];
            }
            //            [share saveValue:@"wright" forKey:@"keyboardType"];
            //            [share saveValue:@"wright" forKey:@"lastKeyboard"];
            //            [self addKeyboardView:3];
            return;
        }
    }else if ([lastKeyboard isEqualToString:@"qwerty_pinyin"]) {
        //上次使用键盘是全键盘
        if (typ == 2 && ![nowKeyboard isEqualToString:@"qwerty_english"]) {
            GZQwerty *getData = [GZQwerty defaultQwerty];
            [_textKeyboard changeKeyboardType:2];
            [getData changeDictionary:1];
            [share saveValue:@"qwerty_english" forKey:@"keyboardType"];
            [share saveValue:@"qwerty_pinyin" forKey:@"lastKeyboard"];
        }else if (typ == 1 && ![nowKeyboard isEqualToString:@"qwerty_pinyin"]){
            GZQwerty *getData = [GZQwerty defaultQwerty];
            [_textKeyboard changeKeyboardType:1];
            [getData changeDictionary:0];
            [share saveValue:@"qwerty_pinyin" forKey:@"keyboardType"];
            [share saveValue:@"qwerty_pinyin" forKey:@"lastKeyboard"];
        }else {}
    }else if ([lastKeyboard isEqualToString:@"wright"]) {
        //上次使用键盘是手写
        if (typ == 2 && ![nowKeyboard isEqualToString:@"qwerty_english"]) {
            [share saveValue:@"qwerty_english" forKey:@"keyboardType"];
            [share saveValue:@"wright" forKey:@"lastKeyboard"];

            [self removeAllKeyboards]; //删除键盘 并重置
            [self addKeyboardView:2];
        }else if (typ == 1 && ![nowKeyboard isEqualToString:@"wright"]) {
            [share saveValue:@"wright" forKey:@"keyboardType"];
            [share saveValue:@"wright" forKey:@"lastKeyboard"];

            [self removeAllKeyboards]; //删除键盘 并重置
            [self addWrightKeyboardViw];
        }else {}
    }else if ([lastKeyboard isEqualToString:@"squared"]) {
        //上次使用键盘是九键
        if (typ == 2 && ![nowKeyboard isEqualToString:@"qwerty_english"]) {
            [share saveValue:@"qwerty_english" forKey:@"keyboardType"];
            [share saveValue:@"squared" forKey:@"lastKeyboard"];

            [self removeAllKeyboards]; //删除键盘 并重置
            [self addKeyboardView:2];
        }else if (typ == 1 && ![nowKeyboard isEqualToString:@"squared"]) {
            [share saveValue:@"squared" forKey:@"keyboardType"];
            [share saveValue:@"squared" forKey:@"lastKeyboard"];

            [self removeAllKeyboards];
            [self addSquaredKeyboardView];
        }else {}
    }else if ([lastKeyboard isEqualToString:@"stroke"]) {
        //上次使用键盘是笔画
        if (typ == 2 && ![nowKeyboard isEqualToString:@"qwerty_english"]) {
            [share saveValue:@"qwerty_english" forKey:@"keyboardType"];
            [share saveValue:@"stroke" forKey:@"lastKeyboard"];

            [self removeAllKeyboards]; //删除键盘 并重置
            [self addKeyboardView:2];
        }else if (typ == 1) {
            if (![nowKeyboard isEqualToString:@"stroke"]) {
                [share saveValue:@"stroke" forKey:@"keyboardType"];
                [share saveValue:@"stroke" forKey:@"lastKeyboard"];

                [self removeAllKeyboards];
                [self addStrokeKeyboardView];
            }
        }else {}
    }else {}
}


#pragma mark -- PrepareUI
//导航
- (void)addNavigationBarView {
    //GZUserDefaults *share = [GZUserDefaults shareUserDefaults];
    //NSString *skin = [share getGroupValueForKey:@"keyboardSkin"];

    GZKeyboardNavigationView *navigationBarView = [[GZKeyboardNavigationView alloc] init];
    //[navigationBarView setViewStyleWithSkin:skin];
    navigationBarView.backgroundColor = [UIColor whiteColor];

    navigationBarView.layer.borderWidth = 0.5;
    navigationBarView.layer.borderColor = [Color_background_kb CGColor];
    navigationBarView.tag = 101;
    [self.view addSubview:navigationBarView];

    navigationBarView.translatesAutoresizingMaskIntoConstraints = NO;
    NSLayoutConstraint *top =
    [NSLayoutConstraint constraintWithItem: navigationBarView
                                 attribute: NSLayoutAttributeTop
                                 relatedBy: NSLayoutRelationEqual
                                    toItem: self.view
                                 attribute: NSLayoutAttributeTop
                                multiplier: 1.0
                                  constant: 0.0];
    NSLayoutConstraint *left =
    [NSLayoutConstraint constraintWithItem: navigationBarView
                                 attribute: NSLayoutAttributeLeft
                                 relatedBy: NSLayoutRelationEqual
                                    toItem: self.view
                                 attribute: NSLayoutAttributeLeft
                                multiplier: 1.0
                                  constant: 0.0];
    //导航高度固定
    NSLayoutConstraint *height =
    [NSLayoutConstraint constraintWithItem: navigationBarView
                                 attribute: NSLayoutAttributeHeight
                                 relatedBy: NSLayoutRelationEqual
                                    toItem: nil
                                 attribute: NSLayoutAttributeNotAnAttribute
                                multiplier: 1.0
                                  constant: navigaitonHeight];
    NSLayoutConstraint *width =
    [NSLayoutConstraint constraintWithItem: navigationBarView
                                 attribute: NSLayoutAttributeWidth
                                 relatedBy: NSLayoutRelationEqual
                                    toItem: self.view
                                 attribute: NSLayoutAttributeWidth
                                multiplier: 1.0
                                  constant: 0.0];
    [self.view addConstraints:@[top,left,height,width]];

    //按钮
    CGFloat buttonW = 25; //按钮的宽高
    CGFloat space = (SCREEN_WIDTH - buttonW*5)/5.4; //左右边距相当于0.7个
    CGFloat y = navigaitonHeight-buttonW-navigationButtonBottom;

    NSArray *images = [NSArray arrayWithObjects:@"navigation_logo",@"navigation_qwerty",@"navigation_writing",@"navigation_expression",@"navigation_hidden", nil];
    NSArray *images_select = [NSArray arrayWithObjects:@"navigation_logo-select",@"navigation_qwerty-select",@"navigation_writing-select",@"navigation_expression-select",@"navigation_hidden", nil];
    for (int i=0; i<5; i++) {
        GZFunctionButton *button = [GZFunctionButton buttonWithType:UIButtonTypeCustom];
        button.frame = CGRectMake(space*0.7 + i*(buttonW+space), y, buttonW, buttonW); //导航高度固定
        button.tag = 102+i;
        [button setImage:[UIImage imageNamed:images[i]] forState:UIControlStateNormal];
        [button setImage:[UIImage imageNamed:images_select[i]] forState:UIControlStateSelected];
        [button addTarget:self action:@selector(didNavigationButtonTap:) forControlEvents:UIControlEventTouchUpInside];
        [navigationBarView addSubview:button];
    }
}

//键盘  1全键盘拼音 2全键盘英文 3手写键盘 4九宫格 5笔画
//键盘布局 水平间距5 垂直间距7 顶部间距3 底部间距3
- (void)addKeyboardView:(int)type {

    if (type == 1 || type == 2) {
        //导航的选择状态
        [self setNavigationSelectedIndex:2];

        if (_textKeyboard) {
            NSLog(@"已经有全键盘了，直接退出创建");
            return;
        }

        [self addQwertyKeyboardView:type];

        GZUserDefaults *share = [GZUserDefaults shareUserDefaults];
        [share saveValue:@"qwerty_pinyin" forKey:@"lastKeyboard"];

    }else if (type == 3) {
        [self setNavigationSelectedIndex:3];

        if (_wrightKeyboard) {
            NSLog(@"存在wright，退出不再创建手写");
            return;
        }

        [self addWrightKeyboardViw];

        GZUserDefaults *share = [GZUserDefaults shareUserDefaults];
        [share saveValue:@"wright" forKey:@"lastKeyboard"];

    }else if (type == 4) {
        [self setNavigationSelectedIndex:2];

        if (_squaredKeyboard) {
            NSLog(@"九宫格已存在");
            return;
        }
        [self addSquaredKeyboardView];

        GZUserDefaults *share = [GZUserDefaults shareUserDefaults];
        [share saveValue:@"squared" forKey:@"lastKeyboard"];

    }else if (type == 5) {
        [self setNavigationSelectedIndex:2];

        if (_strokeKeyboard) {
            NSLog(@"笔画键盘已存在");
            return;
        }

        [self addStrokeKeyboardView];

        GZUserDefaults *share = [GZUserDefaults shareUserDefaults];
        [share saveValue:@"stroke" forKey:@"lastKeyboard"];
    }else {}
}

#pragma mark -- FormalUI
//候选框
//高度 与导航等高
- (void)addCandidateBarView {
    GZUserDefaults *share = [GZUserDefaults shareUserDefaults];
    //NSString *skin = [share getGroupValueForKey:@"keyboardSkin"];

    if (!_tabBar) {
        _tabBar = [[GZCandidateBarView alloc] initWithFrame:CGRectMake(0, 0, SCREEN_WIDTH, navigaitonHeight)];
        //[_tabBar setViewStyleWithSkin:skin];
        _tabBar.backgroundColor = [UIColor whiteColor];
        [self.view addSubview:_tabBar];
    }

    __weak KeyboardViewController *weakSelf = self;

    _tabBar.sendSelectedStr = ^(NSString *text, int selectIndex) {

        if (weakSelf.textKeyboard) {
            [weakSelf.textKeyboard changeKeyboardStatusToInput:NO];
            [weakSelf changeGlobleToInput:NO];
        }

        if (text.length == 0) {
            [weakSelf removeAllCadidateContent];
            return ;
        }
        [weakSelf clickTabbarIndex:selectIndex byText:text]; //联想
    };

    _tabBar.sendRemoveTabbar = ^(BOOL remove) {
        if (remove) {
            [weakSelf.tabBar removeFromSuperview];
            weakSelf.tabBar = nil;
        }
    };

    //展示更多候选
    _tabBar.sendShowMoreFunc = ^(BOOL isShowMore, NSArray *data) {
        //有没有候选
        if (isShowMore && data) {
            NSString *keyboardtypeStr = [share getValueForKey:@"keyboardType"];
            if ([keyboardtypeStr isEqualToString:@"qwerty_english"] || [keyboardtypeStr isEqualToString:@"wright"] || [keyboardtypeStr isEqualToString:@"stroke"]) {
                //英文、手写、笔画没有拼音候选
                [weakSelf addCandidateMoreViewWithData:data hasPinyinCompont:NO];

            }else {
                //有没有拼音串  区别联想状态
                NSString *compontText = [weakSelf.tabBar getPinyin];
                if (compontText.length == 0 || compontText == nil) {
                    [weakSelf addCandidateMoreViewWithData:data hasPinyinCompont:NO];
                }else {

                    [weakSelf addCandidateMoreViewWithData:data hasPinyinCompont:YES];

                    //拼音候选数组
                    NSArray *compontArr;
                    if ([keyboardtypeStr isEqualToString:@"qwerty_pinyin"]) {
                        //全键盘
                        compontArr = [[GZQwerty defaultQwerty] getCompontArr];
                        if (compontArr.count == 0 || !compontArr) {
                            [weakSelf.tabBarMore closeCompontView:YES];
                        }else {
                            [weakSelf.tabBarMore changeShowCompont:compontArr];
                        }
                    }else if ([keyboardtypeStr isEqualToString:@"squared"]) {
                        //九宫格
                        GZSquared *getSquared = [GZSquared defaultSquared];
                        compontArr = [getSquared getCompontArr];
                        if (!compontArr || compontArr.count == 0) {
                            [weakSelf.tabBarMore closeCompontView:YES];

                        }else {
                            [weakSelf.tabBarMore changeShowCompont:compontArr];
                        }

                    }
                    else {}
                }
            }

        }else if (!isShowMore && !data) {
            [weakSelf removeCadidateShowMoreView];
            if (weakSelf.textKeyboard) {
                [weakSelf.textKeyboard changeKeyboardStatusToInput:NO];
                [weakSelf changeGlobleToInput:NO];
            }
        }
    };
}

//展示更多候选
//高度 与导航等高
- (void)addCandidateMoreViewWithData:(NSArray*)data hasPinyinCompont:(BOOL)isHasPinyinCompont{
    __weak GZUserDefaults *share = [GZUserDefaults shareUserDefaults];

    if (!_tabBarMore) {
        CGFloat height = [self getKeyboardViewHeight];
        if (data.count == 0) {
            data = [self.tabBar getCadidateArray];
        }

        CGFloat y = 15.0; //拼音串的高度
        _tabBarMore = [[GZCandidateMoreView alloc] initWithFrame:CGRectMake(0, y, SCREEN_WIDTH, height+(navigaitonHeight-y)) andData:data hasPinyinCompont:isHasPinyinCompont];
        [self.view addSubview:_tabBarMore];
    }

    __weak KeyboardViewController *weakSelf = self;

    _tabBarMore.sendSelectedStr = ^(NSString *text, int selectIndex) {

        if (weakSelf.textKeyboard) {
            [weakSelf.textKeyboard changeKeyboardStatusToInput:NO];
            [weakSelf changeGlobleToInput:NO];
        }

        if (text.length == 0) {
            [weakSelf removeCadidateShowMoreView];
            [weakSelf removeAllCadidateContent];
            [weakSelf.tabBar changeShowMoreButton:0]; //展开更多按钮收起
            return ;
        }

        [weakSelf removeCadidateShowMoreView];
        [weakSelf.tabBar changeShowMoreButton:0]; //展开更多按钮收起

        [weakSelf clickTabbarIndex:selectIndex byText:text]; //联想
    };

    _tabBarMore.sendSelectedConpont = ^(NSString *text, int selectIndex, BOOL isLastCompont) {
        if (text.length == 0 || selectIndex < 0) {
            return ;
        }
        NSString *keyboardtypeStr = [share getValueForKey:@"keyboardType"];
        if ([keyboardtypeStr isEqualToString:@"qwerty_english"] || [keyboardtypeStr isEqualToString:@"wright"] || [keyboardtypeStr isEqualToString:@"stroke"]) {
            //英文、手写、笔画没有拼音候选
            return;
        }
        if ([keyboardtypeStr isEqualToString:@"qwerty_pinyin"]) {
            //全键盘
            GZQwerty *qwerty = [GZQwerty defaultQwerty];
            [qwerty sendSelectedPinyinIndex:selectIndex andStr:text complation:^(NSString *compontText, NSArray *candiateArray, NSArray *compontArr) {
                dispatch_async(dispatch_get_main_queue(), ^{
                    if (compontText.length != 0) {
                        NSInteger end = [[GZQwerty defaultQwerty] getSelectedCompont];
                        [weakSelf.tabBar changeShowPinyin:compontText andRange:NSMakeRange(0, end)];
                    }
                    if (candiateArray.count != 0) {
                        [weakSelf.tabBar changeShowText:candiateArray];
                        [weakSelf.tabBarMore changeShowText:candiateArray];
                    }
                    if (compontArr.count != 0) {
                        [weakSelf.tabBarMore changeShowCompont:compontArr];
                    }else {
                        NSLog(@"最后一个拼音候选");
                        [weakSelf.tabBarMore setCompontViewLast:YES];
                    }
                });

            }];
        }
        else if ([keyboardtypeStr isEqualToString:@"squared"]) {
            //九宫格
            GZSquared *squared = [GZSquared defaultSquared];
            [squared sendSelectedPinyinIndex:selectIndex andStr:text complation:^(NSString *compontText, NSArray *candiateArray, NSArray *candiatePinyinArray) {
                if (compontText.length != 0) {
                    NSInteger end = [[GZSquared defaultSquared] getSelectedCompont];
                    [weakSelf.tabBar changeShowPinyin:compontText andRange:NSMakeRange(0, end)];
                }
                if (candiateArray.count != 0) {
                    [weakSelf.tabBar changeShowText:candiateArray];
                    [weakSelf.tabBarMore changeShowText:candiateArray];
                }
                if (candiatePinyinArray.count != 0) {
                    [weakSelf.squaredKeyboard changePinyinSelectButton:candiatePinyinArray];
                    [weakSelf.tabBarMore changeShowCompont:candiatePinyinArray];
                }else {
                    NSLog(@"最后一个拼音候选");
                    [weakSelf.squaredKeyboard removePinyinSelectButton];
                    [weakSelf.tabBarMore setCompontViewLast:YES];
                }
            }];
        }
    };

    _tabBarMore.sendSelectedFunc = ^(int funcType) {
        //1返回   2重输  3删除
        [weakSelf.tabBarMore setCompontViewLast:NO];

        if (funcType == 1) {
            NSLog(@"返回");
            [weakSelf.tabBar changeShowMoreButton:0];
            [weakSelf removeCadidateShowMoreView];
        }else if (funcType == 2) {
            //重输
            if (weakSelf.textKeyboard) {
                [weakSelf.textKeyboard changeKeyboardStatusToInput:NO];
                [weakSelf changeGlobleToInput:NO];
            }

            [weakSelf removeAllCadidateContent];
            [weakSelf removeCadidateShowMoreView];

            //区分键盘类别
            NSString *keyboardtypeStr = [share getValueForKey:@"keyboardType"];
            //手写
            if ([keyboardtypeStr isEqualToString:@"wright"]) {
                GZWright *getWright = [GZWright defaultWright];
                [getWright keyboardReset];
            }
            //全键盘 拼音
            if ([keyboardtypeStr isEqualToString:@"qwerty_pinyin"] || [keyboardtypeStr isEqualToString:@"qwerty_english"]) {
                GZQwerty *getdata = [GZQwerty defaultQwerty];
                [getdata keyboardReset];
            }
            //九宫格
            if ([keyboardtypeStr isEqualToString:@"squared"]) {
                GZSquared *getdata = [GZSquared defaultSquared];
                [getdata keyboardReset];
                [weakSelf.squaredKeyboard removePinyinSelectButton];
            }
            //笔画
            if ([keyboardtypeStr isEqualToString:@"stroke"]) {
                GZStroke *getdata = [GZStroke defaultStroke];
                [getdata keyboardReset];
            }
        }else if (funcType == 3) {
            //删除
        }else {

        }
    };

    _tabBarMore.sendDeleteTap = ^(BOOL isDelete) {

        [weakSelf.tabBarMore setCompontViewLast:NO];

        //区分键盘类别
        NSString *keyboardtypeStr = [share getValueForKey:@"keyboardType"];

        //手写
        if ([keyboardtypeStr isEqualToString:@"wright"]) {
            if (!isDelete) {
                return ;
            }
            if (weakSelf.tabBar && [weakSelf.tabBar isTabBarHasData]) {
                [weakSelf.tabBar deleteBackwardActionByNowCandidates:nil complation:^(BOOL isSucsess, BOOL isRemoveCandidateView) {
                    if (isSucsess && isRemoveCandidateView) {
                        GZWright *getWright = [GZWright defaultWright];

                        [weakSelf removeAllCadidateContent];
                        [getWright keyboardReset];
                        [weakSelf.tabBarMore stopTimer];
                        [weakSelf removeCadidateShowMoreView];
                    }
                }];
            }else {
                [weakSelf.tabBarMore stopTimer];
            }
        }

        //全键盘 英文
        if ([keyboardtypeStr isEqualToString:@"qwerty_english"]) {
            if (!isDelete) {
                return ;
            }
            if (weakSelf.tabBar && [weakSelf.tabBar isTabBarHasData]) {
                GZQwerty *getdata = [GZQwerty defaultQwerty];
                [getdata sendInput:0x08 complation:^(NSString *compontText, NSArray *candiateArray) {
                    dispatch_async(dispatch_get_main_queue(), ^{
                        if (candiateArray.count != 0) {
                            [weakSelf.tabBar changeShowText:candiateArray];
                            [weakSelf.tabBarMore changeShowText:candiateArray];
                        }
                        if (compontText.length != 0) {
                            [weakSelf.tabBar changeShowPinyin:compontText andRange:NSMakeRange(0, 0)];
                        }
                        if (compontText.length == 0 || candiateArray.count == 0) {
                            [weakSelf.textKeyboard changeKeyboardStatusToInput:NO];
                            [weakSelf changeGlobleToInput:NO];

                            [weakSelf removeAllCadidateContent];
                            [getdata keyboardReset];
                            [weakSelf removeCadidateShowMoreView];
                        }
                    });

                }];
            }
        }

        //笔画
        if ([keyboardtypeStr isEqualToString:@"stroke"]) {
            if (!isDelete) {
                return ;
            }
            if (weakSelf.tabBar && [weakSelf.tabBar isTabBarHasData]) {
                GZStroke *getdata = [GZStroke defaultStroke];
                [getdata sendInput:0x08 complation:^(NSString *compontText, NSArray *candiateArray) {
                    if (compontText.length != 0) {
                        [weakSelf.tabBar changeShowPinyin:compontText andRange:NSMakeRange(0, 0)];
                    }
                    if (candiateArray.count != 0) {
                        [weakSelf.tabBar changeShowText:candiateArray];
                        [weakSelf.tabBarMore changeShowText:candiateArray];
                    }
                    if (compontText.length == 0 || candiateArray.count == 0) {
                        [weakSelf removeAllCadidateContent];
                        [getdata keyboardReset];
                        [weakSelf removeCadidateShowMoreView];
                    }
                }];
            }
        }

        //全键盘 拼音
        if ([keyboardtypeStr isEqualToString:@"qwerty_pinyin"]) {
            if (!isDelete) {
                return ;
            }
            if (weakSelf.tabBar && [weakSelf.tabBar isTabBarHasData]) {
                GZQwerty *getdata = [GZQwerty defaultQwerty];
                [getdata sendPinyinCompontInput:0x08 complation:^(NSString *compontText, NSArray *candiateArray, NSArray *compontArr) {
                    dispatch_async(dispatch_get_main_queue(), ^{
                        if (compontText.length != 0) {
                            NSInteger end = [[GZQwerty defaultQwerty] getSelectedCompont];
                            [weakSelf.tabBar changeShowPinyin:compontText andRange:NSMakeRange(0, end)];
                        }
                        if (candiateArray.count != 0) {
                            [weakSelf.tabBar changeShowText:candiateArray];
                            [weakSelf.tabBarMore changeShowText:candiateArray];
                        }
                        if (compontArr.count != 0) {
                            [weakSelf.tabBarMore changeShowCompont:compontArr];
                        }else {
                            [weakSelf.textKeyboard changeKeyboardStatusToInput:NO];
                            [weakSelf changeGlobleToInput:NO];

                            [weakSelf removeAllCadidateContent];
                            [getdata keyboardReset];
                            [weakSelf removeCadidateShowMoreView];
                        }
                    });
                }];
            }
        }
        //九宫格
        if ([keyboardtypeStr isEqualToString:@"squared"]) {
            if (!isDelete) {
                return ;
            }
            GZSquared *getdata = [GZSquared defaultSquared];
            if (weakSelf.tabBar && [weakSelf.tabBar isTabBarHasData]) {
                [getdata sendInput:0x08 complation:^(NSString *compontText, NSArray *candiateArray, NSArray *candiatePinyinArray) {
                    if (candiateArray.count != 0) {
                        [weakSelf.tabBar changeShowText:candiateArray];
                        [weakSelf.tabBarMore changeShowText:candiateArray];
                    }
                    if (compontText.length != 0) {
                        NSInteger end = [[GZSquared defaultSquared] getSelectedCompont];
                        [weakSelf.tabBar changeShowPinyin:compontText andRange:NSMakeRange(0, end)];
                    }
                    if (candiatePinyinArray.count != 0) {
                        [weakSelf.squaredKeyboard changePinyinSelectButton:candiatePinyinArray];
                        [weakSelf.tabBarMore changeShowCompont:candiatePinyinArray];
                    }
                    if (compontText.length == 0 || candiateArray.count == 0) {
                        [getdata keyboardReset];
                        [weakSelf removeAllCadidateContent];
                        [weakSelf.squaredKeyboard removePinyinSelectButton];
                        [weakSelf removeCadidateShowMoreView];
                    }
                }];
            }
        }
    };
}

//设置功能
- (void)addSettingBpardView {

    if (!_settingBoard) {
        //        GZKeyboardSkin *skin = [GZKeyboardSkin defaultKeyboardSkin];

        CGFloat height = [self getKeyboardViewHeight];
        _settingBoard = [[GZSettingBoard alloc] initWithFrame:CGRectMake(0, navigaitonHeight, SCREEN_WIDTH, height)];
        _settingBoard.backgroundColor = Color_background_kb;
        [self.view addSubview:_settingBoard];
    }

    __weak KeyboardViewController *weakSelf = self;
    __weak GZUserDefaults *share = [GZUserDefaults shareUserDefaults];

    _settingBoard.sendSelectedFunc = ^(int funcType) {
        //1详细设置 2夜间模式 3常用短语 4联想输入 5声音 6模糊音 7纠错
        if (funcType == 1) {
            //详细设置
            NSString *urlString = @"HanvonInput://com.hanvon.HanvonInput.HomeView";
            UIResponder *responder = weakSelf;
            while ((responder = [responder nextResponder]) != nil) {
                if ([responder respondsToSelector:@selector(openURL:)] == YES) {
                    [responder performSelector:@selector(openURL:) withObject:[NSURL URLWithString:urlString]];
                }
            }
            [weakSelf removeAllCoreWorkplace];
            [weakSelf dismissKeyboard];
        }else if (funcType == 2) {
            //切换日间模式、夜间模式
            NSNumber *nightMode = [share getValueForKey:@"nightMode"]; //夜间模式 0日间模式 1夜间模式
            if ([nightMode isEqualToNumber:@1]) {
                weakSelf.view.backgroundColor = [UIColor blackColor];
                weakSelf.view.alpha = 0.5;
            }else {
                weakSelf.view.backgroundColor = [UIColor whiteColor];
                weakSelf.view.alpha = 1;
            }
            [weakSelf.settingBoard removeFromSuperview];
            weakSelf.settingBoard = nil;
        }else if (funcType == 3) {
            //快捷短语
            [weakSelf addUserPhrasesKeyboardView];
        }else if (funcType == 6) {
            //模糊音
            if (weakSelf.textKeyboard) {
                GZQwerty *qwert = [GZQwerty defaultQwerty];
                [qwert changeFuzzy];
            }
            if (weakSelf.squaredKeyboard) {
                GZSquared *squared = [GZSquared defaultSquared];
                [squared changeFuzzy];
            }
            [weakSelf.settingBoard removeFromSuperview];
            weakSelf.settingBoard = nil;
        }else if (funcType == 7) {
            //纠错
            if (weakSelf.textKeyboard) {
                GZQwerty *qwert = [GZQwerty defaultQwerty];
                [qwert changeRecovery];
            }
            if (weakSelf.squaredKeyboard) {
                GZSquared *squared = [GZSquared defaultSquared];
                [squared changeRecovery];
            }
            [weakSelf.settingBoard removeFromSuperview];
            weakSelf.settingBoard = nil;
        }else {
            //联想 声音
            [weakSelf.settingBoard removeFromSuperview];
            weakSelf.settingBoard = nil;
        }

        //导航高亮
        if (funcType != 1 && funcType != 3) {
            if (weakSelf.wrightKeyboard) {
                [weakSelf setNavigationSelectedIndex:3];
            }else {
                [weakSelf setNavigationSelectedIndex:2];
            }
        }
    };
}

//选择键盘
- (void)addSelectKeyboardView {
    if (!_selectBoard) {
        //        GZKeyboardSkin *skin = [GZKeyboardSkin defaultKeyboardSkin];
        CGFloat height = [self getKeyboardViewHeight];
        _selectBoard = [[GZKeyboardSelect alloc] initWithFrame:CGRectMake(0, navigaitonHeight, SCREEN_WIDTH, height)];
        _selectBoard.backgroundColor = Color_background_kb;
        [self.view addSubview:_selectBoard];
    }

    __weak KeyboardViewController *weakSelf = self;
    __weak GZUserDefaults *share = [GZUserDefaults shareUserDefaults];

    _selectBoard.sendSelectedFunc = ^(int funcType) {
        //功能按键返回 1手写键盘 2全键盘 3九键盘 4笔画键盘
        if (funcType == 1) {

            if (weakSelf.wrightKeyboard) {
                [weakSelf setNavigationSelectedIndex:3];
                [weakSelf.selectBoard removeFromSuperview];
                weakSelf.selectBoard = nil;
                return;
            }

            if (weakSelf.textKeyboard) {
                GZQwerty *getQwerty = [GZQwerty defaultQwerty];
                [getQwerty releaseWorkspace];
                [weakSelf.textKeyboard removeFromSuperview];
                weakSelf.textKeyboard = nil;
            }
            if (weakSelf.squaredKeyboard) {
                GZSquared *getSquared = [GZSquared defaultSquared];
                [getSquared releaseWorkspace];
                [weakSelf.squaredKeyboard removeFromSuperview];
                weakSelf.squaredKeyboard = nil;
            }
            if (weakSelf.strokeKeyboard) {
                GZStroke *getStroke = [GZStroke defaultStroke];
                [getStroke releaseWorkspace];
                [weakSelf.strokeKeyboard removeFromSuperview];
                weakSelf.strokeKeyboard = nil;;
            }
            [weakSelf setNavigationSelectedIndex:3];
            [share saveValue:@"wright" forKey:@"keyboardType"];
            [share saveValue:@"wright" forKey:@"lastKeyboard"];
            [weakSelf addWrightKeyboardViw];

        }else if (funcType == 2) {
            if (weakSelf.textKeyboard) {
                [weakSelf.selectBoard removeFromSuperview];
                weakSelf.selectBoard = nil;
                [weakSelf.textKeyboard changeKeyboardType:1];
                [share saveValue:@"qwerty_pinyin" forKey:@"keyboardType"];
                GZQwerty *getQwerty = [GZQwerty defaultQwerty];
                [getQwerty changeDictionary:0];
                return;
            }

            if (weakSelf.wrightKeyboard) {
                [[NSNotificationCenter defaultCenter] removeObserver:weakSelf name:@"notificationTellTimeOut" object:nil];
                GZWright *getWright = [GZWright defaultWright];
                [getWright releaseWorkspace]; //空间销毁
                [getWright releaseWorksplace_predict:NO];
                [weakSelf.wrightKeyboard removeFromSuperview];
                weakSelf.wrightKeyboard = nil;
            }
            if (weakSelf.squaredKeyboard) {
                GZSquared *getSquared = [GZSquared defaultSquared];
                [getSquared releaseShare];
                [weakSelf.squaredKeyboard removeFromSuperview];
                weakSelf.squaredKeyboard = nil;
            }
            if (weakSelf.strokeKeyboard) {
                GZStroke *getStroke = [GZStroke defaultStroke];
                [getStroke releaseShare];
                [weakSelf.strokeKeyboard removeFromSuperview];
                weakSelf.strokeKeyboard = nil;;
            }
            [share saveValue:@"qwerty_pinyin" forKey:@"keyboardType"];
            [share saveValue:@"qwerty_pinyin" forKey:@"lastKeyboard"];
            [weakSelf addQwertyKeyboardView:1];

        }else if (funcType == 3) {
            if (weakSelf.squaredKeyboard) {
                [weakSelf.selectBoard removeFromSuperview];
                weakSelf.selectBoard = nil;
                return;
            }
            if (weakSelf.wrightKeyboard) {
                [[NSNotificationCenter defaultCenter] removeObserver:weakSelf name:@"notificationTellTimeOut" object:nil];
                GZWright *getWright = [GZWright defaultWright];
                [getWright releaseWorkspace]; //空间销毁
                [getWright releaseWorksplace_predict:NO];
                [weakSelf.wrightKeyboard removeFromSuperview];
                weakSelf.wrightKeyboard = nil;
            }
            if (weakSelf.textKeyboard) {
                GZQwerty *getQwerty = [GZQwerty defaultQwerty];
                [getQwerty releaseShare];
                [weakSelf.textKeyboard removeFromSuperview];
                weakSelf.textKeyboard = nil;
            }
            if (weakSelf.strokeKeyboard) {
                GZStroke *getStroke = [GZStroke defaultStroke];
                [getStroke releaseShare];
                [weakSelf.strokeKeyboard removeFromSuperview];
                weakSelf.strokeKeyboard = nil;;
            }
            [share saveValue:@"squared" forKey:@"keyboardType"];
            [share saveValue:@"squared" forKey:@"lastKeyboard"];
            [weakSelf addSquaredKeyboardView];

        }else if (funcType == 4) {
            if (weakSelf.strokeKeyboard) {
                [weakSelf.selectBoard removeFromSuperview];
                weakSelf.selectBoard = nil;
                return;
            }
            if (weakSelf.wrightKeyboard) {
                [[NSNotificationCenter defaultCenter] removeObserver:weakSelf name:@"notificationTellTimeOut" object:nil];
                GZWright *getWright = [GZWright defaultWright];
                [getWright releaseWorkspace]; //空间销毁
                [getWright releaseWorksplace_predict:NO];
                [weakSelf.wrightKeyboard removeFromSuperview];
                weakSelf.wrightKeyboard = nil;
            }
            if (weakSelf.textKeyboard) {
                GZQwerty *getQwerty = [GZQwerty defaultQwerty];
                [getQwerty releaseShare];
                [weakSelf.textKeyboard removeFromSuperview];
                weakSelf.textKeyboard = nil;
            }
            if (weakSelf.squaredKeyboard) {
                GZSquared *getSquare = [GZSquared defaultSquared];
                [getSquare releaseShare];
                [weakSelf.squaredKeyboard removeFromSuperview];
                weakSelf.squaredKeyboard = nil;
            }
            [share saveValue:@"stroke" forKey:@"keyboardType"];
            [share saveValue:@"stroke" forKey:@"lastKeyboard"];
            [weakSelf addStrokeKeyboardView];

        }else {

        }

        [weakSelf.selectBoard removeFromSuperview];
        weakSelf.selectBoard = nil;
    };
}

//全键盘
- (void)addQwertyKeyboardView:(int)type {
    //1中文 2英文
    __weak GZUserDefaults *share = [GZUserDefaults shareUserDefaults];

    NSString *keyboardStr = [share getValueForKey:@"keyboardType"];
    if (![keyboardStr isEqualToString:@"qwerty_english"] && ![keyboardStr isEqualToString:@"qwerty_pinyin"]) {
        return;
    }

    CGFloat height = [self getKeyboardViewHeight];

    //NSString * skin = [share getGroupValueForKey:@"keyboardSkin"];
    if (!_textKeyboard) {
        _textKeyboard = [[GZQwertyKeyboard alloc] initWithFrame:CGRectMake(0, navigaitonHeight, SCREEN_WIDTH, height) andKeyboardType:type];
        //[_textKeyboard setViewStyleWithSkin:skin];
        _textKeyboard.backgroundColor = Color_background_kb;
        [self.view addSubview:_textKeyboard];

        [self changeTheGlobeFrameUnderKeyboard:2 withScreenDirection:height]; //小地球
    }

    __weak KeyboardViewController *weakSelf = self;

    __weak GZQwerty *getdata = [GZQwerty defaultQwerty]; //初始化全键盘 只初始化空间
    //初始化中英模式、模糊音等
    if ([keyboardStr isEqualToString:@"qwerty_english"] && type == 2) {
        NSLog(@"初始化英文模式");
        [getdata changeDictionary:1];
    }else {
        NSLog(@"初始化中文模式");
        [getdata changeDictionary:0];
    }

    //文本按键
    _textKeyboard.sendSelectedStr = ^(NSString *text) {
        if ([text isEqualToString:@"'"] && ![weakSelf.tabBar isTabBarHasData]) {
            //没有输入内容 只点击分隔符
            text = nil;
            return;
        }
        if (!weakSelf.tabBar) {
            [weakSelf addCandidateBarView];
        }

        [weakSelf.textKeyboard changeKeyboardStatusToInput:YES];
        [weakSelf changeGlobleToInput:YES];

        int asciiCode;
        if ([[share getValueForKey:@"keyboardType"] isEqualToString:@"qwerty_english"]) {
            asciiCode = [text characterAtIndex:0];
        }else {
            if ([text isEqualToString:@"'"]) {
                asciiCode = [text characterAtIndex:0];
            }else {
                asciiCode = [text characterAtIndex:0] + 32; //a97 A65
            }
        }
        text = nil;

        //候选结果
        [getdata sendInput:asciiCode complation:^(NSString *compontText, NSArray *candiateArray) {
            dispatch_async(dispatch_get_main_queue(), ^{
                if (candiateArray.count != 0) {
                    [weakSelf.tabBar changeShowText:candiateArray];
                }
                if (compontText.length != 0) {
                    [weakSelf.tabBar changeShowPinyin:compontText andRange:NSMakeRange(0, 0)];
                }
                //1添加删除 0移除删除并移除tabbar
                [weakSelf changeTabbarShowMoreButton];
            });
            compontText = nil;
            candiateArray = nil;
        }];
    };

    //功能按钮  删除按钮
    _textKeyboard.sendDeleteTap = ^(BOOL isDelete) {
        if (isDelete) {
            if (weakSelf.tabBar && [weakSelf.tabBar isTabBarHasData]) {
                [getdata sendInput:0x08 complation:^(NSString *compontText, NSArray *candiateArray) {
                    dispatch_async(dispatch_get_main_queue(), ^{
                        if (candiateArray.count != 0) {
                            [weakSelf.tabBar changeShowText:candiateArray];
                        }
                        if (compontText.length != 0) {
                            NSString *keyboardtypeStr = [share getValueForKey:@"keyboardType"];
                            if ([keyboardtypeStr isEqualToString:@"qwerty_pinyin"]) { //qwerty_english
                                NSInteger end = [[GZQwerty defaultQwerty] getSelectedCompont];
                                [weakSelf.tabBar changeShowPinyin:compontText andRange:NSMakeRange(0, end)];
                            }else {
                                [weakSelf.tabBar changeShowPinyin:compontText andRange:NSMakeRange(0, 0)];
                            }

                        }
                        if (compontText.length == 0 || candiateArray.count == 0) {
                            [getdata keyboardReset];
                            [weakSelf removeAllCadidateContent];
                            [weakSelf.textKeyboard changeKeyboardStatusToInput:NO];
                            [weakSelf changeGlobleToInput:NO];
                        }
                    });
                }];

            }else {
                [weakSelf.textDocumentProxy deleteBackward];
                [weakSelf.textKeyboard changeKeyboardStatusToInput:NO];
                [weakSelf changeGlobleToInput:NO];
            }
        }else {
            [weakSelf.textKeyboard stopTimer];
        }
        return ;
    };

    //功能按键
    _textKeyboard.sendSelectedFunc = ^(int funcType) {
        if (funcType > 0 && funcType) {
            //1分隔 2删除 3符号 4下一个输入法 5数字  6空格 7中英切换 8回车 10逗号 11点号
            switch (funcType) {
                case 1:{
                    NSLog(@"分隔符");
                    //分隔符不作处理 特殊情况 直接在文本中
                    break;
                }
                case 2:{
                    NSLog(@"删除");
                    //删除按钮的调用属于特殊 有长按操作 不在这个方法中返回
                    break;
                }
                case 3:{
                    NSLog(@"符号");
                    BOOL isHavePinyin = [weakSelf.tabBar isTabBarHasPinyin];
                    if (isHavePinyin) {
                        NSString *candidateStr = [weakSelf.tabBar getFirstCandidate];
                        [weakSelf.textDocumentProxy insertText:candidateStr];
                    }
                    [weakSelf.textKeyboard changeKeyboardStatusToInput:NO];
                    [weakSelf changeGlobleToInput:NO];

                    [getdata keyboardReset];
                    [weakSelf removeAllCadidateContent];
                    [weakSelf addSymbollKeyboardView];
                    break;
                }
                case 4:{
                    NSLog(@"下一个输入法");
                    BOOL isHavePinyin = [weakSelf.tabBar isTabBarHasPinyin];
                    if (isHavePinyin) {
                        NSString *candidateStr = [weakSelf.tabBar getFirstCandidate];
                        [weakSelf.textDocumentProxy insertText:candidateStr];
                    }
                    [weakSelf removeAllCoreWorkplace];
                    [weakSelf advanceToNextInputMode];
                    break;
                }
                case 5:{
                    NSLog(@"数字");
                    [getdata keyboardReset];
                    [weakSelf removeAllCadidateContent];
                    [weakSelf addNumberKeyboardView];
                    break;
                }
                case 6:{
                    NSLog(@"空格");
                    NSString *inserStr;
                    BOOL isHavePinyin = [weakSelf.tabBar isTabBarHasPinyin];
                    if (isHavePinyin) {
                        NSString *candidateStr = [weakSelf.tabBar getFirstCandidate];
                        if (candidateStr.length != 0 && candidateStr != nil) {
                            [weakSelf clickTabbarIndex:0 byText:candidateStr];
                            [weakSelf.textKeyboard changeKeyboardStatusToInput:NO];
                            [weakSelf changeGlobleToInput:NO];
                            return ;
                        }else {
                            inserStr = [NSString stringWithFormat:@" "];
                        }
                    }else {
                        inserStr = [NSString stringWithFormat:@" "];
                    }
                    [weakSelf.textDocumentProxy insertText:inserStr];

                    [weakSelf.textKeyboard changeKeyboardStatusToInput:NO];
                    [weakSelf changeGlobleToInput:NO];

                    [weakSelf removeAllCadidateContent];
                    [getdata keyboardReset];
                    break;
                }
                case 7:{
                    NSLog(@"中英切换");
                    [getdata keyboardReset];
                    NSString *lastKeyboard = [share getValueForKey:@"lastKeyboard"];

                    if ([lastKeyboard isEqualToString:@"qwerty_pinyin"]) {
                        //上次使用键盘是全键盘

                        NSString *keyboardtypeStr = [share getValueForKey:@"keyboardType"];
                        [weakSelf setNavigationSelectedIndex:2];

                        if ([keyboardtypeStr isEqualToString:@"qwerty_pinyin"]) {
                            //上次是中文
                            [weakSelf.textKeyboard changeKeyboardType:2];
                            [share saveValue:@"qwerty_english" forKey:@"keyboardType"];
                            [getdata changeDictionary:1];
                        }else {
                            //上次是英文
                            [weakSelf.textKeyboard changeKeyboardType:1];
                            [share saveValue:@"qwerty_pinyin" forKey:@"keyboardType"];
                            [getdata changeDictionary:0];
                        }

                    }else if ([lastKeyboard isEqualToString:@"wright"]) {
                        //上次使用键盘是手写

                        [weakSelf.textKeyboard removeFromSuperview];
                        weakSelf.textKeyboard = nil;
                        [getdata releaseWorkspace];

                        [weakSelf setNavigationSelectedIndex:3];
                        [share saveValue:@"wright" forKey:@"keyboardType"];
                        [weakSelf addWrightKeyboardViw];

                    }else if ([lastKeyboard isEqualToString:@"squared"]) {
                        //上次使用键盘是九键

                        [weakSelf.textKeyboard removeFromSuperview];
                        weakSelf.textKeyboard = nil;
                        [getdata releaseShare];

                        [weakSelf setNavigationSelectedIndex:2];
                        [share saveValue:@"squared" forKey:@"keyboardType"];
                        [weakSelf addSquaredKeyboardView];

                    }else if ([lastKeyboard isEqualToString:@"stroke"]) {
                        //上次使用键盘是笔画
                        [getdata releaseShare];
                        [weakSelf.textKeyboard removeFromSuperview];
                        weakSelf.textKeyboard = nil;

                        [weakSelf setNavigationSelectedIndex:2];
                        [share saveValue:@"stroke" forKey:@"keyboardType"];
                        [weakSelf addStrokeKeyboardView];

                    }else {}

                    if (weakSelf.tabBar) {
                        [weakSelf.tabBar removeFromSuperview];
                        weakSelf.tabBar = nil;
                    }
                    break;
                }
                case 8:{
                    NSLog(@"回车");
                    NSString *compontText = [weakSelf.tabBar getPinyin];
                    if (compontText.length != 0 && compontText != nil) {
                        [weakSelf.textDocumentProxy insertText:compontText];
                    }else {
                        [weakSelf.textDocumentProxy insertText:@"\n"];
                    }

                    [weakSelf.textKeyboard changeKeyboardStatusToInput:NO];
                    [weakSelf changeGlobleToInput:NO];

                    [weakSelf removeAllCadidateContent];
                    [getdata keyboardReset];
                    break;
                }
                case 10: {
                    NSString *candidateStr = [weakSelf.tabBar getFirstCandidate];
                    NSString *inserStr;
                    if (candidateStr.length != 0 && candidateStr) {
                        inserStr = [NSString stringWithFormat:@"%@，",candidateStr];
                    }else {
                        inserStr = @"，";
                    }
                    [weakSelf.textDocumentProxy insertText:inserStr];
                    [weakSelf removeAllCadidateContent];
                    [getdata keyboardReset];
                    [weakSelf.textKeyboard changeKeyboardStatusToInput:NO];
                    [weakSelf changeGlobleToInput:NO];
                    candidateStr = nil;
                    inserStr = nil;
                    break;
                }
                case 11: {
                    NSString *candidateStr = [weakSelf.tabBar getFirstCandidate];
                    NSString *inserStr;
                    if (candidateStr.length != 0 && candidateStr) {
                        inserStr = [NSString stringWithFormat:@"%@.",candidateStr];
                    }else {
                        inserStr = @".";
                    }
                    [weakSelf.textDocumentProxy insertText:inserStr];
                    [weakSelf removeAllCadidateContent];
                    [getdata keyboardReset];
                    [weakSelf.textKeyboard changeKeyboardStatusToInput:NO];
                    [weakSelf changeGlobleToInput:NO];
                    candidateStr = nil;
                    inserStr = nil;
                    break;
                }
                default:
                    break;
            }
        }
        return;
    };
}

//手写键盘
- (void)addWrightKeyboardViw {
    _wrightNum = 0;
    __weak GZUserDefaults *share = [GZUserDefaults shareUserDefaults];

    NSString *keyboardStr = [share getValueForKey:@"keyboardType"];
    if (![keyboardStr isEqualToString:@"wright"]) {
        return;
    }

    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(notificationTellTimeOut:) name:@"notificationTellTimeOut" object:nil];

    CGFloat height = [self getKeyboardViewHeight];

    //NSString * skin = [share getGroupValueForKey:@"keyboardSkin"];
    if (!_wrightKeyboard) {
        int wrightMode = [self setWrightModeWithKeyboardHeight:height];
        _wrightKeyboard = [[GZWrightKeyboard alloc] initWithFrame:CGRectMake(0, navigaitonHeight, SCREEN_WIDTH, height) withWrightMode:wrightMode andSuperView:self.view];
        //[_wrightKeyboard setViewStyleWithSkin:skin];
        _wrightKeyboard.backgroundColor = Color_background_kb;
        [self.view addSubview:_wrightKeyboard];

        [self changeTheGlobeFrameUnderKeyboard:1 withScreenDirection:height]; //小地球
    }

    //设置手写的识别方式
    [self setWrightRecgnizeModeWithKeyboardHeight:height];

    __weak KeyboardViewController *weakSelf = self;
    __weak GZWright *getWright = [GZWright defaultWright];

    //手写回调
    _wrightKeyboard.sendWrightPoint = ^(NSInteger status, CGPoint point, short x, short y) {

        weakSelf.isWrightPreciate = NO; //手写不是联想状态

        if (status == 0) {
            //取消输入 重置键盘
            [getWright keyboardReset];
            [weakSelf.wrightKeyboard removeTraces];
            [weakSelf removeAllCadidateContent];
        }else if (status == 1) {
            //
            if (weakSelf.isWrightTimeout && weakSelf.wrightNum > 0){//} && weakSelf.wrightFirst) {
                //[weakSelf.textDocumentProxy insertText:weakSelf.wrightFirst];
                weakSelf.wrightNum = 0;
                [weakSelf.tabBar changeShowText:nil];
                //                weakSelf.wrightFirst = nil;
            }

            [getWright addPointX:(short)point.x Y:(short)point.y complation:nil];

        }else if (status == 2){
            //status == 2 笔迹两次调用 第二次获取候选
            //[getWright addPointX:(short)point.x Y:(short)point.y complation:nil];

            [weakSelf.wrightKeyboard removeTracesAfter]; //过会 清理笔迹

            [getWright addPointX:x Y:y complation:^(NSArray *candiateArray) {
                if (candiateArray && candiateArray.count != 0) {
                    if (!weakSelf.tabBar) {
                        [weakSelf addCandidateBarView];
                    }
                    [weakSelf.tabBar changeShowText:candiateArray];
                    if (weakSelf.wrightNum > 0) {
                        for (int i=0; i<weakSelf.wrightNum; i++) {
                            [weakSelf.textDocumentProxy deleteBackward];
                        }
                        weakSelf.wrightNum = 0;
                    }
                    [weakSelf.textDocumentProxy insertText:candiateArray[0]];
                    weakSelf.wrightNum = (int)[candiateArray[0] length];
                }else{
                    [weakSelf.tabBar removeFromSuperview];
                    weakSelf.tabBar = nil;
                }
                //1添加删除 0移除删除并移除tabbar
                //[weakSelf changeTabbarShowMoreButton];
                [weakSelf.tabBar changeShowMoreToDelete:NO];
            }];

            NSLog(@"====开启====");
            [getWright startTime];
            weakSelf.isWrightTimeout = NO;
            //            weakSelf.wrightFirst = nil;
        }
    };
    //按键回调
    _wrightKeyboard.sendSelectedFunc = ^(int type) {
        NSLog(@"%d",type);
        //1逗号，2空格，3中英，4next 5删除 6符号 7数字 8回车
        //1符号，2数字，3中英，4next 5删除 6逗号 7回车 8句号 9空格
        //        weakSelf.wrightFirst = nil;
        if (type == 1) {
            NSLog(@"符号");
            [getWright keyboardReset];
            [weakSelf addSymbollKeyboardView];
        }else if (type == 2) {
            NSLog(@"数字");
            [getWright keyboardReset];
            [weakSelf addNumberKeyboardView];
        }else if (type == 3) {
            NSLog(@"中英切换");
            //导航的选择状态
            [weakSelf setNavigationSelectedIndex:2];
            [getWright releaseWorkspace];
            [getWright releaseWorksplace_predict:NO];

            [share saveValue:@"qwerty_english" forKey:@"keyboardType"];
            [weakSelf addQwertyKeyboardView:2];

            [[NSNotificationCenter defaultCenter] removeObserver:weakSelf name:@"notificationTellTimeOut" object:nil];

            [weakSelf.wrightKeyboard removeFromSuperview];
            weakSelf.wrightKeyboard = nil;
            if (weakSelf.tabBar) {
                [weakSelf.tabBar removeFromSuperview];
                weakSelf.tabBar = nil;
            }

        }else if (type == 4) {
            NSLog(@"next");
            [weakSelf removeAllCoreWorkplace];
            [weakSelf advanceToNextInputMode];
        }else if (type == 5) {
            //删除
            //因为涉及连续删除，删除功能单独回调
        }else if (type == 6) {
            NSLog(@"逗号");
            [getWright keyboardReset];
            [weakSelf.textDocumentProxy insertText:@"，"];

        }else if (type == 7) {
            NSLog(@"回车");
            [getWright keyboardReset];
            [weakSelf.textDocumentProxy insertText:@"\n"];

        }else if (type == 8) {
            NSLog(@"句号");
            [getWright keyboardReset];
            [weakSelf.textDocumentProxy insertText:@"。"];

        }else if (type == 9) {
            NSLog(@"空格");
            [getWright keyboardReset];
            [weakSelf.textDocumentProxy insertText:@" "];

        }
        else {
            return ;
        }

        [weakSelf removeAllCadidateContent];

    };
    //功能按钮  删除按钮
    _wrightKeyboard.sendDeleteTap = ^(BOOL isDelete) {
        if (isDelete) {
            if (weakSelf.tabBar && [weakSelf.tabBar isTabBarHasData]) {
                if (!weakSelf.isWrightPreciate) {
                    [weakSelf.tabBar deleteBackwardActionByNowCandidates:nil complation:^(BOOL isSucsess, BOOL isRemoveCandidateView) {
                        if (isSucsess && isRemoveCandidateView) {
                            [weakSelf removeAllCadidateContent];
                            [getWright keyboardReset];
                            //                            weakSelf.wrightFirst = nil;
                            if (weakSelf.wrightNum > 0) {
                                for (int i=0; i<weakSelf.wrightNum; i++) {
                                    [weakSelf.textDocumentProxy deleteBackward];
                                }
                            }
                        }
                        if (!isRemoveCandidateView) {
                            //                            weakSelf.wrightFirst = [weakSelf.wrightFirst substringToIndex:[weakSelf.wrightFirst length]-1];
                            if (weakSelf.wrightNum != 0) {
                                weakSelf.wrightNum--;
                                [weakSelf.textDocumentProxy deleteBackward];
                            }
                        }
                    }];
                }else {
                    [weakSelf removeAllCadidateContent];
                    [getWright keyboardReset];
                    //                    weakSelf.wrightFirst = nil;

                    [weakSelf.tabBar removeFromSuperview];
                    weakSelf.tabBar = nil;
                }

            }else {
                [weakSelf.textDocumentProxy deleteBackward];
            }
        }else {
            [weakSelf.wrightKeyboard stopTimer];
        }
    };

}

//九宫格
- (void)addSquaredKeyboardView {
    __weak GZUserDefaults *share = [GZUserDefaults shareUserDefaults];
    NSString *keyboardStr = [share getValueForKey:@"keyboardType"];
    if (![keyboardStr isEqualToString:@"squared"]) {
        return;
    }

    CGFloat height = [self getKeyboardViewHeight];

    //NSString * skin = [share getGroupValueForKey:@"keyboardSkin"];
    if (!_squaredKeyboard) {
        _squaredKeyboard = [[GZSquaredKeyboard alloc] initWithFrame:CGRectMake(0, navigaitonHeight, SCREEN_WIDTH, height)];
        //[_squaredKeyboard setViewStyleWithSkin:skin];
        _squaredKeyboard.backgroundColor = Color_background_kb;
        [self.view addSubview:_squaredKeyboard];

        [self changeTheGlobeFrameUnderKeyboard:3 withScreenDirection:height]; //小地球
    }

    __weak KeyboardViewController *weakSelf = self;
    __weak GZSquared *getSquared = [GZSquared defaultSquared];

    //文本按键返回 1分词 2-9
    _squaredKeyboard.sendSelectedStr = ^(int text) {
        NSLog(@"%d",text);

        if (text == 1 && ![weakSelf.tabBar isTabBarHasData]) {
            //没有输入内容 只点击分隔符
            return;
        }
        if (!weakSelf.tabBar) {
            [weakSelf addCandidateBarView];
        }

        NSString *te;
        if (text == 1) {
            te = [NSString stringWithFormat:@"'"];
        }else {
            te = [NSString stringWithFormat:@"%d",text];
        }
        int asciiCode = [te characterAtIndex:0];

        //候选结果
        [getSquared sendInput:asciiCode complation:^(NSString *compontText, NSArray *candiateArray, NSArray *candiatePinyinArray) {
            if (candiateArray.count != 0) {
                [weakSelf.tabBar changeShowText:candiateArray];
            }
            if (compontText.length != 0) {
                NSInteger end = [[GZSquared defaultSquared] getSelectedCompont];
                [weakSelf.tabBar changeShowPinyin:compontText andRange:NSMakeRange(0, end)];
            }

            if (candiatePinyinArray.count != 0) {
                [weakSelf.squaredKeyboard changePinyinSelectButton:candiatePinyinArray];
            }

            //1添加删除 0移除删除并移除tabbar
            [weakSelf changeTabbarShowMoreButton];
        }];

    };

    //功能按键返回 2清空 3符号 4下一个输入法 5数字 6中英切换 7回车
    _squaredKeyboard.sendSelectedFunc = ^(int funcType) {
        NSLog(@"%d",funcType);
        if (funcType == 0 && ![weakSelf.tabBar isTabBarHasData]) {
            //没有输入内容 只点击分隔符
            return;
        }

        switch (funcType) {
            case 2:{
                NSLog(@"清空");
                [getSquared keyboardReset];
                [weakSelf.squaredKeyboard removePinyinSelectButton];
                [weakSelf removeAllCadidateContent];
                break;
            }
            case 3:{
                NSLog(@"符号");
                BOOL isHavePinyin = [weakSelf.tabBar isTabBarHasPinyin];
                if (isHavePinyin) {
                    NSString *candidateStr = [weakSelf.tabBar getFirstCandidate];
                    [weakSelf.textDocumentProxy insertText:candidateStr];
                }
                [getSquared keyboardReset];
                [weakSelf.squaredKeyboard removePinyinSelectButton];
                [weakSelf removeAllCadidateContent];
                [weakSelf addSymbollKeyboardView];
                break;
            }
            case 4:{
                NSLog(@"下一个输入法");
                [weakSelf removeAllCoreWorkplace];
                [weakSelf advanceToNextInputMode];
                break;
            }
            case 5:{
                NSLog(@"数字");
                BOOL isHavePinyin = [weakSelf.tabBar isTabBarHasPinyin];
                if (isHavePinyin) {
                    NSString *candidateStr = [weakSelf.tabBar getFirstCandidate];
                    [weakSelf.textDocumentProxy insertText:candidateStr];
                }
                [getSquared keyboardReset];
                [weakSelf.squaredKeyboard removePinyinSelectButton];
                [weakSelf removeAllCadidateContent];
                [weakSelf addNumberKeyboardView];
                break;
            }
            case 6:{
                NSLog(@"中英切换");
                BOOL isHavePinyin = [weakSelf.tabBar isTabBarHasPinyin];
                if (isHavePinyin) {
                    NSString *candidateStr = [weakSelf.tabBar getFirstCandidate];
                    [weakSelf.textDocumentProxy insertText:candidateStr];
                }
                [getSquared releaseShare];

                [share saveValue:@"qwerty_english" forKey:@"keyboardType"];
                [weakSelf addQwertyKeyboardView:2];

                [weakSelf.squaredKeyboard removeFromSuperview];
                weakSelf.squaredKeyboard = nil;
                if (weakSelf.tabBar) {
                    [weakSelf.tabBar removeFromSuperview];
                    weakSelf.tabBar = nil;
                }
                break;
            }
            case 7:{
                NSLog(@"回车");
                NSString *candidateStr = [weakSelf.tabBar getFirstCandidate];
                if (candidateStr.length != 0 && candidateStr != nil) {
                    NSString *compontText = [weakSelf.tabBar getPinyin];
                    if (compontText.length != 0 && compontText != nil) {
                        [weakSelf.textDocumentProxy insertText:compontText];
                    }else {
                        [weakSelf.textDocumentProxy insertText:@"\n"];
                    }
                }else {
                    [weakSelf.textDocumentProxy insertText:@"\n"];
                }

                [weakSelf removeAllCadidateContent];
                [weakSelf.squaredKeyboard removePinyinSelectButton];
                [getSquared keyboardReset];
                break;
            }

            default:
                break;
        }
    };

    //文本符号按键返回
    _squaredKeyboard.sendSelectedSymbol = ^(NSString *text) {
        NSLog(@"%@",text);
        BOOL isHavePinyin = [weakSelf.tabBar isTabBarHasPinyin];
        if (isHavePinyin) {
            NSString *candidateStr = [weakSelf.tabBar getFirstCandidate];
            NSString *inserStr;
            if (candidateStr.length != 0 && candidateStr != nil) {
                if ([text isEqualToString:@" "]) {
                    [weakSelf clickTabbarIndex:0 byText:candidateStr];
                    return ;
                }else {
                    inserStr = [NSString stringWithFormat:@"%@%@",candidateStr,text];
                }
            }else {
                inserStr = text;
            }
            [weakSelf.textDocumentProxy insertText:inserStr];
        }else {
            NSString *inserStr = [NSString stringWithFormat:@"%@",text];
            [weakSelf.textDocumentProxy insertText:inserStr];
        }

        [weakSelf removeAllCadidateContent];
        [weakSelf.squaredKeyboard removePinyinSelectButton];
        [getSquared keyboardReset];
    };

    //拼音候选按键返回
    _squaredKeyboard.sendSelectedPinyin = ^(int tag, NSString *text) {
        NSLog(@"%@",text);
        if (text.length != 0) {
            [getSquared sendSelectedPinyinIndex:tag andStr:text complation:^(NSString *compontText, NSArray *candiateArray, NSArray *candiatePinyinArray) {
                if (candiateArray.count != 0) {
                    [weakSelf.tabBar changeShowText:candiateArray];
                }
                if (compontText.length != 0) {
                    NSInteger end = [[GZSquared defaultSquared] getSelectedCompont];
                    [weakSelf.tabBar changeShowPinyin:compontText andRange:NSMakeRange(0, end)];
                }
                if (compontText.length == 0 || candiateArray.count == 0) {
                    [getSquared keyboardReset];
                    [weakSelf removeAllCadidateContent];
                    [weakSelf.squaredKeyboard removePinyinSelectButton];
                }
                if (candiatePinyinArray.count != 0 && candiatePinyinArray != nil) {
                    [weakSelf.squaredKeyboard changePinyinSelectButton:candiatePinyinArray];
                }else {
                    [weakSelf.squaredKeyboard removePinyinSelectButton];
                }
            }];
        }
    };

    //删除功能键 返回 删除功能不在sendSelectedFunc中返回功能
    _squaredKeyboard.sendDeleteTap = ^(BOOL isDelete) {
        //NSLog(@"%d",isDelete);
        if (isDelete) {
            if (weakSelf.tabBar && [weakSelf.tabBar isTabBarHasData]) {
                [getSquared sendInput:0x08 complation:^(NSString *compontText, NSArray *candiateArray, NSArray *candiatePinyinArray) {
                    if (candiateArray.count != 0) {
                        [weakSelf.tabBar changeShowText:candiateArray];
                    }
                    if (compontText.length != 0) {
                        NSInteger end = [[GZSquared defaultSquared] getSelectedCompont];
                        [weakSelf.tabBar changeShowPinyin:compontText andRange:NSMakeRange(0, end)];
                    }
                    if (candiatePinyinArray.count != 0) {
                        [weakSelf.squaredKeyboard changePinyinSelectButton:candiatePinyinArray];
                    }
                    if (compontText.length == 0 || candiateArray.count == 0) {
                        [getSquared keyboardReset];
                        [weakSelf removeAllCadidateContent];
                        [weakSelf.squaredKeyboard removePinyinSelectButton];
                    }
                }];

            }else {
                [weakSelf.textDocumentProxy deleteBackward];
            }
        }else {
            [weakSelf.squaredKeyboard stopTimer];
        }
    };
}

//笔画
- (void)addStrokeKeyboardView {
    __weak GZUserDefaults *share = [GZUserDefaults shareUserDefaults];
    NSString *keyboardStr = [share getValueForKey:@"keyboardType"];
    if (![keyboardStr isEqualToString:@"stroke"]) {
        return;
    }

    CGFloat height = [self getKeyboardViewHeight];

    //NSString * skin = [share getGroupValueForKey:@"keyboardSkin"];
    if (!_strokeKeyboard) {
        _strokeKeyboard = [[GZStrokeKeyboard alloc] initWithFrame:CGRectMake(0, navigaitonHeight, SCREEN_WIDTH, height)];
        //[_strokeKeyboard setViewStyleWithSkin:skin];
        _strokeKeyboard.backgroundColor = Color_background_kb;
        [self.view addSubview:_strokeKeyboard];

        [self changeTheGlobeFrameUnderKeyboard:4 withScreenDirection:height]; //小地球
    }

    __weak KeyboardViewController *weakSelf = self;
    __weak GZStroke *getStroke = [GZStroke defaultStroke]; //区分键盘类型 1全键盘 2九宫格

    //文本按键返回  1一  2丨  3丿   4乀   5乛   6通配   7分词
    _strokeKeyboard.sendSelectedStr = ^(int text) {
        NSLog(@"%d",text);

        if ((text == 7) && ![weakSelf.tabBar isTabBarHasData]) {
            //没有输入内容 只点击分隔符
            return;
        }
        if (!weakSelf.tabBar) {
            [weakSelf addCandidateBarView];
        }

        NSString *te;
        int asciiCode;
        switch (text) {
            case 1:
                asciiCode = 0x4e00; //一
                break;
            case 2:
                asciiCode = 0x4e28; //丨
                break;
            case 3:
                asciiCode = 0x4e3f; //丿
                break;
            case 4:
                asciiCode = 0x4e36; //乀
                break;
            case 5:
                asciiCode = 0x4e5b; //乛
                break;
            case 6:{
                te = [NSString stringWithFormat:@"*"];
                asciiCode = [te characterAtIndex:0];
                break;
            }
            case 7:{
                te = [NSString stringWithFormat:@"'"];
                asciiCode = [te characterAtIndex:0];
                break;
            }
            default:
                asciiCode = -1;
                break;
        }

        //NSLog(@"%d",asciiCode);

        //候选结果
        [getStroke sendInput:asciiCode complation:^(NSString *compontText, NSArray *candiateArray) {
            if (candiateArray.count != 0) {
                [weakSelf.tabBar changeShowText:candiateArray];
            }
            if (compontText.length != 0) {
                [weakSelf.tabBar changeShowPinyin:compontText andRange:NSMakeRange(0, 0)];
            }

            //1添加删除 0移除删除并移除tabbar
            [weakSelf changeTabbarShowMoreButton];
        }];

    };

    //功能按键返回 2清空 3符号 4下一个输入法 5数字 6中英切换 7回车
    _strokeKeyboard.sendSelectedFunc = ^(int funcType) {
        //NSLog(@"%d",funcType);
        if (funcType == 0 && ![weakSelf.tabBar isTabBarHasData]) {
            //没有输入内容 只点击分隔符
            return;
        }

        switch (funcType) {
            case 2:{
                NSLog(@"清空");
                [getStroke keyboardReset];
                [weakSelf removeAllCadidateContent];
                break;
            }
            case 3:{
                NSLog(@"符号");
                BOOL isHavePinyin = [weakSelf.tabBar isTabBarHasPinyin];
                if (isHavePinyin) {
                    NSString *candidateStr = [weakSelf.tabBar getFirstCandidate];
                    [weakSelf.textDocumentProxy insertText:candidateStr];
                }
                [getStroke keyboardReset];
                [weakSelf removeAllCadidateContent];
                [weakSelf addSymbollKeyboardView];
                break;
            }
            case 4:{
                NSLog(@"下一个输入法");
                [weakSelf removeAllCoreWorkplace];
                [weakSelf advanceToNextInputMode];
                break;
            }
            case 5:{
                NSLog(@"数字");
                BOOL isHavePinyin = [weakSelf.tabBar isTabBarHasPinyin];
                if (isHavePinyin) {
                    NSString *candidateStr = [weakSelf.tabBar getFirstCandidate];
                    [weakSelf.textDocumentProxy insertText:candidateStr];
                }
                [getStroke keyboardReset];
                [weakSelf removeAllCadidateContent];
                [weakSelf addNumberKeyboardView];
                break;
            }
            case 6:{
                NSLog(@"中英切换");
                BOOL isHavePinyin = [weakSelf.tabBar isTabBarHasPinyin];
                if (isHavePinyin) {
                    NSString *candidateStr = [weakSelf.tabBar getFirstCandidate];
                    [weakSelf.textDocumentProxy insertText:candidateStr];
                }
                [getStroke releaseShare];

                [share saveValue:@"qwerty_english" forKey:@"keyboardType"];
                [weakSelf addQwertyKeyboardView:2];

                [weakSelf.strokeKeyboard removeFromSuperview];
                weakSelf.strokeKeyboard = nil;
                if (weakSelf.tabBar) {
                    [weakSelf.tabBar removeFromSuperview];
                    weakSelf.tabBar = nil;
                }
                break;
            }
            case 7:{
                NSLog(@"回车");
                NSString *candidateStr = [weakSelf.tabBar getFirstCandidate];
                if (candidateStr.length != 0 && candidateStr != nil) {
                    NSString *compontText = [weakSelf.tabBar getPinyin];
                    if (compontText.length != 0 && compontText != nil) {
                        [weakSelf.textDocumentProxy insertText:compontText];
                    }else {
                        [weakSelf.textDocumentProxy insertText:@"\n"];
                    }
                }else {
                    [weakSelf.textDocumentProxy insertText:@"\n"];
                }

                [weakSelf removeAllCadidateContent];
                [getStroke keyboardReset];
                break;
            }

            default:
                break;
        }
    };

    //文本符号按键返回
    _strokeKeyboard.sendSelectedSymbol = ^(NSString *text) {
        NSLog(@"%@",text);
        BOOL isHavePinyin = [weakSelf.tabBar isTabBarHasPinyin];
        if (isHavePinyin) {
            NSString *candidateStr = [weakSelf.tabBar getFirstCandidate];
            NSString *inserStr;
            if (candidateStr.length != 0 && candidateStr != nil) {
                if ([text isEqualToString:@" "]) {
                    [weakSelf clickTabbarIndex:0 byText:candidateStr];
                    return ;
                }else {
                    inserStr = [NSString stringWithFormat:@"%@%@",candidateStr,text];
                }
            }else {
                inserStr = text;
            }
            [weakSelf.textDocumentProxy insertText:inserStr];
        }else {
            NSString *inserStr = [NSString stringWithFormat:@"%@",text];
            [weakSelf.textDocumentProxy insertText:inserStr];
        }

        [weakSelf removeAllCadidateContent];
        [getStroke keyboardReset];
    };

    //删除功能键
    _strokeKeyboard.sendDeleteTap = ^(BOOL isDelete) {
        //NSLog(@"%d",isDelete);
        if (isDelete) {
            if (weakSelf.tabBar && [weakSelf.tabBar isTabBarHasData]) {
                [getStroke sendInput:0x08 complation:^(NSString *compontText, NSArray *candiateArray) {
                    if (candiateArray.count != 0) {
                        [weakSelf.tabBar changeShowText:candiateArray];
                    }
                    if (compontText.length != 0) {
                        [weakSelf.tabBar changeShowPinyin:compontText andRange:NSMakeRange(0, 0)];
                    }

                    if (compontText.length == 0 || candiateArray.count == 0) {
                        [getStroke keyboardReset];
                        [weakSelf removeAllCadidateContent];
                    }
                }];

            }else {
                [weakSelf.textDocumentProxy deleteBackward];
            }
        }else {
            [weakSelf.strokeKeyboard stopTimer];
        }
    };
}

//数字键盘
- (void)addNumberKeyboardView {
    CGFloat height = [self getKeyboardViewHeight];

    //GZUserDefaults *share = [GZUserDefaults shareUserDefaults];
    //NSString * skin = [share getGroupValueForKey:@"keyboardSkin"];
    if (!_numberKeyboard) {
        _numberKeyboard = [[GZNumberKeyboard alloc] initWithFrame:CGRectMake(0, navigaitonHeight, SCREEN_WIDTH, height)];
        //[_numberKeyboard setViewStyleWithSkin:skin];
        _numberKeyboard.backgroundColor = Color_background_kb;
        [self.view addSubview:_numberKeyboard];
    }

    __weak KeyboardViewController *weakSelf = self;
    _numberKeyboard.sendSelectedStr = ^(NSString *text) {
        NSLog(@"%@",text);
        [weakSelf.textDocumentProxy insertText:text];
    };
    _numberKeyboard.sendSelectedFunc = ^(int funcType) {
        if (funcType == 1) {
            //删除
            //因为涉及连续删除，删除功能单独回调
        }else if (funcType == 2) {
            //符号
            NSLog(@"符号");
            [weakSelf addSymbollKeyboardView];
        }else if (funcType == 3) {
            //回车
            [weakSelf.textDocumentProxy insertText:@"\n"];
        }else if (funcType == 4) {
            //返回
            [weakSelf.numberKeyboard stopTimer];
            [weakSelf.numberKeyboard removeFromSuperview];
            weakSelf.numberKeyboard = nil;
        }else {
            return ;
        }
    };
    //功能按钮  删除按钮
    _numberKeyboard.sendDeleteTap = ^(BOOL isDelete) {
        if (isDelete) {
            NSLog(@"存活");
            if (![weakSelf hasTextDocumentProxy]) {
                [weakSelf.numberKeyboard stopTimer];
                return;
            }
            [weakSelf.textDocumentProxy deleteBackward];
        }else {
            NSLog(@"失活");
        }
    };
}

//符号键盘
- (void)addSymbollKeyboardView {
    CGFloat height = [self getKeyboardViewHeight];
    //GZUserDefaults *share = [GZUserDefaults shareUserDefaults];
    //NSString * skin = [share getGroupValueForKey:@"keyboardSkin"];
    if (!_symbolKeyboard) {
        //        int typ = 0; //0常用 1中文 2英文 3网络 4单位
        //        switch (_keyboard_type) {
        //            case Default: {
        //                NSString *keyboardtypeStr = [share getValueForKey:@"keyboardType"];
        //                if ([keyboardtypeStr isEqualToString:@"qwerty_english"] ) {
        //                    typ = 2;
        //                }else {
        //                    typ = 0;
        //                }
        //                break;
        //            }
        //            case NumbersAndPunctuation: {
        //                typ = 4;
        //                break;
        //            }
        //            case URL: {
        //                typ = 3;
        //                break;
        //            }
        //            case EmailAddress: {
        //                typ = 3;
        //                break;
        //            }
        //            case WebSearch: {
        //                typ = 3;
        //                break;
        //            }
        //            case ASCLLCapable: {
        //                //英文 正常
        //                typ = 2;
        //                break;
        //            }
        //            default:
        //                break;
        //        }

        _symbolKeyboard = [[GZSymbolKeyboard alloc] initWithFrame:CGRectMake(0, navigaitonHeight, SCREEN_WIDTH, height) andKeyboardType:0];
        //[_symbolKeyboard setViewStyleWithSkin:skin];
        _symbolKeyboard.backgroundColor = Color_background_kb;
        [self.view addSubview:_symbolKeyboard];
    }

    __weak KeyboardViewController *weakSelf = self;

    _symbolKeyboard.sendSelectedStr = ^(NSString *text) {
        NSLog(@"%@",text);
        [weakSelf.textDocumentProxy insertText:text];
    };

    _symbolKeyboard.sendSelectedFunc = ^(int funcType) {
        if (funcType == 1) {
            //返回
            [weakSelf.symbolKeyboard stopTimer];
            [weakSelf.symbolKeyboard removeFromSuperview];
            weakSelf.symbolKeyboard = nil;
        }else if (funcType == 2) {
            //锁定
        }else if (funcType == 3) {
            //删除
            //因为涉及连续删除，删除功能单独回调
        }else {
            return ;
        }
    };
    //功能按钮  删除按钮
    _symbolKeyboard.sendDeleteTap = ^(BOOL isDelete) {
        if (isDelete) {
            if (![weakSelf hasTextDocumentProxy]) {
                [weakSelf.symbolKeyboard stopTimer];
                return;
            }
            [weakSelf.textDocumentProxy deleteBackward];
        }else {

        }
    };

}

//表情键盘
- (void)addExpressionKenbordView {
    CGFloat height = [self getKeyboardViewHeight];
    //GZUserDefaults *share = [GZUserDefaults shareUserDefaults];
    //NSString * skin = [share getGroupValueForKey:@"keyboardSkin"];
    if (!_expressionBoard) {
        _expressionBoard = [[GZExpressionKeyboard alloc] initWithFrame:CGRectMake(0, 0, SCREEN_WIDTH, height+navigaitonHeight)];
        //[_expressionBoard setViewStyleWithSkin:skin];
        _expressionBoard.backgroundColor = Color_background_kb;
        [self.view addSubview:_expressionBoard];
    }

    __weak KeyboardViewController *weakSelf = self;
    _expressionBoard.sendSelectedStr = ^(NSString *text) {
        if (text.length != 0 && text) {
            [weakSelf.textDocumentProxy insertText:text];
        }
    };
    _expressionBoard.sendSelectedFunc = ^(int funcType) {
        if (funcType == 1) {
            [weakSelf.expressionBoard stopTimer];
            [weakSelf.expressionBoard removeFromSuperview];
            weakSelf.expressionBoard = nil;
            [weakSelf setNavigationStatus];
        }
    };
    _expressionBoard.sendDeleteTap = ^(BOOL isDelete) {
        if (isDelete) {
            if (![weakSelf hasTextDocumentProxy]) {
                [weakSelf.expressionBoard stopTimer];
                [weakSelf setNavigationStatus];
                return;
            }
            [weakSelf.textDocumentProxy deleteBackward];
        }else {

        }
    };
}

//快捷短语
- (void)addUserPhrasesKeyboardView {
    CGFloat height = [self getKeyboardViewHeight];
    //GZUserDefaults *share = [GZUserDefaults shareUserDefaults];
    //NSString * skin = [share getGroupValueForKey:@"keyboardSkin"];

    if (!_userPhrasesBoard) {
        _userPhrasesBoard = [[GZUserPhrasesView alloc] initWithFrame:CGRectMake(0, navigaitonHeight, SCREEN_WIDTH, height)];
        //[_userPhrasesBoard setViewStyleWithSkin:skin];
        _userPhrasesBoard.backgroundColor = Color_background_kb;
        [self.view addSubview:_userPhrasesBoard];
    }

    __weak KeyboardViewController *weakSelf = self;
    _userPhrasesBoard.sendSelectPhrases = ^(NSString *phrases) {
        //选择了快捷短语
        if (phrases.length != 0 && phrases != nil) {
            [weakSelf.textDocumentProxy insertText:phrases];
            [weakSelf.userPhrasesBoard removeFromSuperview];
            weakSelf.userPhrasesBoard = nil;
        }else {
            [weakSelf.userPhrasesBoard removeFromSuperview];
            weakSelf.userPhrasesBoard = nil;
        }
        [weakSelf.settingBoard removeFromSuperview];
        weakSelf.settingBoard = nil;
        if (weakSelf.wrightKeyboard) {
            [weakSelf setNavigationSelectedIndex:3];
        }else {
            [weakSelf setNavigationSelectedIndex:2];
        }
    };
    _userPhrasesBoard.sendEditPhrases = ^(BOOL edit) {
        //跳转至app 编辑快捷短语
        NSString *urlString = @"HanvonInput://com.hanvon.HanvonInput.UserPhrases";
        UIResponder *responder = weakSelf;
        while ((responder = [responder nextResponder]) != nil) {
            if ([responder respondsToSelector:@selector(openURL:)] == YES) {
                [responder performSelector:@selector(openURL:) withObject:[NSURL URLWithString:urlString]];
            }
        }
        //隐藏键盘
        [weakSelf removeAllCoreWorkplace];
        [weakSelf dismissKeyboard];

    };
}


#pragma mark -- 地球按钮
//改变地球的坐标
- (void)changeTheGlobeFrameUnderKeyboard:(int)keyboardType withScreenDirection:(CGFloat)direction {
    //direction  150横屏  210竖屏
    //keyboardType 1手写 2全键 3九键 4笔画
    if (direction == 210.0 || direction == 260.0) {
        [self addTheGlobe_bByKeyboard:keyboardType];
    }else {
        if (keyboardType == 1) {
            [self addTheGlobe_lByKeyboard:keyboardType];
        }else {
            [self addTheGlobe_bByKeyboard:keyboardType];
        }
    }
}
//添加地球
- (void)addTheGlobe_bByKeyboard:(int)type {
    //键盘布局 水平间距5 垂直间距7
    //键盘布局 顶部间距3 底部间距3
    CGFloat spaceX = 5.0;
    CGFloat spaceY = 7.0;
    CGFloat top = 3.0;
    CGFloat bottom = 3.0;

    CGFloat height = [self getKeyboardViewHeight];
    CGFloat buttonH = (height - top - bottom - spaceY*3)/4.0; //按钮高度
    CGFloat buttonW = (SCREEN_WIDTH - 7*spaceX)/(4+2*1.5); //按钮宽度
    CGFloat buttonY = navigaitonHeight + height - bottom - buttonH; //按钮y

    GZFunctionButton *button = (GZFunctionButton*)[self.view viewWithTag:666];
    if (!button) {
        //GZUserDefaults *share = [GZUserDefaults shareUserDefaults];
        //NSString *skin = [share getGroupValueForKey:@"keyboardSkin"];

        GZFunctionButton *button = [GZFunctionButton buttonWithType:UIButtonTypeCustom];
        //[button setButtonStyleWithSkin:skin];
        [button setBackgroundImage:[UIImage imageNamed:@"key_hightlight"] forState:UIControlStateHighlighted];
        [button setBackgroundColor:[UIColor colorWithHexString:float_Color_button_function alpha:1]];
        button.layer.cornerRadius = 5;
        [button setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];

        [button addTarget:self action:@selector(handleInputModeListFromView:withEvent:) forControlEvents:UIControlEventAllTouchEvents];
        button.frame = CGRectMake(spaceX + 1*(spaceX+buttonW), buttonY, buttonW, buttonH);
        [button setImage:[UIImage imageNamed:@"keyboard_esrth"] forState:UIControlStateNormal];
        [self.view addSubview:button];
        button.tag = 666;
    }else {
        button.frame = CGRectMake(spaceX + 1*(spaceX+buttonW), buttonY, buttonW, buttonH);
    }

    [self.view bringSubviewToFront:button];
}
- (void)addTheGlobe_lByKeyboard:(int)type {
    //键盘布局 水平间距5 垂直间距7
    //键盘布局 顶部间距3 底部间距3
    CGFloat spaceX = 5.0;
    CGFloat spaceY = 7.0;
    CGFloat top = 3.0;
    CGFloat bottom = 3.0;

    CGFloat height = [self getKeyboardViewHeight];
    CGFloat buttonH = (height - top - bottom - spaceY*3)/4.0; //按钮的高度
    CGFloat buttonW = (SCREEN_WIDTH - 7*spaceX)/(4+2*1.5); //功能按钮宽度
    CGFloat buttonY = navigaitonHeight + height - bottom - buttonH; //按钮y top + 3*(buttonH+spaceY)

    GZFunctionButton *button = (GZFunctionButton*)[self.view viewWithTag:666];
    if (!button) {
        //GZUserDefaults *share = [GZUserDefaults shareUserDefaults];
        //NSString *skin = [share getGroupValueForKey:@"keyboardSkin"];

        GZFunctionButton *button = [GZFunctionButton buttonWithType:UIButtonTypeCustom];
        //[button setButtonStyleWithSkin:skin];
        [button setBackgroundImage:[UIImage imageNamed:@"key_hightlight"] forState:UIControlStateHighlighted];
        [button setBackgroundColor:[UIColor colorWithHexString:float_Color_button_function alpha:1]];
        button.layer.cornerRadius = 5;
        [button setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];

        [button addTarget:self action:@selector(handleInputModeListFromView:withEvent:) forControlEvents:UIControlEventAllTouchEvents];
        button.frame = CGRectMake(spaceX, buttonY, buttonW, buttonH);
        [button setImage:[UIImage imageNamed:@"keyboard_esrth"] forState:UIControlStateNormal];
        [self.view addSubview:button];
        button.tag = 666;
    }else {
        button.frame = CGRectMake(spaceX, buttonY, buttonW, buttonH);
    }

    [self.view bringSubviewToFront:button];
}

//全键盘时 改变地球的按钮功能
- (void)changeGlobleToInput:(BOOL)changeToInput {
    _isInput = changeToInput;
    UIButton *ju = (UIButton*)[self.view viewWithTag:777];
    if (changeToInput) {
        GZFunctionButton *button = (GZFunctionButton*)[self.view viewWithTag:666];
        CGSize size = button.frame.size;
        if (!ju) {
            ju = [UIButton buttonWithType:UIButtonTypeCustom];
            ju.frame = CGRectMake(0, 0, size.width, size.height);
            ju.layer.cornerRadius = button.layer.cornerRadius;
            ju.backgroundColor = [UIColor whiteColor];
            [ju setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
            ju.titleLabel.font = [UIFont systemFontOfSize:18];
            ju.titleLabel.textAlignment = NSTextAlignmentCenter;
            [ju setTitle:@"。" forState:UIControlStateNormal];
            [ju addTarget:self action:@selector(clickJuButton:) forControlEvents:UIControlEventTouchUpInside];
            ju.tag = 777;
            [button addSubview:ju];
            NSLog(@"添加句号");
        }else {
            NSLog(@"修改句号");
            ju.frame = CGRectMake(0, 0, size.width, size.height);
        }
    }else {
        if (ju) {
            NSLog(@"移除句号");
            [ju removeFromSuperview];
        }
    }
}
- (void)clickJuButton:(UIButton*)sender {
    NSString *candidateStr = [self.tabBar getFirstCandidate];
    NSString *inserStr;
    if (candidateStr.length != 0 && candidateStr) {
        inserStr = [NSString stringWithFormat:@"%@。",candidateStr];
    }else {
        inserStr = @"。";
    }
    [self.textDocumentProxy insertText:inserStr];

    [self.textKeyboard changeKeyboardStatusToInput:NO];
    [self changeGlobleToInput:NO];

    [self removeAllCadidateContent];
    [[GZQwerty defaultQwerty] keyboardReset];
}

#pragma mark -- 键盘核心相关
//点击候选按钮的操作
- (void)clickTabbarIndex:(int)selectIndex byText:(NSString*)text {
    //区分键盘类别
    GZUserDefaults *share = [GZUserDefaults shareUserDefaults];
    NSString *keyboardtypeStr = [share getValueForKey:@"keyboardType"];

    if ([keyboardtypeStr isEqualToString:@"qwerty_english"]) {
        //全键盘 英文
        [self selectIndex:selectIndex predicOperation:text keyboardType:1];
    }
    else if ([keyboardtypeStr isEqualToString:@"qwerty_pinyin"]) {
        //全键盘 拼音
        [self selectIndex:selectIndex predicOperation:text keyboardType:1];
    }
    else if ([keyboardtypeStr isEqualToString:@"squared"]) {
        //九宫格
        [self selectIndex:selectIndex predicOperation:text keyboardType:2];
    }
    else if ([keyboardtypeStr isEqualToString:@"stroke"]) {
        //笔画
        [self selectIndex:selectIndex predicOperation:text keyboardType:3];
    }
    else if ([keyboardtypeStr isEqualToString:@"wright"]) {
        //手写
        [self selectIndex:selectIndex predicOperation:text keyboardType:4];
    }
}
//type = 1全键盘  2九宫格  3笔画  4手写
- (void)selectIndex:(int)index predicOperation:(NSString*)text keyboardType:(int)type{

    GZUserDefaults *share = [GZUserDefaults shareUserDefaults];

    __weak id getdata;
    if (type == 1) {
        getdata = [GZQwerty defaultQwerty];
    }else if (type == 2) {
        getdata = [GZSquared defaultSquared];
    }else if (type == 3) {
        getdata = [GZStroke defaultStroke];
    }else if (type == 4) {
        getdata = [GZWright defaultWright];
    }

    __weak KeyboardViewController *weakSelf = self;

    //没有中文联想
    NSNumber *lianxiang = [share getValueForKey:@"chineseAssociation"];
    if ([lianxiang isEqualToNumber:@0]) {

        //手写键盘
        if (type == 4) {
            if (index != 0) {
                if (_wrightNum > 0) {
                    for (int i=0; i<_wrightNum; i++) {
                        [self.textDocumentProxy deleteBackward];
                    }
                }
                [self.textDocumentProxy insertText:text];
            }
            _wrightNum = 0;


            self.isWrightTimeout = NO;
            //            self.wrightFirst = nil;

            [getdata keyboardReset];
            [self removeAllCadidateContent];
        }

        //全键盘 笔画键盘
        else if (type == 1 || type == 3) {
            [getdata selectIndex:index complation:^(NSString *compontText, NSArray *candiateArray) {
                dispatch_async(dispatch_get_main_queue(), ^{
                    if (compontText == nil && candiateArray == nil) {
                        //输入结束 直接输入到文本框
                        //英文时 加空格
                        NSString *result;
                        NSString *keyboardtypeStr = [share getValueForKey:@"keyboardType"];
                        if ([keyboardtypeStr isEqualToString:@"qwerty_english"]) {
                            if (weakSelf.keyboard_type == URL || weakSelf.keyboard_type == EmailAddress || weakSelf.keyboard_type == WebSearch) {
                                //不作为单词使用 不添加空格
                                result = [NSString stringWithFormat:@"%@",text];
                            }else {
                                result = [NSString stringWithFormat:@"%@ ",text];
                            }
                        }else {
                            result = [getdata getResultStr];
                        }
                        [weakSelf.textDocumentProxy insertText:result];
                        [weakSelf removeAllCadidateContent];
                        [getdata keyboardReset];
                    }else {
                        //输入未结束 修改候选的拼音、候选
                        if (compontText.length != 0) {
                            if (type == 1) {
                                NSInteger end = [[GZQwerty defaultQwerty] getSelectedCompont];
                                [weakSelf.tabBar changeShowPinyin:compontText andRange:NSMakeRange(0, end)];
                            }else {
                                [weakSelf.tabBar changeShowPinyin:compontText andRange:NSMakeRange(0, 0)];
                            }
                        }
                        if (candiateArray.count != 0) {
                            [weakSelf.tabBar changeShowText:candiateArray];
                        }
                        if (compontText.length == 0 && candiateArray.count == 0) {
                            //英文时 加空格
                            NSString *result;
                            NSString *keyboardtypeStr = [share getValueForKey:@"keyboardType"];
                            if ([keyboardtypeStr isEqualToString:@"qwerty_english"]) {
                                if (weakSelf.keyboard_type == URL || weakSelf.keyboard_type == EmailAddress || weakSelf.keyboard_type == WebSearch) {
                                    //不作为单词使用 不添加空格
                                    result = [NSString stringWithFormat:@"%@",text];
                                }else {
                                    result = [NSString stringWithFormat:@"%@ ",text];
                                }
                            }else {
                                result = [getdata getResultStr];
                            }
                            [weakSelf.textDocumentProxy insertText:result];
                            [weakSelf removeAllCadidateContent];
                        }
                    }
                });

            }];
        }

        //九键盘
        else if (type == 2) {
            [getdata selectIndex:index complation:^(NSString *compontText, NSArray *candiateArray, NSArray *candiatePinyinArray) {
                if (compontText == nil && candiateArray == nil && candiatePinyinArray == nil) {
                    //输入结束 直接输入到文本框
                    NSString *result = [getdata getResultStr];
                    [weakSelf.textDocumentProxy insertText:result];

                    [weakSelf removeAllCadidateContent];
                    [weakSelf.squaredKeyboard removePinyinSelectButton];
                    [getdata keyboardReset];
                }else {
                    //输入未结束 修改候选的拼音、候选
                    if (compontText.length != 0) {
                        NSInteger end = [[GZSquared defaultSquared] getSelectedCompont];
                        [weakSelf.tabBar changeShowPinyin:compontText andRange:NSMakeRange(0, end)];
                    }
                    if (candiateArray.count != 0) {
                        [weakSelf.tabBar changeShowText:candiateArray];
                    }
                    if (candiatePinyinArray.count != 0) {
                        [weakSelf.squaredKeyboard changePinyinSelectButton:candiatePinyinArray];
                    }else {
                        [weakSelf.squaredKeyboard removePinyinSelectButton];
                    }
                    if (compontText.length == 0 && candiateArray.count == 0) {
                        NSString *result = [getdata getResultStr];
                        [weakSelf.textDocumentProxy insertText:result];
                        [weakSelf removeAllCadidateContent];
                    }
                }
            }];
        }else{}

        return;
    }


    //有中文联想
    BOOL pre = [[text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]] length] == 0;
    if (pre) { //是否空串
        [getdata keyboardReset];
        [self removeAllCadidateContent];
        if (self.tabBarMore) {
            [self removeCadidateShowMoreView];
        }
        return ;
    }

    self.view.userInteractionEnabled = NO;

    //手写
    if (type == 4) {

        if (_isWrightPreciate) {
            //联想状态
            [self.textDocumentProxy insertText:text];
        }else {
            if (index != 0 && _wrightNum > 0) {
                for (int i=0; i<_wrightNum; i++) {
                    [self.textDocumentProxy deleteBackward];
                }
                [self.textDocumentProxy insertText:text];
            }
        }

        self.wrightNum = 0;
        self.isWrightTimeout = NO;
        //        self.wrightFirst = nil;
        self.isWrightPreciate = YES;

        [getdata addPredictFunction]; //添加联想
        [getdata predicInput:text complation:^(NSArray *candiateArray) {
            weakSelf.view.userInteractionEnabled = YES;
            if (candiateArray.count != 0 && candiateArray) {
                [weakSelf.tabBar changeShowText:candiateArray];
            }else{
                [weakSelf removeAllCadidateContent];
            }
            [getdata keyboardReset];
        }];

        //1添加删除 0移除删除并移除tabbar
        //[weakSelf changeTabbarShowMoreButton];
        [weakSelf.tabBar changeShowMoreToDelete:YES];
    }

    //全键盘 笔画键盘
    else if (type == 1 || type == 3) {
        [getdata sendSelectedIndex:index andStr:text selectComplation:^(NSString *compontText, NSArray *candiateArray) {
            //输入未完成 点击修改候选拼音
            dispatch_async(dispatch_get_main_queue(), ^{
                weakSelf.view.userInteractionEnabled = YES;

                if (compontText != nil) {
                    if (type == 1) {
                        NSInteger end = [[GZQwerty defaultQwerty] getSelectedCompont];
                        [weakSelf.tabBar changeShowPinyin:compontText andRange:NSMakeRange(0, end)];
                    }else {
                        [weakSelf.tabBar changeShowPinyin:compontText andRange:NSMakeRange(0, 0)];
                    }
                }
                if (candiateArray != nil) {
                    [weakSelf.tabBar changeShowText:candiateArray];
                }
            });


        } predicComplation:^(NSArray *candiateArray) {
            //输入完成 点击 联想输入
            dispatch_async(dispatch_get_main_queue(), ^{
                weakSelf.view.userInteractionEnabled = YES;

                //英文时 加空格
                NSString *result;
                NSString *keyboardtypeStr = [share getValueForKey:@"keyboardType"];
                if ([keyboardtypeStr isEqualToString:@"qwerty_english"]) {
                    //英文状态下，判断是否加空格
                    if (weakSelf.keyboard_type == URL || weakSelf.keyboard_type == EmailAddress || weakSelf.keyboard_type == WebSearch) {
                        //不作为单词使用 不添加空格
                        result = [NSString stringWithFormat:@"%@",text];
                    }else {
                        if ([weakSelf.tabBar isTabBarHasPinyin]) {
                            //直接输入 不加空格
                            result = [NSString stringWithFormat:@"%@",text];
                        }else {
                            //联想 加空格
                            result = [NSString stringWithFormat:@" %@",text];
                        }
                    }
                }else {
                    result = [getdata getResultStr];
                }
                [weakSelf.textDocumentProxy insertText:result];

                if (candiateArray == nil) {
                    [weakSelf removeAllCadidateContent];
                }else {
                    [weakSelf.tabBar changeShowPinyin:nil andRange:NSMakeRange(0, 0)]; //候选时，移除拼音view

                    //1添加删除 0移除删除并移除tabbar
                    [weakSelf changeTabbarShowMoreButton];

                    if (candiateArray.count != 0 && candiateArray) {
                        [weakSelf.tabBar changeShowText:candiateArray];
                    }else{
                        [weakSelf removeAllCadidateContent];
                    }
                }
            });


            //            [getdata keyboardReset];
        }];
    }

    //九键盘
    else if (type == 2) {
        [getdata sendSelectedIndex:index andStr:text selectComplation:^(NSString *compontText, NSArray *candiateArray, NSArray *candiatePinyinArray) {
            //输入未完成 点击修改候选拼音
            weakSelf.view.userInteractionEnabled = YES;

            if (compontText != nil) {
                NSInteger end = [[GZSquared defaultSquared] getSelectedCompont];
                [weakSelf.tabBar changeShowPinyin:compontText andRange:NSMakeRange(0, end)];
            }
            if (candiateArray != nil) {
                [weakSelf.tabBar changeShowText:candiateArray];
            }
            if (candiatePinyinArray != nil) {
                [weakSelf.squaredKeyboard changePinyinSelectButton:candiatePinyinArray];
            }else {
                [weakSelf.squaredKeyboard removePinyinSelectButton];
            }
            if (compontText.length == 0 && candiateArray.count == 0) {
                NSString *result = [getdata getResultStr];
                [weakSelf.textDocumentProxy insertText:result];
                [weakSelf.squaredKeyboard removePinyinSelectButton];
                [weakSelf removeAllCadidateContent];
            }

        } predicComplation:^(NSArray *candiateArray) {
            //输入完成 点击 联想输入
            weakSelf.view.userInteractionEnabled = YES;

            [weakSelf.squaredKeyboard removePinyinSelectButton];

            NSString *result;
            if ([weakSelf.tabBar isTabBarHasPinyin]) {
                result = [getdata getResultStr];
            }else {
                result = text;
            }
            [weakSelf.textDocumentProxy insertText:result];

            if (candiateArray == nil) {
                [weakSelf removeAllCadidateContent];
            }else {
                [weakSelf.tabBar changeShowPinyin:nil andRange:NSMakeRange(0, 0)]; //候选时，移除拼音view

                //1添加删除 0移除删除并移除tabbar
                [weakSelf changeTabbarShowMoreButton];

                if (candiateArray.count != 0 && candiateArray) {
                    [weakSelf.tabBar changeShowText:candiateArray];
                }else{
                    [weakSelf removeAllCadidateContent];
                }
            }

            //            [getdata keyboardReset];
        }];
    }else {}

}

//手写键盘 输入间隔超时
- (void)notificationTellTimeOut:(NSNotification *)sender{
    //NSLog(@"%@",sender);
    NSDictionary *userinfo = (NSDictionary *)[sender userInfo];
    NSString *result = [userinfo objectForKey:@"isTimeOut"];
    if ([result isEqualToString:@"yes"]) {
        NSLog(@"timeOUT!!!!!!!!");

        _isWrightTimeout = YES;

        GZWright *getWright = [GZWright defaultWright];
        [getWright keyboardReset];

        [self hiddenWrightStoke:YES];
    }else {
        //no 手写板置顶，全键盘手写开启
        [self hiddenWrightStoke:NO];
    }
}

//手写输入 隐藏手写板
- (void)hiddenWrightStoke:(BOOL)hidden {
    GZFunctionButton *button = (GZFunctionButton*)[self.view viewWithTag:666]; //小地球
    if (hidden) {
        if (button.hidden) {
            button.hidden = NO;
            [_wrightKeyboard bringStorkeViewToFront:NO];
            [_wrightKeyboard insertGlobleView:NO byRect:CGRectNull];
        }
    }else {
        if (!button.hidden) {
            button.hidden = YES;
            [_wrightKeyboard bringStorkeViewToFront:YES];
            CGPoint point = button.frame.origin;
            CGSize size = button.frame.size;
            [_wrightKeyboard insertGlobleView:YES byRect:CGRectMake(point.x, point.y-navigaitonHeight, size.width, size.height)];
        }
    }
}

//判断输入框是否有值
- (BOOL)hasTextDocumentProxy {
    NSString *str = self.textDocumentProxy.documentContextBeforeInput;
    if (str.length == 0 || str == nil) {
        return NO;
    }
    return YES;
}

#pragma mark -- 按钮点击事件
//长按地球选择输入法
- (void)handleInputModeListFromView:(nonnull UIView *)view withEvent:(nonnull UIEvent *)event {
    [super handleInputModeListFromView:view withEvent:event];
}

//导航按钮点击
- (void)didNavigationButtonTap:(UIButton*)sender {

    if (_userPhrasesBoard) {
        [_userPhrasesBoard removeFromSuperview];
        _userPhrasesBoard = nil;
    }
    if (_numberKeyboard) {
        [_numberKeyboard removeFromSuperview];
        _numberKeyboard = nil;
    }
    if (_symbolKeyboard) {
        [_symbolKeyboard removeFromSuperview];
        _symbolKeyboard = nil;
    }
    if (_tabBar) {
        [self removeAllCadidateContent];
    }
    if (_tabBarMore) {
        [self removeCadidateShowMoreView];
    }

    GZUserDefaults *share = [GZUserDefaults shareUserDefaults];

    NSInteger tag = sender.tag;
    switch (tag) {
        case 102:{
            NSLog(@"设置");
            if (_selectBoard) {
                [_selectBoard removeFromSuperview];
                _selectBoard = nil;
            }
            if (_expressionBoard) {
                [_expressionBoard removeFromSuperview];
                _expressionBoard = nil;
            }
            if (!_settingBoard) {
                [self setNavigationSelectedIndex:1];
                [self addSettingBpardView];
            }else {
                [_settingBoard removeFromSuperview];
                _settingBoard = nil;
                [self setNavigationStatus];
            }
            break;
        }
        case 103:{
            NSLog(@"选择键盘");
            if (_settingBoard) {
                [_settingBoard removeFromSuperview];
                _settingBoard = nil;
            }
            if (_expressionBoard) {
                [_expressionBoard removeFromSuperview];
                _expressionBoard = nil;
            }
            if (!_selectBoard) {
                [self setNavigationSelectedIndex:2];
                [self addSelectKeyboardView];
            }else {
                [_selectBoard removeFromSuperview];
                _selectBoard = nil;
                [self setNavigationStatus];
            }

            break;
        }
        case 104:{
            NSLog(@"手写");
            if (_settingBoard) {
                [_settingBoard removeFromSuperview];
                _settingBoard = nil;
            }
            if (_selectBoard) {
                [_selectBoard removeFromSuperview];
                _selectBoard = nil;
            }
            if (_expressionBoard) {
                [_expressionBoard removeFromSuperview];
                _expressionBoard = nil;
            }

            [self setNavigationSelectedIndex:3];

            if (_wrightKeyboard) {
                return;
            }

            if (_textKeyboard) {
                [_textKeyboard removeFromSuperview];
                _textKeyboard = nil;
                GZQwerty *getQwerty = [GZQwerty defaultQwerty];
                [getQwerty releaseWorkspace];
            }
            if (_squaredKeyboard) {
                [_squaredKeyboard removeFromSuperview];
                _squaredKeyboard = nil;
                GZSquared *getSquared = [GZSquared defaultSquared];
                [getSquared releaseWorkspace];
            }
            if (_strokeKeyboard) {
                [_strokeKeyboard removeFromSuperview];
                _strokeKeyboard = nil;
                GZStroke *getStroke = [GZStroke defaultStroke];
                [getStroke releaseWorkspace];
            }
            [share saveValue:@"wright" forKey:@"keyboardType"];
            [share saveValue:@"wright" forKey:@"lastKeyboard"];
            [self addWrightKeyboardViw];
            break;
        }
        case 105:{
            NSLog(@"表情");
            if (_selectBoard) {
                [_selectBoard removeFromSuperview];
                _selectBoard = nil;
            }
            if (_settingBoard) {
                [_settingBoard removeFromSuperview];
                _settingBoard = nil;
            }
            if (!_expressionBoard) {
                [self setNavigationSelectedIndex:4];
                [self addExpressionKenbordView];
            }else {
                [_expressionBoard removeFromSuperview];
                _expressionBoard = nil;
                [self setNavigationStatus];
            }
            break;
        }
        case 106:{
            NSLog(@"隐藏");
            _isQuitOutApp = YES;
            [self dismissKeyboard];
            break;
        }
        default:
            break;
    }

}

//导航按钮的选择状态 1设置 2键盘 3手写 4表情
- (void)setNavigationSelectedIndex:(int)index {
    //导航的选择状态
    for (int i=0; i<5; i++) {
        UIButton *button = (UIButton*)[self.view viewWithTag:102+i];
        if (i == index-1) {
            button.selected = YES;
        }else {
            button.selected = NO;
        }
    }
}

//判断导航的选择状态
- (void)setNavigationStatus {
    if (_wrightKeyboard) {
        [self setNavigationSelectedIndex:3];
    }else if (_textKeyboard) {
        [self setNavigationSelectedIndex:2];
    }else if (_squaredKeyboard){
        [self setNavigationSelectedIndex:2];
    }else if (_strokeKeyboard){
        [self setNavigationSelectedIndex:2];
    }else {

    }
}

//改变候选框更多候选的功能 1添加删除 0移除删除并移除tabbar
- (void)changeTabbarShowMoreButton {
    BOOL hasCompontText = [_tabBar isTabBarHasPinyin];
    if (!hasCompontText) {
        [_tabBar changeShowMoreToDelete:YES];
    }else {
        [_tabBar changeShowMoreToDelete:NO];
    }
}

//清除候选框的内容
- (void)removeAllCadidateContent {
    if (_tabBar && [_tabBar isTabBarHasData]) {
        [_tabBar removeFromSuperview];
        _tabBar = nil;
    }
}
- (void)removeCadidateShowMoreView {
    if (_tabBarMore) {
        BOOL isOpen = [_tabBarMore stopTimer];
        if (isOpen) {
            NSLog(@"关闭前开启的");
        }else{
            NSLog(@"关闭前关闭的");
        }
        [_tabBarMore removeFromSuperview];
        _tabBarMore = nil;
    }
}

//清除附加键盘 (设置键盘)
- (void)removeLitallSettingBoards {
    if (_userPhrasesBoard) {
        NSLog(@"main-设置 快捷短语 销毁");
        [_userPhrasesBoard removeFromSuperview];
        _userPhrasesBoard = nil;
    }
    if (_settingBoard) {
        [_settingBoard removeFromSuperview];
        _settingBoard = nil;
        NSLog(@"main-设置 销毁");
    }

    if (_selectBoard) {
        [_selectBoard removeFromSuperview];
        _selectBoard = nil;
        NSLog(@"main-选择键盘 销毁");
    }
}

//清除小键盘 计时器
- (void)removeLittalKeyboardTimer {
    if (_numberKeyboard) {
        [_numberKeyboard stopTimer];
    }
    if (_symbolKeyboard) {
        [_symbolKeyboard stopTimer];
    }
    if (_expressionBoard) {
        [_expressionBoard stopTimer];
    }
}

//清除附加键盘 （小键盘）
- (void)removeLitallKeyboards {
    if (_numberKeyboard) {
        [_numberKeyboard stopTimer];
        [_numberKeyboard removeFromSuperview];
        _numberKeyboard = nil;
        NSLog(@"main-数字键 销毁");
    }
    if (_symbolKeyboard) {
        [_symbolKeyboard stopTimer];
        [_symbolKeyboard removeFromSuperview];
        _symbolKeyboard = nil;
        NSLog(@"main-符号键 销毁");
    }
    if (_expressionBoard) {
        [_expressionBoard stopTimer];
        [_expressionBoard removeFromSuperview];
        _expressionBoard = nil;
        NSLog(@"main-表情键 销毁");
    }
}

//清除大键盘的view
- (void)removeBigKeyboardsView {
    GZUserDefaults *share = [GZUserDefaults shareUserDefaults];
    NSString *keyboardStr = [share getValueForKey:@"keyboardType"];
    if ([keyboardStr isEqualToString:@"qwerty_pinyin"]) {
        [_textKeyboard stopTimer];
        [_textKeyboard removeFromSuperview];
        _textKeyboard = nil;
        NSLog(@"main-全键盘  销毁");
    }else if ([keyboardStr isEqualToString:@"qwerty_english"]) {
        [_textKeyboard stopTimer];
        [_textKeyboard removeFromSuperview];
        _textKeyboard = nil;
        NSLog(@"main-全键盘  销毁");
    }else if ([keyboardStr isEqualToString:@"wright"]) {
        [[NSNotificationCenter defaultCenter] removeObserver:self name:@"notificationTellTimeOut" object:nil];
        [_wrightKeyboard stopTimer];
        [_wrightKeyboard removeFromSuperview];
        _wrightKeyboard = nil;
        NSLog(@"main-手写键盘  销毁");
    }else if ([keyboardStr isEqualToString:@"squared"]) {
        [_squaredKeyboard stopTimer];
        [_squaredKeyboard removeFromSuperview];
        _squaredKeyboard = nil;
        NSLog(@"main-九键盘  销毁");
    }else if ([keyboardStr isEqualToString:@"stroke"]) {
        [_strokeKeyboard stopTimer];
        [_strokeKeyboard removeFromSuperview];
        _strokeKeyboard = nil;
        NSLog(@"main-笔画键盘  销毁");
    }
}

//清除大键盘、核心
- (void)removeAllKeyboards {
    [self removeBigKeyboardsView];
    [self removeAllCoreWorkplace];
}

//释放核心数据
- (void)resetCoreData {
    GZUserDefaults *share = [GZUserDefaults shareUserDefaults];
    NSString *keyboardStr = [share getValueForKey:@"keyboardType"];
    if ([keyboardStr isEqualToString:@"qwerty_pinyin"]) {
        GZQwerty *qwerty = [GZQwerty defaultQwerty];
        [qwerty keyboardReset];
    }else if ([keyboardStr isEqualToString:@"qwerty_english"]) {
        GZQwerty *qwerty = [GZQwerty defaultQwerty];
        [qwerty keyboardReset];
    }else if ([keyboardStr isEqualToString:@"wright"]) {
        GZWright *getWright = [GZWright defaultWright];
        [getWright keyboardReset];
    }else if ([keyboardStr isEqualToString:@"squared"]) {
        GZSquared *squared = [GZSquared defaultSquared];
        [squared keyboardReset];
    }else if ([keyboardStr isEqualToString:@"stroke"]) {
        GZStroke *stroke = [GZStroke defaultStroke];
        [stroke keyboardReset];
    }
}
//清除核心使用的词典
- (void)removeAllCoreDictionary {
    GZUserDefaults *share = [GZUserDefaults shareUserDefaults];
    NSString *keyboardStr = [share getValueForKey:@"keyboardType"];
    if ([keyboardStr isEqualToString:@"qwerty_pinyin"]) {
        GZQwerty *qwerty = [GZQwerty defaultQwerty];
        [qwerty releaseDictionary];
    }else if ([keyboardStr isEqualToString:@"qwerty_english"]) {
        GZQwerty *qwerty = [GZQwerty defaultQwerty];
        [qwerty releaseDictionary];
    }else if ([keyboardStr isEqualToString:@"wright"]) {

    }else if ([keyboardStr isEqualToString:@"squared"]) {
        GZSquared *squared = [GZSquared defaultSquared];
        [squared releaseDictionary];
    }else if ([keyboardStr isEqualToString:@"stroke"]) {
        GZStroke *stroke = [GZStroke defaultStroke];
        [stroke releaseDictionary];
    }
}
//清空所有核心使用开辟的内存
- (void)removeAllCoreWorkplace {
    GZUserDefaults *share = [GZUserDefaults shareUserDefaults];
    NSString *keyboardStr = [share getValueForKey:@"keyboardType"];
    if ([keyboardStr isEqualToString:@"qwerty_pinyin"]) {
        GZQwerty *qwerty = [GZQwerty defaultQwerty];
        [qwerty releaseWorkspace];
    }else if ([keyboardStr isEqualToString:@"qwerty_english"]) {
        GZQwerty *qwerty = [GZQwerty defaultQwerty];
        [qwerty releaseWorkspace];
    }else if ([keyboardStr isEqualToString:@"wright"]) {
        GZWright *getWright = [GZWright defaultWright];
        [getWright releaseWorkspace];
        [getWright releaseWorksplace_predict:YES];
    }else if ([keyboardStr isEqualToString:@"squared"]) {
        GZSquared *squared = [GZSquared defaultSquared];
        [squared releaseWorkspace];
    }else if ([keyboardStr isEqualToString:@"stroke"]) {
        GZStroke *stroke = [GZStroke defaultStroke];
        [stroke releaseWorkspace];
    }
}

//清除所有的视图控件
- (void)removeAllSelfViews {
    if (_heightConstraint) {
        NSLog(@"键盘全局约束  销毁");
        [self.view removeConstraint:_heightConstraint];
        _heightConstraint = nil;
    }

    [self removeAllCadidateContent];
    [self removeCadidateShowMoreView];

    [self removeLitallKeyboards];
    [self removeLitallSettingBoards];

    [self removeBigKeyboardsView];

    //导航父视图
    UIView *navigationBarView = (UIView*)[self.view viewWithTag:101];
    if (navigationBarView) {
        [navigationBarView removeFromSuperview];
        navigationBarView = nil;
    }
    //导航按钮
    for (int i=0; i<5; i++) {
        UIButton *button = (UIButton*)[self.view viewWithTag:102+i];
        if (button) {
            [button removeFromSuperview];
            button = nil;
        }
    }
    //地球
    GZFunctionButton *button = (GZFunctionButton*)[self.view viewWithTag:666];
    if (button) {
        [button removeFromSuperview];
        button = nil;
    }
}



#pragma mark -- 横竖屏切换
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id<UIViewControllerTransitionCoordinator>)coordinator{
    NSLog(@"viewWillTransitionToSize");
    [self performSelector:@selector(resetKeyboardView) withObject:nil afterDelay:0.1];
}
- (void)resetKeyboardView {
    if (_tabBarMore) {
        [_tabBar changeShowMoreButton:0];
        [self removeCadidateShowMoreView];
    }
    [self removeLitallKeyboards];
    [self removeLitallSettingBoards];

    CGFloat height = [self getKeyboardViewHeight];
    [self setKeyboardViewHeight:height+navigaitonHeight]; //整体高度=键盘+导航的高度
    [self setNavigationBarViewType];
    [self setCadidateViewType];

    if (_textKeyboard) {
        [self setNavigationSelectedIndex:2];
        [_textKeyboard changeViewFrame:CGRectMake(0, navigaitonHeight, SCREEN_WIDTH, height)];
        [self changeTheGlobeFrameUnderKeyboard:2 withScreenDirection:height]; //小地球
        [self changeGlobleToInput:_isInput];
    }
    if (_wrightKeyboard) {
        [self setNavigationSelectedIndex:3];
        int wrightMode = [self setWrightModeWithKeyboardHeight:height];
        [_wrightKeyboard changeViewFrame:CGRectMake(0, navigaitonHeight, SCREEN_WIDTH, height) withWrightMode:wrightMode];
        [self setWrightRecgnizeModeWithKeyboardHeight:height];
        [self changeTheGlobeFrameUnderKeyboard:1 withScreenDirection:height]; //小地球
    }
    if (_squaredKeyboard) {
        [self setNavigationSelectedIndex:2];
        [_squaredKeyboard changeViewFrame:CGRectMake(0, navigaitonHeight, SCREEN_WIDTH, height)];
        [self changeTheGlobeFrameUnderKeyboard:3 withScreenDirection:height]; //小地球
    }
    if (_strokeKeyboard) {
        [self setNavigationSelectedIndex:2];
        [_strokeKeyboard changeViewFrame:CGRectMake(0, navigaitonHeight, SCREEN_WIDTH, height)];
        [self changeTheGlobeFrameUnderKeyboard:4 withScreenDirection:height]; //小地球
    }
}

//切换手写的 手写核心 识别方式
- (void)setWrightRecgnizeModeWithKeyboardHeight:(CGFloat)height {
    //1中英文单字 2中文短句 3中文短句重叠 4自由写
    GZUserDefaults *share = [GZUserDefaults shareUserDefaults];
    GZWright *getWright = [GZWright defaultWright];
    if (height == 210.0 || height == 260.0) { //考虑iPad
        //竖屏
        NSNumber *mode_V = [share getGroupValueForKey:@"wrightMode_Vertical"];
        if ([mode_V isEqualToNumber:@1]) {
            //叠写
            [getWright setWrightMode:3];
        }else if ([mode_V isEqualToNumber:@2]) {
            //行写
            [getWright setWrightMode:2];
        }else if ([mode_V isEqualToNumber:@3]) {
            //自由写
            [getWright setWrightMode:4];
        }else {
            [getWright setWrightMode:3];
        }
    }else {
        //横屏
        NSNumber *mode_H = [share getGroupValueForKey:@"wrightMode_Horizontal"];
        if ([mode_H isEqualToNumber:@1]) {
            //叠写
            [getWright setWrightMode:3];
        }else if ([mode_H isEqualToNumber:@2]) {
            //行写
            [getWright setWrightMode:2];
        }else if ([mode_H isEqualToNumber:@3]) {
            //自由写
            [getWright setWrightMode:4];
        }else {
            [getWright setWrightMode:2];
        }
    }
}

//切换手写的 手写板设置
- (int)setWrightModeWithKeyboardHeight:(CGFloat)height {
    //1中英文单字 2中文短句 3中文短句重叠 4自由写
    GZUserDefaults *share = [GZUserDefaults shareUserDefaults];
    int mode;
    if (height == 210.0 || height == 260.0) { //考虑iPad
        //竖屏
        NSNumber *mode_V = [share getGroupValueForKey:@"wrightMode_Vertical"];
        if ([mode_V isEqualToNumber:@1]) {
            //叠写
            mode = 3;
        }else if ([mode_V isEqualToNumber:@2]) {
            //行写
            mode = 2;
        }else if ([mode_V isEqualToNumber:@3]) {
            //自由写
            mode = 4;
        }else {
            mode = 3;
        }
    }else {
        //横屏
        NSNumber *mode_H = [share getGroupValueForKey:@"wrightMode_Horizontal"];
        if ([mode_H isEqualToNumber:@1]) {
            //叠写
            mode = 3;
        }else if ([mode_H isEqualToNumber:@2]) {
            //行写
            mode = 2;
        }else if ([mode_H isEqualToNumber:@3]) {
            //自由写
            mode = 4;
        }else {
            mode = 2;
        }
    }
    return mode;
}

#pragma mark -- 设置键盘高度
//获取键盘输入部分的高度  除去导航部分
- (CGFloat)getKeyboardViewHeight {
    CGFloat newHeight = [UIScreen mainScreen].bounds.size.height;
    CGFloat newWidth = [UIScreen mainScreen].bounds.size.width;
    CGFloat _keyboardHeight; //键盘的整体高度
    if (newHeight > newWidth) {
        //竖屏
        if (IS_IPAD_ONLYIphone) {
            _keyboardHeight = 260+navigaitonHeight;
        }else {
            _keyboardHeight = 210+navigaitonHeight;
        }
    }else {
        //横屏
        if (IS_IPAD_ONLYIphone) {
            _keyboardHeight = 200+navigaitonHeight;
        }else {
            _keyboardHeight = 150+navigaitonHeight;
        }
    }
    return _keyboardHeight - navigaitonHeight; //输入部分的高度
}
//设置键盘全局高度
//1竖屏 2横屏
- (void)setKeyboardViewHeight:(CGFloat)keyboardHeight {
    if (!_heightConstraint) {
        _heightConstraint =
        [NSLayoutConstraint constraintWithItem: self.view
                                     attribute: NSLayoutAttributeHeight
                                     relatedBy: NSLayoutRelationEqual
                                        toItem: nil
                                     attribute: NSLayoutAttributeNotAnAttribute
                                    multiplier: 0.0
                                      constant: keyboardHeight];
    }else {
        [self.view removeConstraint:_heightConstraint];
        _heightConstraint.constant = keyboardHeight;
    }

    //inputView和view不能同时都添加约束，会频繁崩溃
    [self.view addConstraint:_heightConstraint];
    //    [self.inputView addConstraint:_heightConstraint];
}
//设置键盘导航布局
- (void)setNavigationBarViewType {
    CGFloat buttonW = 25; //按钮的宽高
    CGFloat space = (SCREEN_WIDTH - buttonW*5)/5.4; //左右边距相当于0.7个
    CGFloat y = navigaitonHeight-buttonW-navigationButtonBottom;
    for (int i=0; i<5; i++) {
        UIButton *button = (UIButton*)[self.view viewWithTag:102+i];
        button.frame = CGRectMake(space*0.7 + i*(buttonW+space), y, buttonW, buttonW); //导航高度固定
    }
}
//设置候选框的布局
- (void)setCadidateViewType {
    [_tabBar changeViewFrame:CGRectMake(0, 0, SCREEN_WIDTH, navigaitonHeight)];
}










@end
