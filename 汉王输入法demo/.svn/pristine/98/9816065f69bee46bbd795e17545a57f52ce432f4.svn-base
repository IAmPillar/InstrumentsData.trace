//
//  StrokeShowerView.m
//  HanvonNotePad
//
//  Created by gao guoling on 11-10-20.
//  Copyright (c) 2011年 Hanwang Technology Co. All rights reserved.
//

#import "StrokeShowerView.h"
#import "HWColorPen.h"


#define STROKE_WIDTH 5.0

#define PENWIDTH 1
#define PENCOLORRED 0
#define PENCOLORGREEN 0
#define PENCOLORBLUE 0
#define PENCOLORALPHA 255


#define SelfWidth  self.frame.size.width
#define SelfHeight  self.frame.size.height
#define MEMORY  SelfWidth * SelfHeight * 4


@interface StrokeShowerView ()
{
    BOOL penColorTemp;
    unsigned char *penColorD;
    color userColor;

    float penWidth;
    float penColorRed;
    float penColorGreen;
    float penColorBlue;
    float penColorAlpha;
}
@end

@implementation StrokeShowerView

//add by myself
- (instancetype)initWithFrame:(CGRect)frame {
    self = [super initWithFrame:frame];
    if (self) {
        self.backgroundColor = [UIColor whiteColor];
        [self initialize];
    }
    return self;
}

// 初始化
- (void)initialize
{
    NSUserDefaults * _sharedUserDefault = [[NSUserDefaults standardUserDefaults] initWithSuiteName:@"group.com.hanvon.hanvonInput"];
    
    penWidth = [[_sharedUserDefault stringForKey:@"penWidth"] floatValue];
    penColorBlue = [[_sharedUserDefault stringForKey:@"penColorBlue"] floatValue];
    penColorGreen = [[_sharedUserDefault stringForKey:@"penColorGreen"] floatValue];
    penColorRed = [[_sharedUserDefault stringForKey:@"penColorRed"] floatValue];
    penColorAlpha = [[_sharedUserDefault stringForKey:@"penColorAlpha"] floatValue];
    
    if (penWidth < 1 || penWidth > 10) {
        penWidth = PENWIDTH;
    }
    if (penColorRed < 0 || penColorRed > 255) {
        penColorRed = PENCOLORRED;
    }
    if (penColorGreen < 0 || penColorGreen > 255) {
        penColorGreen = PENCOLORGREEN;
    }
    if (penColorBlue < 0 || penColorBlue > 255) {
        penColorBlue = PENCOLORBLUE;
    }
    if (penColorAlpha < 1 || penColorAlpha > 255) {
        penColorAlpha = PENCOLORALPHA;
    }
    
    userColor.b = penColorBlue;
    userColor.r = penColorRed;
    userColor.g = penColorGreen;
}


- (void)drawRect:(CGRect)rect
{
    if (!penColorTemp || penColorD == nil) {
        [self initialize];
        
        if(penColorD == nil){
            penColorD = (unsigned char *)malloc((MEMORY));
        }
        
        memset(penColorD, 0, MEMORY);
        HWPEN_initializeEx(SelfWidth, SelfHeight, (DWORD*)penColorD, 0, 1);
        
        HWPEN_SetPen(1, PENCIL, YELLOW, penWidth, 0);
        
        HWPEN_SetUserColor(userColor);
        penColorTemp = YES;
    }

    CGImageRef imageRef = NULL;
    CGBitmapInfo bitmapInfo = kCGBitmapByteOrder32Little| kCGImageAlphaLast;
    CGDataProviderRef provider = CGDataProviderCreateWithData(nil, penColorD, (MEMORY), nil);
    CGColorSpaceRef crRef = CGColorSpaceCreateDeviceRGB();
    
    if (crRef == NULL) {
        return;
    }
    
    if (provider != NULL) {
        imageRef = CGImageCreate(SelfWidth, SelfHeight, 8, 32, SelfWidth * 4, crRef, bitmapInfo, provider, NULL, NO, 0);
        CGDataProviderRelease(provider);
    }
    
    CGColorSpaceRelease(crRef);
    
    if (imageRef != NULL) {
        CGContextRef context = UIGraphicsGetCurrentContext();
        
        if (context != NULL) {
            UIImage *img = [UIImage imageWithCGImage:imageRef];
            CGContextSaveGState(context);
            
            CGRect touchRect = CGRectMake(0, 0, img.size.width ,img.size.height );
            CGContextDrawImage(context, touchRect, imageRef);
            CGContextRestoreGState(context);
        }
       
        CGImageRelease(imageRef);
        imageRef = NULL;
    }
}


#pragma mark -- 手势操作
// 点击
- (void)strokeStartAtPoint:(CGPoint)point
{
    CGRect rect = {0, 0, SelfWidth, SelfHeight};
    [self drawRect:rect];
    TRect re = {0, 0, SelfWidth, SelfHeight};
    HWPEN_DrawLine(point.x, point.y, &re, 0, 255, 1);
    
    [self setNeedsDisplay];
}
// 移动
- (void)strokeMoveToPoint:(CGPoint)point
{
    TRect rect = {0, 0, SelfWidth, SelfHeight};
    HWPEN_DrawLine(point.x, point.y, &rect, 0, 255, 1);

    [self setNeedsDisplay];
}
// 抬起
- (void)strokeEndAtPoint:(CGPoint)point
{
    TRect rect = {0, 0, SelfWidth, SelfHeight};
    HWPEN_DrawLine(-1, -1, &rect, 0, 255, 1);
    TRect rect1 = {0, 0, SelfWidth, SelfHeight};
    HWPEN_FadeRect(rect1, 60);

    [self setNeedsDisplay];
}


// 清空笔迹
- (void)clearStroke
{
    //memset(penColorD, 0x00, MEMORY);
    NSLog(@"~~ clearStroke");
    if (penColorD != nil) {
        NSLog(@"~~ 释放  pencolor");
        free(penColorD);
        penColorD = nil;
    }
    
    penColorTemp = false;
    [self setNeedsDisplay];
}


- (void)dealloc {
    NSLog(@"手写板 销毁");
}
@end
