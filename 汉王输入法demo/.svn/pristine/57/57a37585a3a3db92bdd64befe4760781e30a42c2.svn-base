//
//  GZExpressionKeyboard.m
//  HanvonKeyboard
//
//  Created by hanvon on 2017/12/18.
//  Copyright © 2017年 hanvon. All rights reserved.
//

#import "GZExpressionKeyboard.h"
#import "HorizontalPageFlowlayout.h"
#import "GZExpressionCollectionCell.h"
#import <AudioToolbox/AudioToolbox.h>


// 是宏定义的转换函数
#define EMOJI_CODE_TO_SYMBOL(x) ((((0x808080F0 | (x & 0x3F000) >> 4) | (x & 0xFC0) << 10) | (x & 0x1C0000) << 18) | (x & 0x3F) << 24);


@interface GZExpressionKeyboard()<UICollectionViewDelegate,UICollectionViewDataSource>
{
    NSTimer *timer; //定时器 删除按钮长按
    NSTimer *delay; //延时执行 长安删除操作
    BOOL isLock; //是否点击了锁定
    BOOL isFirst; //目前是否是第一栏 （emoji或颜文字选择）
}
@property (nonatomic, strong) UICollectionView *collectionView;
@property (nonatomic, strong) NSMutableArray *dataArr;
@property (nonatomic, strong) UICollectionView *collectionView_yan; //颜文字
@property (nonatomic, strong) NSArray *yanArr; //颜文字数组
@end

@implementation GZExpressionKeyboard

- (instancetype)initWithFrame:(CGRect)frame{
    self = [super initWithFrame:frame];
    if (self) {
        //创建view
        _dataArr = [[NSMutableArray alloc] init];
        _yanArr = [NSArray arrayWithObjects:@"~_~",@"@_@",@"-_-",@"|_|",@"$_$",@"!_!",@"*_*", nil];

        [self createData];
        [self createViews];
    }
    return self;
}


- (void)changeViewFrame:(CGRect)newFrame {
    self.frame = newFrame;

    //键盘布局 水平间距5 垂直间距7
    //键盘布局 顶部间距3 底部间距3
    CGFloat spaceX = 5.0;
    CGFloat spaceY = 7.0;
    CGFloat top = 3.0;
    CGFloat bottom = 3.0;

    CGFloat selectAra = 40; //导航栏高度

    CGFloat bottomViewH = 35; //底部固定视图高度
    CGFloat height = newFrame.size.height- selectAra - top - bottom - spaceY - bottomViewH; //表情视图高度

    //顶部视图
    UIView *topView = (UIView*)[self viewWithTag:100];
    topView.frame = CGRectMake(0, 0, SCREEN_WIDTH, selectAra);

    CGFloat topButtonW = 70;
    for (int i=0; i<2; i++) {
        UIButton *button = (UIButton*)[self viewWithTag:101+i];
        button.frame = CGRectMake(i*topButtonW, 0, topButtonW, selectAra);
    }

    //表情视图
    UIButton *button1 = (UIButton*)[self viewWithTag:101];
    //UIButton *button2 = (UIButton*)[self viewWithTag:102];
    if (button1.selected) {
        [_collectionView removeFromSuperview];
        _collectionView = nil;
        [self createEmoji:CGRectMake(0, selectAra + top, SCREEN_WIDTH, height)];
    }else {
        [_collectionView_yan removeFromSuperview];
        _collectionView_yan = nil;
        [self createEmoji_yan:CGRectMake(0, selectAra + top, SCREEN_WIDTH, height)];
    }
    //_collectionView.frame = CGRectMake(0, selectAra + top, SCREEN_WIDTH, height);
    [_collectionView reloadData];

    //底部视图
    CGFloat superviewY = newFrame.size.height- bottom - bottomViewH;
    CGFloat superviewW = newFrame.size.width - spaceX*2;
    UIView *superView = (UIView*)[self viewWithTag:120];
    superView.frame = CGRectMake(spaceX, superviewY, superviewW, bottomViewH);

    CGFloat supBttonW = superviewW/3.0;

    for (int i=0; i<3; i++) {
        GZFunctionButton_symbol_b *button = (GZFunctionButton_symbol_b*)[self viewWithTag:121+i];
        button.frame = CGRectMake(i*supBttonW, 0, supBttonW, bottomViewH);
    }
}

//手动停止计时器
- (void)stopTimer {
    if (delay) {
        [delay invalidate];
        delay = nil;
    }
    if (timer) {
        [timer invalidate];
        timer = nil;
    }
}


#pragma mark -- 创建
- (void)createData {
    // 使用同步操作，把所有的值获取后再返还数组。
    dispatch_sync(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0), ^{
        for (int i=0x1F600; i<=0x1F64F; i++) {
            if (i < 0x1F641 || i > 0x1F644) {
                int number = EMOJI_CODE_TO_SYMBOL(i);
                NSString *epressionStr = [[NSString alloc] initWithBytes:&number length:sizeof(number) encoding:NSUTF8StringEncoding];
                [_dataArr addObject:epressionStr];
            }
        }
    });
}

- (void)createViews {
    //键盘布局 水平间距5 垂直间距7
    //键盘布局 顶部间距3 底部间距3
    CGFloat spaceX = 5.0;
    CGFloat spaceY = 7.0;
    CGFloat top = 3.0;
    CGFloat bottom = 3.0;

    CGFloat selectAra = 40; //导航栏高度

    CGFloat bottomViewH = 35; //底部固定视图高度
    CGFloat height = self.frame.size.height- selectAra - top - bottom - spaceY - bottomViewH; //表情视图高度

    GZUserDefaults *share = [GZUserDefaults shareUserDefaults];
    NSString *skin = [share getGroupValueForKey:@"keyboardSkin"];
    GZKeyboardSkin *bac = [GZKeyboardSkin defaultKeyboardSkin];

    //顶部视图
    UIView *topView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, SCREEN_WIDTH, selectAra)];
    topView.backgroundColor = bac.backgroungColor_kb;
    topView.tag = 100;
    [self addSubview:topView];

    isFirst = YES;

    CGFloat topButtonW = 70;
    NSArray *topTitles = @[@"emoji",@"颜文字"];
    for (int i=0; i<2; i++) {
        UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];
        button.frame = CGRectMake(i*topButtonW, 0, topButtonW, selectAra);
        button.backgroundColor = [UIColor clearColor];
        //button.titleLabel.text = topTitles[i];
        button.titleLabel.font = [UIFont systemFontOfSize:16];
        [button setTitle:topTitles[i] forState:UIControlStateNormal];
        [button setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
        [button setTitleColor:float_Color_button_hightlight forState:UIControlStateSelected];
        button.tag = 101+i;
        [button addTarget:self action:@selector(didSelectTap:) forControlEvents:UIControlEventTouchUpInside];
        [topView addSubview:button];
        if (i==0) {
            button.selected = YES;
        }
    }

    //表情视图
    [self createEmoji:CGRectMake(0, selectAra + top, SCREEN_WIDTH, height)];

    //底部视图
    CGFloat superviewY = self.frame.size.height- bottom - bottomViewH;
    CGFloat superviewW = self.frame.size.width - spaceX*2;
    GZKeyboardSuspendView_bottom *superView = [[GZKeyboardSuspendView_bottom alloc] initWithFrame:CGRectMake(spaceX, superviewY, superviewW, bottomViewH)];
    [superView setViewStyleWithSkin:skin];
    [self addSubview:superView];
    superView.tag = 120;

    //NSArray *superViewSubs = [NSArray arrayWithObjects:@"返回",@"锁定",@"删除", nil];
    NSArray *images = [NSArray arrayWithObjects:@"keyboard_back",@"keyboard_unlock",@"keyboard_clear", nil];
    CGFloat supBttonW = superviewW/3.0;

    for (int i=0; i<3; i++) {
        GZFunctionButton_symbol_b *button = [GZFunctionButton_symbol_b buttonWithType:UIButtonTypeCustom];
        [button setButtonStyleWithSkin:skin];
        button.frame = CGRectMake(i*supBttonW, 0, supBttonW, bottomViewH);
        button.tag = 121+i;
        [button setImage:[UIImage imageNamed:images[i]] forState:UIControlStateNormal];
        [superView addSubview:button];

        if (i != 2) {
            [button addTarget:self action:@selector(didFuncTap:) forControlEvents:UIControlEventTouchUpInside];
        }else {
            [button addTarget:self action:@selector(didTouchDown) forControlEvents:UIControlEventTouchDown];
            [button addTarget:self action:@selector(didTouchUp) forControlEvents:UIControlEventTouchUpInside];
            [button addTarget:self action:@selector(didTouchUp) forControlEvents:UIControlEventTouchUpOutside]; //移动手指出按钮
        }
    }
}

- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView {
    return 1;
}
- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section {
    return _dataArr.count;
}
- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath {
    static NSString *cellID = @"expressionCollectionCell";
    GZExpressionCollectionCell *cell = (GZExpressionCollectionCell*)[collectionView dequeueReusableCellWithReuseIdentifier:cellID forIndexPath:indexPath];
    [cell setTitleText:_dataArr[indexPath.row]];

    GZKeyboardSkin *skin = [GZKeyboardSkin defaultKeyboardSkin];
    cell.backgroundColor = skin.backgroungColor_kb;//skin.backgroungColor_cd_subs;
    cell.titleLabel.backgroundColor = skin.backgroungColor_kb;//skin.backgroungColor_cd_btn;
    return cell;
}
- (void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath {
    GZExpressionCollectionCell *cell = (GZExpressionCollectionCell*)[collectionView cellForItemAtIndexPath:indexPath];
    cell.titleLabel.backgroundColor = float_Color_button_hightlight;
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW,(int64_t)(0.1 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        GZKeyboardSkin *skin = [GZKeyboardSkin defaultKeyboardSkin];
        cell.titleLabel.backgroundColor = skin.backgroungColor_kb;;
    });
    //[collectionView deselectItemAtIndexPath:indexPath animated:YES];

    [self playSound:1103];

    if (self.sendSelectedStr) {
        NSString *str =_dataArr[indexPath.row];
        self.sendSelectedStr(str);
    }

    //不是锁定状态 选择完了就返回  也就是removeself
    if (!isLock && self.sendSelectedFunc) {
        self.sendSelectedFunc(1);
    }
}
////当cell高亮时返回是否高亮
//- (BOOL)collectionView:(UICollectionView *)collectionView shouldHighlightItemAtIndexPath:(NSIndexPath *)indexPath {
//    return YES;
//}
//- (void)collectionView:(UICollectionView *)collectionView didHighlightItemAtIndexPath:(NSIndexPath *)indexPath {
//    GZExpressionCollectionCell *cell = (GZExpressionCollectionCell*)[collectionView cellForItemAtIndexPath:indexPath];
//    cell.titleLabel.backgroundColor = float_Color_button_hightlight;
//}
//- (void)collectionView:(UICollectionView *)collectionView didUnhighlightItemAtIndexPath:(NSIndexPath *)indexPath {
//    GZKeyboardSkin *skin = [GZKeyboardSkin defaultKeyboardSkin];
//
//    GZExpressionCollectionCell *cell = (GZExpressionCollectionCell*)[collectionView cellForItemAtIndexPath:indexPath];
//    cell.titleLabel.backgroundColor = skin.backgroungColor_kb;
//}

//emoji
- (void)createEmoji:(CGRect)rect {
    HorizontalPageFlowlayout *layout = [[HorizontalPageFlowlayout alloc] initWithRowCount:3 itemCountPerRow:7];
    [layout setColumnSpacing:0 rowSpacing:6 edgeInsets:UIEdgeInsetsMake(0, 0, 0, 0)];
    // layout.itemSize = CGSizeMake(ScreenWidth / 4, 60); //注意,此处设置的item的尺寸是理论值，实际是由行列间距、collectionView的内边距和宽高决定
    layout.minimumInteritemSpacing = 0;
    layout.minimumLineSpacing = 0;
    layout.scrollDirection = UICollectionViewScrollDirectionHorizontal;

    GZKeyboardSkin *skin = [GZKeyboardSkin defaultKeyboardSkin];

    _collectionView = [[UICollectionView alloc] initWithFrame:rect collectionViewLayout:layout];
    _collectionView.backgroundColor = skin.backgroungColor_kb;
    _collectionView.bounces = YES;
    _collectionView.pagingEnabled = YES;
    _collectionView.dataSource = self;
    _collectionView.delegate = self;
    [_collectionView registerClass:[GZExpressionCollectionCell class] forCellWithReuseIdentifier:@"expressionCollectionCell"];
    [self addSubview:self.collectionView];
}
//颜文字
- (void)createEmoji_yan:(CGRect)rect {
    HorizontalPageFlowlayout *layout = [[HorizontalPageFlowlayout alloc] initWithRowCount:3 itemCountPerRow:6];
    [layout setColumnSpacing:6 rowSpacing:6 edgeInsets:UIEdgeInsetsMake(0, 0, 0, 0)];
    // layout.itemSize = CGSizeMake(ScreenWidth / 4, 60); //注意,此处设置的item的尺寸是理论值，实际是由行列间距、collectionView的内边距和宽高决定
    layout.minimumInteritemSpacing = 0;
    layout.minimumLineSpacing = 0;
    layout.scrollDirection = UICollectionViewScrollDirectionHorizontal;

    GZKeyboardSkin *skin = [GZKeyboardSkin defaultKeyboardSkin];

    _collectionView_yan = [[UICollectionView alloc] initWithFrame:rect collectionViewLayout:layout];
    _collectionView_yan.backgroundColor = skin.backgroungColor_kb;
    _collectionView_yan.bounces = YES;
    _collectionView_yan.pagingEnabled = YES;
    _collectionView_yan.dataSource = self;
    _collectionView_yan.delegate = self;
    [_collectionView_yan registerClass:[GZExpressionCollectionCell class] forCellWithReuseIdentifier:@"expressionCollectionCell"];
    [self addSubview:self.collectionView_yan];
}

#pragma mark -- 按钮交互
- (void)didSelectTap:(UIButton*)tap {
    UIButton *button1 = (UIButton*)[self viewWithTag:101];
    UIButton *button2 = (UIButton*)[self viewWithTag:102];
    if (tap.tag == 101) {
        if (isFirst) {
            return;
        }else {
            isFirst = YES;
            button1.selected = YES;
            button2.selected = NO;
            [_dataArr removeAllObjects];
            [self createData];

            [self playSound:1103];

            CGRect rect = _collectionView_yan.frame;
            [self createEmoji:rect];

            [_collectionView_yan removeFromSuperview];
            _collectionView_yan = nil;
        }
    }else {
        if (!isFirst) {
            return;
        }else {
            isFirst = NO;
            button1.selected = NO;
            button2.selected = YES;
            [_dataArr removeAllObjects];
            _dataArr = [_yanArr mutableCopy];

            [self playSound:1103];

            CGRect rect = _collectionView.frame;
            [self createEmoji_yan:rect];

            [_collectionView removeFromSuperview];
            _collectionView = nil;
        }
    }
}
- (void)didFuncTap:(UIButton*)tap {
    UIButton *button = (UIButton*)tap;
    NSInteger tagN = button.tag;
    int type = 0; //1返回  2锁定
    switch (tagN) {
        case 121:
            type = 1;
            break;
        case 122:{
            type = 2;
            isLock = !isLock;
            if (isLock) {
                [button setImage:[UIImage imageNamed:@"keyboard_lock"] forState:UIControlStateNormal];
            }else {
                [button setImage:[UIImage imageNamed:@"keyboard_unlock"] forState:UIControlStateNormal];
            }
            break;
        }
        default:
            break;
    }

    if (type != 0 && self.sendSelectedFunc) {
        self.sendSelectedFunc(type);
    }
}

//删除按钮
- (void)didTouchDown {
    NSLog(@"didTouchDown");
    [self deleteActionStart]; //延时问题

    if (!delay) {
        delay = [NSTimer scheduledTimerWithTimeInterval:0.15 target:self selector:@selector(delayAction) userInfo:nil repeats:NO];
    }

    //不是锁定状态 选择完了就返回  也就是removeself
    if (!isLock && self.sendSelectedFunc) {
        self.sendSelectedFunc(1);
    }

}
- (void)didTouchUp {
    NSLog(@"didTouchUp");
    [delay invalidate];
    delay = nil;
    [timer invalidate];
    timer = nil;
    [self deleteActionStop];
}
- (void)delayAction {
    if (!timer) {
        timer = [NSTimer scheduledTimerWithTimeInterval:0.12 target:self selector:@selector(deleteActionStart) userInfo:nil repeats:YES];
    }
}
- (void)deleteActionStart {
    if (self.sendDeleteTap) {
        self.sendDeleteTap(YES);
    }
}
- (void)deleteActionStop {
    if (self.sendDeleteTap) {
        self.sendDeleteTap(NO);
    }
}


- (void)playSound:(int)soundID {
    GZUserDefaults *share = [GZUserDefaults shareUserDefaults];
    NSNumber *shock = [share getValueForKey:@"shock"];
    NSNumber *sound = [share getValueForKey:@"sound"];
    if ([shock isEqualToNumber:@1]) {
        AudioServicesPlaySystemSound(kSystemSoundID_Vibrate); //震动
    }
    if ([sound isEqualToNumber:@1]) {
        AudioServicesPlaySystemSound(soundID);
    }
}

#pragma mark -- dealloc
- (void)dealloc {
    NSLog(@"表情键盘 销毁");
    if (delay) {
        [delay invalidate];
        delay = nil;
    }
    if (timer) {
        [timer invalidate];
        timer = nil;
    }
    
    for (UIView *view in self.subviews) {
        [view removeFromSuperview];
    }

    for (int i=0; i<2; i++) {
        UIButton *button = (UIButton*)[self viewWithTag:101+i];
        if (button) {
            [button removeFromSuperview];
            button = nil;
        }
    }

    UIView *superView1 = (UIView*)[self viewWithTag:100];
    if (superView1) {
        [superView1 removeFromSuperview];
        superView1 = nil;
    }

    for (int i=0; i<3; i++) {
        UIButton *button = (UIButton*)[self viewWithTag:121+i];
        if (button) {
            [button removeFromSuperview];
            button = nil;
        }
    }

    UIView *superView = (UIView*)[self viewWithTag:120];
    if (superView) {
        [superView removeFromSuperview];
        superView = nil;
    }

    if (_collectionView) {
        [_collectionView removeFromSuperview];
        _collectionView = nil;
    }
    if (_dataArr) {
        [_dataArr removeAllObjects];
        _dataArr = nil;
    }
}



@end
