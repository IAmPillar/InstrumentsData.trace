//
//  GZCandidateMoreView.m
//  HanvonKeyboard
//
//  Created by hanvon on 2017/11/16.
//  Copyright © 2017年 hanvon. All rights reserved.
//

#import "GZCandidateMoreView.h"
#import "GZCandidateMoreCell.h"


@interface GZCandidateMoreView()<UICollectionViewDelegate,UICollectionViewDataSource>
{
    NSTimer *timer_more; //定时器 删除按钮长按
}
@property (nonatomic,strong) UICollectionView *collectionView;
@property (nonatomic,strong) NSMutableArray *dataArray;
@end


@implementation GZCandidateMoreView

- (instancetype)initWithFrame:(CGRect)frame andData:(NSArray*)dataArr{
    self = [super initWithFrame:frame];
    if (self) {
        //创建view
        self.backgroundColor = RGBA(210, 213, 219, 1.0);
        _dataArray = [dataArr mutableCopy];
        [self createViews:frame];
    }
    return self;
}

- (void)changeViewFrame:(CGRect)newFrame {

    self.frame = newFrame;

    //键盘布局 水平间距5 垂直间距7
    //键盘布局 顶部间距3 底部间距3
    CGFloat spaceX = 5.0;
    CGFloat spaceY = 7.0;
    CGFloat top = 3.0;
    CGFloat bottom = 3.0;

    CGFloat bottomViewH = 35; //底部固定视图高度

    //上端 文章collection
    CGFloat collecheight = newFrame.size.height - top - bottom - spaceY - bottomViewH; //collection高度
    CGFloat collecwidth = newFrame.size.width-spaceX*2;

    UIView *collectionsuperView = (UIView*)[self viewWithTag:100];
    collectionsuperView.frame = CGRectMake(spaceX, top, collecwidth, collecheight);


    _collectionView.frame = CGRectMake(0, 0, collecwidth, collecheight);

    //底部固定view
    CGFloat superviewY = top + collecheight + spaceY;

    UIView *superView = (UIView*)[self viewWithTag:110];
    superView.frame = CGRectMake(spaceX, superviewY, collecwidth, bottomViewH);

    CGFloat supBttonW = collecwidth/3.0;
    for (int i=0; i<3; i++) {
        UIButton *button = (UIButton*)[self viewWithTag:121+i];
        button.frame = CGRectMake(i*supBttonW, 0, supBttonW, bottomViewH);
    }

    [_collectionView reloadData];
}

//改变候选的展示内容
- (void)changeShowText:(NSArray*)textArr {
    if (_dataArray) {
        [_dataArray removeAllObjects];
        _dataArray = [textArr mutableCopy];
    }
    [_collectionView reloadData];
}


- (BOOL)stopTimer {
    if (timer_more) {
        NSLog(@"关闭timer");
        [timer_more invalidate];
        timer_more = nil;
        [self deleteActionStop];
        return YES;
    }
    [timer_more invalidate];
    timer_more = nil;
    return NO;
}


#pragma mark -- UI
- (void)createViews:(CGRect)frame {
    //键盘布局 水平间距5 垂直间距7
    //键盘布局 顶部间距3 底部间距3
    CGFloat spaceX = 5.0;
    CGFloat spaceY = 7.0;
    CGFloat top = 3.0;
    CGFloat bottom = 3.0;

    CGFloat bottomViewH = 35; //底部固定视图高度

    //上端 文章collection
    CGFloat collecheight = frame.size.height - top - bottom - spaceY - bottomViewH; //collection高度
    CGFloat collecwidth = frame.size.width-spaceX*2;

    UIView *collectionsuperView = [[UIView alloc] initWithFrame:CGRectMake(spaceX, top, collecwidth, collecheight)];
    collectionsuperView.backgroundColor = [UIColor lightGrayColor];
    collectionsuperView.layer.cornerRadius = 5;
    collectionsuperView.layer.shadowColor = [UIColor blackColor].CGColor;
    collectionsuperView.layer.shadowOpacity = 1.0;
    collectionsuperView.layer.shadowOffset = CGSizeMake(0, 3);
    collectionsuperView.layer.shadowRadius = 5;
//    collectionsuperView.layer.shadowPath = [UIBezierPath bezierPathWithRect:collectionsuperView.bounds].CGPath;
    [self addSubview:collectionsuperView];
    collectionsuperView.tag = 100;

    UICollectionViewFlowLayout *flow = [[UICollectionViewFlowLayout alloc] init];
    flow.scrollDirection = UICollectionViewScrollDirectionVertical; //垂直滑动方向
    flow.minimumInteritemSpacing = 1; //水平最小间距
    flow.minimumLineSpacing = 1;

    if (!_collectionView) {
        _collectionView = [[UICollectionView alloc] initWithFrame:CGRectMake(0, 0, collecwidth, collecheight) collectionViewLayout:flow];
        _collectionView.backgroundColor = [UIColor whiteColor];
        _collectionView.dataSource = self;
        _collectionView.delegate = self;
        _collectionView.bounces = YES;
        _collectionView.layer.cornerRadius = 5;
        _collectionView.showsVerticalScrollIndicator = NO;
        [_collectionView registerClass:[GZCandidateMoreCell class] forCellWithReuseIdentifier:@"candidateMoreCell"];
        [collectionsuperView addSubview:_collectionView];
    }

    //底部固定view
    CGFloat superviewY = top + collecheight + spaceY;

    UIView *superView = [[UIView alloc] initWithFrame:CGRectMake(spaceX, superviewY, collecwidth, bottomViewH)];
    superView.backgroundColor = [UIColor lightGrayColor];
    superView.layer.cornerRadius = 5;
    superView.layer.shadowColor = [UIColor blackColor].CGColor;
    superView.layer.shadowOpacity = 1.0;
    superView.layer.shadowOffset = CGSizeMake(0, 3);
    superView.layer.shadowRadius = 5;
//    superView.layer.shadowPath = [UIBezierPath bezierPathWithRect:superView.bounds].CGPath;
    [self addSubview:superView];
    superView.tag = 110;

    NSArray *superViewSubs = [NSArray arrayWithObjects:@"返回",@"重输",@"删除", nil];
    CGFloat supBttonW = collecwidth/3.0;
    for (int i=0; i<3; i++) {
        GZFunctionButton *button = [GZFunctionButton buttonWithType:UIButtonTypeSystem];
        button.backgroundColor = [UIColor clearColor];
        button.frame = CGRectMake(i*supBttonW, 0, supBttonW, bottomViewH);
        button.tag = 121+i;
        [superView addSubview:button];

        if (i == 0) {
            [button setImage:[UIImage imageNamed:@"keyboard_back"] forState:UIControlStateNormal];
        }else if (i == 1) {
            [button setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
            button.titleLabel.font = [UIFont systemFontOfSize:18];
            [button setTitle:superViewSubs[i] forState:UIControlStateNormal];
        }else {
            [button setImage:[UIImage imageNamed:@"keyboard_clear"] forState:UIControlStateNormal];
        }

        if (i != 2) {
            [button addTarget:self action:@selector(didFuncTap:) forControlEvents:UIControlEventTouchUpInside];
        }else {
            [button addTarget:self action:@selector(didTouchDown) forControlEvents:UIControlEventTouchDown];
            [button addTarget:self action:@selector(didTouchUp) forControlEvents:UIControlEventTouchUpInside];
            [button addTarget:self action:@selector(didTouchUp) forControlEvents:UIControlEventTouchDragInside]; //移动手指出按钮
        }
    }
}


//每个item之间的间距
- (CGFloat)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout*)collectionViewLayout minimumInteritemSpacingForSectionAtIndex:(NSInteger)section {
    return 1.0;
}
- (CGFloat)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout*)collectionViewLayout minimumLineSpacingForSectionAtIndex:(NSInteger)section {
    return 1.0;
}
//cell的大小
- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath *)indexPath {
    CGSize size = [[GZPublicMethod sharedPublicMethod] getStringSize:_dataArray[indexPath.row] withFont:[UIFont systemFontOfSize:18] wordSpace:@5 lineSpace:3.0];

    CGFloat spaceX = 5.0;
    CGFloat collecwidth = self.frame.size.width-spaceX*2;
    int lineNum = (int)ceilf(size.width/collecwidth);

    CGSize resultSize;
    if (lineNum > 1) {
        resultSize = CGSizeMake(collecwidth, size.height * (lineNum+15));
    }else {
        CGFloat ww = (collecwidth-3)/4.0;
        if (size.width < ww) {
            resultSize = CGSizeMake(ww, size.height+15);
        }else if (size.width <= ww*2 + 1) {
            resultSize = CGSizeMake(ww*2 + 1, size.height+15);
        }else if (size.width <= ww*3 +2) {
            resultSize = CGSizeMake(ww*3 + 2, size.height+15);
        }else {
            resultSize = CGSizeMake(collecwidth, size.height+15);
        }
    }

    return resultSize;
}
//定义每个Section 的 margin
-(UIEdgeInsets)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout insetForSectionAtIndex:(NSInteger)section {
    return UIEdgeInsetsMake(0, 0, 0, 0);//分别为上、左、下、右
}
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView {
    return 1;
}
- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section {
    return _dataArray.count;
}

- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath {
    static NSString *cellID = @"candidateMoreCell";
    GZCandidateMoreCell *cell = (GZCandidateMoreCell*)[collectionView dequeueReusableCellWithReuseIdentifier:cellID forIndexPath:indexPath];
    //cell.titleLabel.text = _dataArray[indexPath.row];
    [cell setTitleText:_dataArray[indexPath.row]];
    return cell;
}
- (void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath {
    GZCandidateMoreCell *cell = (GZCandidateMoreCell*)[collectionView cellForItemAtIndexPath:indexPath];
    cell.titleLabel.backgroundColor = RGBA(75, 143, 252, 1);
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW,(int64_t)(0.05 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        cell.titleLabel.backgroundColor = [UIColor whiteColor];
    });
    //[collectionView deselectItemAtIndexPath:indexPath animated:YES];

    [[GZSoundPlay defaultSoundPlay] playSystemSound:1105];

    if (self.sendSelectedStr) {
        NSString *str =_dataArray[indexPath.row];
        self.sendSelectedStr(str, (int)indexPath.row);
    }
}

//当cell高亮时返回是否高亮
- (BOOL)collectionView:(UICollectionView *)collectionView shouldHighlightItemAtIndexPath:(NSIndexPath *)indexPath {
    return YES;
}
- (void)collectionView:(UICollectionView *)collectionView didHighlightItemAtIndexPath:(NSIndexPath *)indexPath {
    NSLog(@"高亮");
    GZCandidateMoreCell *cell = (GZCandidateMoreCell*)[collectionView cellForItemAtIndexPath:indexPath];
    cell.titleLabel.backgroundColor = RGBA(75, 143, 252, 1);
}
- (void)collectionView:(UICollectionView *)collectionView didUnhighlightItemAtIndexPath:(NSIndexPath *)indexPath {
    NSLog(@"正常");
    GZCandidateMoreCell *cell = (GZCandidateMoreCell*)[collectionView cellForItemAtIndexPath:indexPath];
    cell.titleLabel.backgroundColor = [UIColor whiteColor];
}


#pragma mark 按钮交互
- (void)didFuncTap:(UIButton*)tap {
    UIButton *button = (UIButton*)tap;
    NSInteger tagN = button.tag;
    int type = 0; //1返回   2重输  3删除

    switch (tagN) {
        case 121:
            type = 1;
            break;
        case 122:{
            type = 2;
            break;
        }
        case 123:
            type = 3;
            break;
        default:
            break;
    }

    if (type != 0 && self.sendSelectedFunc) {
        self.sendSelectedFunc(type);
    }
}


//删除按钮---------------------------------
/*
 UIControlEventTouchDown即按钮按下时应触发的方法。
 实际使用过程中会出现延迟响应或间歇无响应，
 但是放开手指时会直接响应UIControlEventTouchDown、UIControlEventTouchUpInside两个方法
 touchesBegan不响应 不能用之获取按钮坐标
 */
- (void)didTouchDown {
    NSLog(@"didTouchDown");

    [self deleteActionStart]; //延时问题

    if (!timer_more) {
        timer_more = [NSTimer scheduledTimerWithTimeInterval:0.5 target:self selector:@selector(deleteActionStart) userInfo:nil repeats:NO];
    }
}
- (void)didTouchUp {
    NSLog(@"didTouchUp");
    [timer_more invalidate];
    timer_more = nil;
    [self deleteActionStop];
}

- (void)deleteActionStart {
    if (self.sendDeleteTap) {
        self.sendDeleteTap(YES);
    }
}
- (void)deleteActionStop {
    if (self.sendDeleteTap) {
        self.sendDeleteTap(NO);
    }
}


- (void)dealloc {
    NSLog(@"展示更多候选键盘 销毁");
    if (timer_more) {
        NSLog(@"timer_more 停止");
        [timer_more invalidate];
        timer_more = nil;
        [self deleteActionStop];
    }

    UIView *collectionsuperView = (UIView*)[self viewWithTag:100];
    if (collectionsuperView) {
        [collectionsuperView removeFromSuperview];
        collectionsuperView = nil;
    }

    UIView *superView = (UIView*)[self viewWithTag:110];
    if (superView) {
        [superView removeFromSuperview];
        superView = nil;
    }

    for (int i=0; i<3; i++) {
        UIButton *button = (UIButton*)[self viewWithTag:121+i];
        if (button) {
            [button removeFromSuperview];
            button = nil;
        }
    }
    if (_collectionView) {
        [_collectionView removeFromSuperview];
        _collectionView = nil;
    }
    if (_dataArray) {
        [_dataArray removeAllObjects];
        _dataArray = nil;
    }

    for (UIView *view in self.subviews) {
        [view removeFromSuperview];
    }
}



@end
