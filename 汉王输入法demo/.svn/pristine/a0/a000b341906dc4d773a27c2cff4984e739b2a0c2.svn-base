//*****************************************************************

#define HANWANG_INTEGRATED_DICT              0 //recognition dictionary. 0 separate dictionary .  1 non separate

#define MAX_POINT_NUM           (2048)       //the maximum points: 2048
#define MIN_REC_RAM_SIZE        (36*1024)    //the minimum RAM size request for HWR Engine

#define SINGLE_REC_RAM_SIZE     (36 * 1024 ) //the Ram size for single char
#define SENTENCE_REC_RAM_SIZE   (256*1024)   //the Ram size for freeStylus 
#define ENG_REC_RAM_SIZE        (600*1024)  //the Ram size for English 

///Definitions for Return value
#define HWERR_SUCCESS                   0		// sucess
#define HWERR_INVALID_PARAMETER         (-1)	// invalid parameter 
#define HWERR_NOT_ENOUGH_MEMORY         (-2)	// no enough memory
#define HWERR_INVALID_DATA              (-3)	// invalid data
#define HWERR_INVALID_LANGUAGE		    (-5)	// invalid language
#define HWERR_NOVALID_RESULT            (-20)   // no valid result 
#define HWERR_INVALID_REC_HANDLE        (-21)   // invalid Handle 
#define HWERR_POINTER_NOT_4BYTES_ALGN   (-22)   // pointer which is not 4 bytes align
#define HWERR_INVALID_RANGE             (-23)   // invalid recognition range
#define HWERR_INVALID_MODE              (-24)   // invalid recognition Mode



//Recognition Mode

#define HWRC_MODEL_MIN	1

#define HWRC_SINGLE     1   //中英文单字符识别
#define HWRC_SENTENCE   2   //中文短句识别
#define HWRC_SENTENCE_OVERLAP 3  //中文短句重叠写
#define HWRC_SENTENCE_OVERLAP_FREE  4  //自由写

#define HWRC_MODEL_MAX	4

//Recognition Language
#define HW_RC_LANGUAGE_CN 1
#define HW_RC_LANGUAGE_JP 2
#define HW_RC_LANGUAGE_KR 3
#define HW_RC_LANGUAGE_EN 4
#define HW_RC_LANGUAGE_CT 5
#define HW_RC_LANGUAGE_AUTO_CN_EN  6

#define    AUTO_LANG_CHS   0
#define    AUTO_LANG_ENG   1

#define HWRC_TIME_DEMO
//#define HWRC_YULONG
//#define HWRC_DEMO
#define HWRC_YULONG_SINGLE  0xEFF00

#define  HWAPI   //__declspec(dllexport)

#ifdef __cplusplus
extern "C"
{
#endif

//=======================================================================
//set workSpace which is used for recognition engine
//pHandle   [in]recognition handle,the size is 128 * sizeof(DWORD) 
//pcRam     [in] recognition ram space for recognition, which must be 4 bytes align
//iRamSize  [in] the ram size for recognition,it is different when using different recognition mode 
//return:    
//  HWERR_SUCCESS
//  HWERR_INVALID_REC_HANDLE
//  HWERR_INVALID_PARAMETER
//  HWERR_NOT_ENOUGH_MEMORY
HWAPI int HWRC_SetWorkSpace( unsigned int *pHandle, char *pcRam, int lRamSize );

//===============================================================================
//recognition . single char recognition is the default recogition mode ,you can modify the recognition mode by calling HWRC_SetRecogMode
//dwHandle  [in] recognition handle,the size is 128 * sizeof(DWORD)
//pnPoint   [in]pen data, such as (x1,y1),(x2,y2),...,(STROKEENDMARK,0),...,
//			   (STROKEENDMARK,0),(STROKEENDMARK,STROKEENDMARK),
//			   (STROKEENDMARK,0) is stroke end mark,
//			   (STROKEENDMARK,STROKEENDMARK) is character end mark.
//return:   
//  refer to the definitions for Return value
HWAPI int HWRC_Recognize( unsigned int * pHandle, short *pnPoint );

                    
//===============================================================================
//Get the recognition result(single recognition / freestylus recognition/multi-char for english recognition ) 
//iMaxCandNum  [in]the maximum candidates number you want
//pResult      [out] the result expressed using unicode , zero to separate the candidates,and 0 is the end mark of results;
//  it's content as following:
//	for single character recognize, it's content is as follow:
//      for example:
//      the single recognition result "一二三",which means "one two three", then pResult is:
      	//                   0x4E00,0x0000,  0x4E8C, 0x0000,   0x4E09,0x0000
				//                   0x0000 //end 
//			freestylus recognition result: 我的，我，一二， then pResult is:
//                          0x6211,0x7684,0x0000, 
//                          0x6211,0x0000,  
//                          0x4E00,0x4E8C, 0x0000
//                          0x0000 //end				
//      multi-char for english recognition, if you write one word and the number of result is two, for example: good god, then the pResult is:
//                          0x0067 0x006F 0x006F 0x0064 0x0000 
//                          0x0067 0x006F 0x0064 0x0000
//                          0x0000 //end
//             if you write two words,and every word has two candidates,for example: good god， Yes yea
//             the candidate of the first word is : 
//                      0x0067 0x006F 0x006F 0x0064 0x0000    good
//                      0x0067 0x006F 0x0064 0x0000           god
//                      0x0000
//                      then calling HWRC_GetNextBlockResult to get the candidates of the next word. if the result is zero, it's means having get all the candidates for all words.
//                      0x0059 0x0065 0x0073 0x0000           yes
//                      0x0059 0x0065 0x0061 0x0000           yea
//                      0x0000
//
//return: if pResult != NULL , 
//            ret >=0:   the number of candidates. zero means no candidate.
//            HWERR_INVALID_REC_HANDLE 
//            HWERR_INVALID_PARAMETER
//            HWERR_INVALID_RESULT 
//
//        if pResult ==NULL
//            ret >=0:  the size  which is needed for saving the results
//            HWERR_INVALID_REC_HANDLE 
//            HWERR_INVALID_PARAMETER
//            HWERR_INVALID_RESULT 
HWAPI int HWRC_GetResult( unsigned int *pHandle, int iMaxCandNum, char *pResult );

//======================================================
//set the recognition mode ,such as:  single char recognition;freestylus recognition;multi-char for english recognition
//pHandle  [in] recognition handle,the size is 128 * sizeof(DWORD)
//iType    [in] recognization mode£¬
//                HWRC_CHS_SINGLE for single char recognition
//                HWRC_CHS_SENTENCE for freestylus recognition
//                HWRC_LATIN_WORD for multi-char for english recognition
//return:   refer to the definitions for Return value
//      HWERR_SUCCESS
//      HWERR_INVALID_MODE 
//			HWERR_INVALID_REC_HANDLE hHandle
//
HWAPI int HWRC_SetRecogMode( unsigned int *pHandle, int iType );

//======================================================
//set recognition dictionary
//pbDic [in]:pointer of recognition dictionary, it's 4 bytes align
//return:   refer to the definitions for Return value
//      HWERR_SUCCESS
//      HWERR_INVALID_REC_HANDLE
//      HWERR_INVALID_PARAMETER
//      HWERR_POINTER_NOT_4BYTES_ALGN

HWAPI int HWRC_SetRecogDic( unsigned int *pHandle, const unsigned char *pbDic,int iLanguage);

//======================================================
//Set recognition Languange,if it is not set, it will be Simplified Chinese
//return:   refer to the definitions for Return value//Set recognition Range.if you don't call this function, the value of recognition range is set  by default value in dictionary
//for chinese,the default recognition range is ALC_SC_COMMON|ALC_SC_RARE; for multi-char for english recognition , the default range is ENG_COM_PUNC_SYMBOL|ENG_MULTIWORD
//
//if dwRange == 0, then set the recognition Range with default range
//NOTE: when setting recognition range, you must insure the recognition range is consistant with recognition mode,if not the setting is invalid
//for example: mode = HWRC_LATIN_WORD, range = ALC_PUNC_RARE, then the setting of recognition range is invalid 
//return:  
//      HWERR_SUCCESS
//      HWERR_INVALID_REC_HANDLE
//      HWERR_INVALID_RANGE
HWAPI int HWRC_SetRecogRange( unsigned int *pHandle, unsigned int dwRange );

#ifdef __cplusplus
}
#endif
