//
//  GZCandidateMoreView.m
//  HanvonKeyboard
//
//  Created by hanvon on 2017/11/16.
//  Copyright © 2017年 hanvon. All rights reserved.
//

#import "GZCandidateMoreView.h"
#import "GZCandidateMoreCell.h"
#import <AudioToolbox/AudioToolbox.h>


@interface GZCandidateMoreView()<UICollectionViewDelegate,UICollectionViewDataSource,UIScrollViewDelegate>
{
    NSTimer *timer_more; //定时器 删除按钮长按
    NSTimer *delay; //延迟执行 长安删除操作
}
@property (nonatomic,strong) UICollectionView *collectionView;
@property (nonatomic,copy) NSArray *dataArray;
@property (nonatomic,assign) BOOL isHasCompont; //是否具有拼音候选
@property (nonatomic,assign) int originalNum; //拼音按钮 上一次的数量
@property (nonatomic,assign) BOOL isLastCompont; //是否已经选择完成 最后一个候选拼音
@end


@implementation GZCandidateMoreView

- (instancetype)initWithFrame:(CGRect)frame andData:(NSArray*)dataArr hasPinyinCompont:(BOOL)hasCompont{
    self = [super initWithFrame:frame];
    if (self) {
        //创建view
        self.backgroundColor = Color_background_kb;
        _isHasCompont = hasCompont;
        _isLastCompont = NO;
        _dataArray = dataArr;
        [self createViews:frame];
    }
    return self;
}

- (void)changeViewFrame:(CGRect)newFrame {

    self.frame = newFrame;

    //键盘布局 水平间距5 垂直间距7
    //键盘布局 顶部间距3 底部间距3
    CGFloat spaceX = 5.0;
    CGFloat spaceY = 7.0;
    CGFloat top = 3.0;
    CGFloat bottom = 3.0;

    CGFloat bottomViewH = 35; //底部固定视图高度
    CGFloat topViewH = newFrame.size.height - top - bottom - spaceY - bottomViewH; //拼音候选、collection高度
    CGFloat collecW; //候选collection宽
    CGFloat collecX;
    if (!_isHasCompont) {
        collecW = newFrame.size.width;
        collecX = 0;
    }else {
        CGFloat compontW = (newFrame.size.width - 6*spaceX)/5.0; //左侧拼音候选宽
        collecW = newFrame.size.width - spaceX - compontW; //候选collection宽
        collecX = spaceX + compontW;
    }
    //候选区
    UIView *collectionsuperView = (UIView*)[self viewWithTag:100];
    collectionsuperView.frame = CGRectMake(collecX, top, collecW, topViewH);
    _collectionView.frame = CGRectMake(spaceX, 0, collecW-2*spaceX, topViewH);

    //底部固定view
    CGFloat superviewY = top + topViewH + spaceY;
    UIView *superView = (UIView*)[self viewWithTag:110];
    superView.frame = CGRectMake(spaceX, superviewY, newFrame.size.width-2*spaceX, bottomViewH);

    CGFloat supBttonW = (newFrame.size.width-2*spaceX)/3.0;
    for (int i=0; i<3; i++) {
        UIButton *button = (UIButton*)[self viewWithTag:121+i];
        button.frame = CGRectMake(i*supBttonW, 0, supBttonW, bottomViewH);
    }

    [_collectionView reloadData];
}

//改变候选的展示内容
- (void)changeShowText:(NSArray*)textArr {
    if (_dataArray) {
        _dataArray = textArr;
    }
    [_collectionView reloadData];
}

//改变拼音候选
- (void)changeShowCompont:(NSArray*)data {
    if (!_isHasCompont) {
        for (int i=0 ; i<_originalNum; i++) {
            GZSymbolButton *button = (GZSymbolButton*)[self viewWithTag:301+i];
            if (button) {
                [button removeFromSuperview];
                button = nil;
            }
            UILabel *line = (UILabel*)[self viewWithTag:201+i];
            if (line) {
                [line removeFromSuperview];
                line = nil;
            }
        }
        return;
    }

    if (_originalNum > 0) {
        int newNum = (int)data.count;

        if (_originalNum >= newNum) {
            //修改已存在按钮的title
            for (int i=0; i<newNum; i++) {
                GZSymbolButton *button = (GZSymbolButton*)[self viewWithTag:301+i];
                [button setTitle:data[i] forState:UIControlStateNormal];
            }

            //删除多余的按钮
            for (int i=newNum ; i<_originalNum; i++) {
                GZSymbolButton *button = (GZSymbolButton*)[self viewWithTag:301+i];
                [button removeFromSuperview];
                button = nil;

                UILabel *line = (UILabel*)[self viewWithTag:201+i];
                [line removeFromSuperview];
                line = nil;
            }

            //修改contentsize
            CGFloat spaceY = 7.0;
            CGFloat top = 3.0;
            CGFloat bottom = 3.0;
            CGFloat bottomViewH = 35; //底部固定视图高度
            CGFloat scrollButtonH = self.frame.size.height - top - bottom - spaceY - bottomViewH; //拼音候选高度
            CGFloat height = scrollButtonH/4.0; //功能按钮的高度
            CGFloat scrollSubsH = height * 0.8; //拼音按钮的高度
            UIScrollView *scroll = (UIScrollView*)[self viewWithTag:92];
            scroll.contentSize = CGSizeMake(scroll.contentSize.width, (scrollSubsH+0.5) * newNum);

            //重新赋值
            _originalNum = newNum;

        }else {
            //修改已存在按钮的title
            for (int i=0; i<_originalNum; i++) {
                GZSymbolButton *button = (GZSymbolButton*)[self viewWithTag:301+i];
                [button setTitle:data[i] forState:UIControlStateNormal];
                //                if ([data[i] length] >= 6) {
                //                    button.titleLabel.adjustsFontSizeToFitWidth = YES;
                //                }else {
                //                    button.titleLabel.adjustsFontSizeToFitWidth = NO;
                //                }
            }

            //创建缺少的按钮
            [self createPinyinSelectButton:data from:_originalNum to:newNum];
        }

        //重新赋值
        _originalNum = (int)data.count;

    }else {
        //重新创建
        _originalNum = (int)data.count;
        [self createPinyinSelectButton:data from:0 to:(int)data.count];
    }
}

//关闭拼音候选区域
- (void)closeCompontView:(BOOL)close {
    if (_isHasCompont && close) {
        _isHasCompont = NO;
        [self changeViewFrame:self.frame];
        [self changeShowCompont:nil];
    }
    if (!_isHasCompont && !close) {
        _isHasCompont = YES;
        [self changeViewFrame:self.frame];
        [self changeShowCompont:nil];
    }
}

//关闭or开启拼音候选区的交互
- (void)setCompontViewLast:(BOOL)isLastCompont {
    //    GZKeyboardSuspendView_bottom *scrollsuperView = (GZKeyboardSuspendView_bottom*)[self viewWithTag:91];
    //    scrollsuperView.userInteractionEnabled = userInteractionEnabled;
    _isLastCompont = isLastCompont;
}

//
- (BOOL)stopTimer {
    if (delay) {
        [delay invalidate];
        delay = nil;
    }
    if (timer_more) {
        NSLog(@"关闭timer");
        [timer_more invalidate];
        timer_more = nil;
        [self deleteActionStop];
        return YES;
    }
    [timer_more invalidate];
    timer_more = nil;
    return NO;
}


#pragma mark -- UI
//拼音候选
- (void)createPinyinSelectButton:(NSArray*)data from:(int)from to:(int)to {
    if (!data) {
        return;
    }

    //键盘布局 水平间距5 垂直间距7
    //键盘布局 顶部间距3 底部间距3
    CGFloat spaceX = 5.0;
    CGFloat spaceY = 7.0;
    CGFloat top = 3.0;
    CGFloat bottom = 3.0;

    CGFloat bottomViewH = 35; //底部固定视图高度
    CGFloat scrollButtonW = (self.frame.size.width - 6*spaceX)/5.0; //左侧拼音候选宽
    CGFloat scrollButtonH = self.frame.size.height - top - bottom - spaceY - bottomViewH; //拼音候选高度
    CGFloat height = scrollButtonH/4.0; //功能按钮的高度
    CGFloat scrollSubsH = height * 0.8; //拼音按钮的高度

    //GZUserDefaults *share = [GZUserDefaults shareUserDefaults];
    //NSString * skin = [share getGroupValueForKey:@"keyboardSkin"];

    //scroll父视图
    GZKeyboardSuspendView_bottom *scrollsuperView = (GZKeyboardSuspendView_bottom*)[self viewWithTag:91];
    if (!scrollsuperView) {
        scrollsuperView = [[GZKeyboardSuspendView_bottom alloc] initWithFrame:CGRectMake(spaceX, top, scrollButtonW, scrollButtonH)];
        //[scrollsuperView setViewStyleWithSkin:skin];
        scrollsuperView.backgroundColor = [UIColor colorWithHexString:float_Color_button_function alpha:1];
        scrollsuperView.layer.cornerRadius = 5;
        [self addSubview:scrollsuperView];
        scrollsuperView.tag = 91;
    }

    //拼音scroll
    UIScrollView *scroll = (UIScrollView*)[self viewWithTag:92];
    if (!scroll) {
        scroll = [[UIScrollView alloc] initWithFrame:CGRectMake(0, 0, scrollButtonW, scrollButtonH)];
        scroll.delegate = self;
        scroll.backgroundColor = [UIColor whiteColor];
        scroll.layer.cornerRadius = 5;
        scroll.showsVerticalScrollIndicator = NO;
        scroll.tag = 92;
        scroll.bounces = NO;
        [scrollsuperView addSubview:scroll];
    }
    scroll.contentSize = CGSizeMake(scrollButtonW, (scrollSubsH+0.5) * data.count);

    //添加拼音按钮
    for (int i=from; i<to; i++) {
        //分割线 多一条
        if (from > 0 && i == from) {
            UILabel *line = [[UILabel alloc] initWithFrame:CGRectMake(5, i*(scrollSubsH+0.5)-0.5, scrollButtonW-10, 0.5)];
            line.backgroundColor = [UIColor lightGrayColor];
            line.tag = 201+i;
            [scroll addSubview:line];
        }
        //按钮
        GZSymbolButton *button = [GZSymbolButton buttonWithType:UIButtonTypeSystem];
        //[button setButtonStyleWithSkin:skin];
        [button setBackgroundImage:[UIImage imageNamed:@"key_hightlight"] forState:UIControlStateHighlighted];
        [button setBackgroundColor:[UIColor whiteColor]];
        button.layer.cornerRadius = 5;
        [button setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];

        [button setTitle:data[i] forState:UIControlStateNormal];
        button.frame = CGRectMake(0, i*(scrollSubsH+0.5), scrollButtonW, scrollSubsH);
        button.tag = 301+i;
        [button addTarget:self action:@selector(disSelectPinyin:) forControlEvents:UIControlEventTouchUpInside];
        [scroll addSubview:button];
        //        CGFloat fontN;
        //        if (IS_IPAD_ONLYIphone) {
        //            fontN = 18;
        //        }else if (IS_IPHONE_6P || IS_IPHONE_X) {
        //            fontN = 18;
        //        }else if (IS_IPHONE_6) {
        //            fontN = 16;
        //        }else {
        //            fontN = 14;
        //        }
        //        button.titleLabel.font = [UIFont systemFontOfSize:fontN];
        //        if ([data[i] length] >= 6) {
        //            button.titleLabel.adjustsFontSizeToFitWidth = YES;
        //        }else {
        //            button.titleLabel.adjustsFontSizeToFitWidth = NO;
        //        }
        //分割线
        if (i != to-1) {
            UILabel *line = [[UILabel alloc] initWithFrame:CGRectMake(5, button.frame.origin.y + scrollSubsH, scrollButtonW-10, 0.5)];
            line.backgroundColor = [UIColor lightGrayColor];
            [scroll addSubview:line];
            if (from > 0) {
                line.tag = 202+i; //多一条分隔
            }else {
                line.tag = 201+i;
            }
        }
    }
}

//候选collection
- (void)createViews:(CGRect)frame {
    //键盘布局 水平间距5 垂直间距7
    //键盘布局 顶部间距3 底部间距3
    CGFloat spaceX = 5.0;
    CGFloat spaceY = 7.0;
    CGFloat top = 3.0;
    CGFloat bottom = 3.0;

    CGFloat bottomViewH = 35; //底部固定视图高度
    CGFloat topViewH = frame.size.height - top - bottom - spaceY - bottomViewH; //拼音候选、collection高度
    CGFloat collecW; //候选collection宽
    CGFloat collecX;
    if (!_isHasCompont) {
        collecW = frame.size.width;
        collecX = 0;
    }else {
        CGFloat compontW = (frame.size.width - 6*spaceX)/5.0; //左侧拼音候选宽
        collecW = frame.size.width - spaceX - compontW; //候选collection宽
        collecX = spaceX + compontW;
    }

    //GZUserDefaults *share = [GZUserDefaults shareUserDefaults];
    //NSString *skin = [share getGroupValueForKey:@"keyboardSkin"];

    //上端 拼音候选

    //上端 候选collection
    GZKeyboardSuspendView *collectionsuperView = [[GZKeyboardSuspendView alloc] initWithFrame:CGRectMake(collecX, top, collecW, topViewH)];
    //[collectionsuperView setViewStyleWithSkin:skin];
    collectionsuperView.backgroundColor = Color_background_kb;
    collectionsuperView.layer.cornerRadius = 5;
    [self addSubview:collectionsuperView];
    collectionsuperView.tag = 100;

    UICollectionViewFlowLayout *flow = [[UICollectionViewFlowLayout alloc] init];
    flow.scrollDirection = UICollectionViewScrollDirectionVertical; //垂直滑动方向
    flow.minimumInteritemSpacing = 1; //水平最小间距
    flow.minimumLineSpacing = 1;

    if (!_collectionView) {
        //GZKeyboardSkin *sk = [GZKeyboardSkin defaultKeyboardSkin];

        _collectionView = [[UICollectionView alloc] initWithFrame:CGRectMake(spaceX, 0, collecW-2*spaceX, topViewH) collectionViewLayout:flow];
        _collectionView.backgroundColor = Color_background_kb;
        _collectionView.dataSource = self;
        _collectionView.delegate = self;
        _collectionView.bounces = YES;
        _collectionView.layer.cornerRadius = 5;
        _collectionView.showsVerticalScrollIndicator = NO;
        [_collectionView registerClass:[GZCandidateMoreCell class] forCellWithReuseIdentifier:@"candidateMoreCell"];
        [collectionsuperView addSubview:_collectionView];
    }

    //底部固定view
    CGFloat superviewY = top + topViewH + spaceY;

    GZKeyboardSuspendView_bottom *superView = [[GZKeyboardSuspendView_bottom alloc] initWithFrame:CGRectMake(spaceX, superviewY, frame.size.width-2*spaceX, bottomViewH)];
    //[superView setViewStyleWithSkin:skin];
    superView.backgroundColor = [UIColor colorWithHexString:float_Color_button_function alpha:1];
    superView.layer.cornerRadius = 5;
    [self addSubview:superView];
    superView.tag = 110;

    NSArray *superViewSubs = [NSArray arrayWithObjects:@"返回",@"重输",@"删除", nil];
    CGFloat supBttonW = (frame.size.width-2*spaceX)/3.0;
    for (int i=0; i<3; i++) {
        GZFunctionButton_symbol_b *button = [GZFunctionButton_symbol_b buttonWithType:UIButtonTypeCustom];
        //[button setButtonStyleWithSkin:skin];

        [button setBackgroundImage:[UIImage imageNamed:@"key_hightlight"] forState:UIControlStateHighlighted];
        [button setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];

        button.frame = CGRectMake(i*supBttonW, 0, supBttonW, bottomViewH);
        button.tag = 121+i;
        [superView addSubview:button];

        if (i == 0) {
            [button setImage:[UIImage imageNamed:@"keyboard_back"] forState:UIControlStateNormal];
        }else if (i == 1) {
            [button setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
            button.titleLabel.font = [UIFont systemFontOfSize:18];
            [button setTitle:superViewSubs[i] forState:UIControlStateNormal];
        }else {
            [button setImage:[UIImage imageNamed:@"keyboard_clear"] forState:UIControlStateNormal];
        }

        if (i != 2) {
            [button addTarget:self action:@selector(didFuncTap:) forControlEvents:UIControlEventTouchUpInside];
        }else {
            [button addTarget:self action:@selector(didTouchDown) forControlEvents:UIControlEventTouchDown];
            [button addTarget:self action:@selector(didTouchUp) forControlEvents:UIControlEventTouchUpInside];
            [button addTarget:self action:@selector(didTouchUp) forControlEvents:UIControlEventTouchUpOutside]; //移动手指出按钮
        }
    }
}


//每个item之间的间距
- (CGFloat)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout*)collectionViewLayout minimumInteritemSpacingForSectionAtIndex:(NSInteger)section {
    return 1.0;
}
- (CGFloat)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout*)collectionViewLayout minimumLineSpacingForSectionAtIndex:(NSInteger)section {
    return 1.0;
}
//cell的大小
- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath *)indexPath {
    CGSize size = [[GZPublicMethod sharedPublicMethod] getStringSize:_dataArray[indexPath.row] withFont:[UIFont systemFontOfSize:16] wordSpace:@2 lineSpace:3.0];

    CGFloat spaceX = 5.0;
    CGFloat collecW; //候选collection宽
    if (!_isHasCompont) {
        collecW = self.frame.size.width-2*spaceX;
    }else {
        CGFloat compontW = (self.frame.size.width - 6*spaceX)/5.0; //左侧拼音候选宽
        collecW = self.frame.size.width - spaceX - compontW - 2*spaceX;
    }

    int lineNum = (int)ceilf(size.width/collecW);

    if (lineNum > 1) {
        return CGSizeMake(collecW, size.height*lineNum+5);
    }

    CGFloat cellNum = 4.0; //每行最多放几个cell
    CGFloat ww = (collecW-cellNum)/cellNum; //cell最小宽度 =（collection宽-间距）/最大数量

    //下一个候选的站位宽
    int nextNum = 0;
    if (indexPath.row < _dataArray.count-1) {
        CGSize size_next = [[GZPublicMethod sharedPublicMethod] getStringSize:_dataArray[indexPath.row+1] withFont:[UIFont systemFontOfSize:16] wordSpace:@2 lineSpace:3.0];
        int lineNum_next = (int)ceilf(size_next.width/collecW);
        if (lineNum_next > 1) {
            nextNum = 4;
        }else {
            if (size_next.width <= ww) {
                nextNum = 1;
            }else if (size_next.width <= ww*2 + 1) {
                nextNum = 2;
            }else {
                nextNum = 4;
            }
        }
    }

    //下一个的下一个候选的站位宽
    int nextNum_next = 0;
    if (indexPath.row < _dataArray.count-2) {
        CGSize size_next = [[GZPublicMethod sharedPublicMethod] getStringSize:_dataArray[indexPath.row+2] withFont:[UIFont systemFontOfSize:16] wordSpace:@2 lineSpace:3.0];
        int lineNum_next = (int)ceilf(size_next.width/collecW);
        if (lineNum_next > 1) {
            nextNum_next = 4;
        }else {
            CGFloat ww = (collecW-cellNum)/cellNum; //cell最小宽度 =（collection宽-间距）/最大数量
            if (size_next.width <= ww) {
                nextNum_next = 1;
            }else if (size_next.width <= ww*2 + 1) {
                nextNum_next = 2;
            }else {
                nextNum_next = 4;
            }
        }
    }

    CGSize resultSize;
    if (size.width <= ww) {
        if (nextNum == 4) {
            resultSize = CGSizeMake(collecW, size.height+15);
        }else if (nextNum == 2) {
            if (nextNum_next == 2 || nextNum_next == 4) {
                resultSize = CGSizeMake(collecW, size.height+15);
            }else {
                resultSize = CGSizeMake(ww, size.height+15);
            }
        }else {
            if (nextNum_next == 4) {
                resultSize = CGSizeMake(collecW, size.height+15);
            }else {
                resultSize = CGSizeMake(ww, size.height+15);
            }
        }
    }else if (size.width <= ww*2 + 1) {
        if (nextNum == 4) {
            resultSize = CGSizeMake(collecW, size.height+15);
        }else if (nextNum == 2) {
            resultSize = CGSizeMake(ww*2 + 1, size.height+15);
        }else {
            if (nextNum_next == 1) {
                resultSize = CGSizeMake(ww*2 + 1, size.height+15);
            }else {
                resultSize = CGSizeMake(collecW, size.height+15);
            }
        }
    }else {
        resultSize = CGSizeMake(collecW, size.height+15);
    }

    return resultSize;
}
//定义每个Section 的 margin
-(UIEdgeInsets)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout insetForSectionAtIndex:(NSInteger)section {
    return UIEdgeInsetsMake(0, 0, 0, 0);//分别为上、左、下、右
}
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView {
    return 1;
}
- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section {
    return _dataArray.count;
}

- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath {
    static NSString *cellID = @"candidateMoreCell";
    GZCandidateMoreCell *cell = (GZCandidateMoreCell*)[collectionView dequeueReusableCellWithReuseIdentifier:cellID forIndexPath:indexPath];
    //cell.titleLabel.text = _dataArray[indexPath.row];
    [cell setTitleText:_dataArray[indexPath.row]];

    //    GZKeyboardSkin *skin = [GZKeyboardSkin defaultKeyboardSkin];
    cell.backgroundColor = [UIColor whiteColor];
    cell.titleLabel.textColor = [UIColor blackColor];
    cell.titleLabel.backgroundColor = [UIColor clearColor];
    return cell;
}
- (void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath {
    GZCandidateMoreCell *cell = (GZCandidateMoreCell*)[collectionView cellForItemAtIndexPath:indexPath];
    cell.titleLabel.backgroundColor = float_Color_button_hightlight;
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW,(int64_t)(0.01 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        cell.titleLabel.backgroundColor = [UIColor whiteColor];
    });
    //[collectionView deselectItemAtIndexPath:indexPath animated:YES];

    [self playSound:1105];

    if (self.sendSelectedStr) {
        NSString *str =_dataArray[indexPath.row];
        self.sendSelectedStr(str, (int)indexPath.row);
    }
}

//当cell高亮时返回是否高亮
- (BOOL)collectionView:(UICollectionView *)collectionView shouldHighlightItemAtIndexPath:(NSIndexPath *)indexPath {
    return YES;
}
- (void)collectionView:(UICollectionView *)collectionView didHighlightItemAtIndexPath:(NSIndexPath *)indexPath {
    //NSLog(@"高亮");
    GZCandidateMoreCell *cell = (GZCandidateMoreCell*)[collectionView cellForItemAtIndexPath:indexPath];
    cell.titleLabel.backgroundColor = float_Color_button_hightlight;
}
- (void)collectionView:(UICollectionView *)collectionView didUnhighlightItemAtIndexPath:(NSIndexPath *)indexPath {
    //NSLog(@"正常");
    GZCandidateMoreCell *cell = (GZCandidateMoreCell*)[collectionView cellForItemAtIndexPath:indexPath];
    cell.titleLabel.backgroundColor = [UIColor whiteColor];
}


#pragma mark 按钮交互
//拼音选择
- (void)disSelectPinyin:(UIButton*)sender {
    if (!_isHasCompont) {
        return;
    }

    int selectIndex = (int)sender.tag - 301;
    NSString *selectStr = sender.titleLabel.text;

    if (selectIndex >= 0 && selectStr.length != 0 && self.sendSelectedConpont) {
        self.sendSelectedConpont(selectStr, selectIndex, _isLastCompont);
    }
}

//底部按钮
- (void)didFuncTap:(UIButton*)tap {
    UIButton *button = (UIButton*)tap;
    NSInteger tagN = button.tag;
    int type = 0; //1返回   2重输  3删除

    switch (tagN) {
        case 121:
            type = 1;
            break;
        case 122:{
            type = 2;
            break;
        }
        case 123:
            type = 3;
            break;
        default:
            break;
    }

    if (type != 0 && self.sendSelectedFunc) {
        self.sendSelectedFunc(type);
    }
}


//删除按钮
- (void)didTouchDown {
    NSLog(@"didTouchDown");

    [self deleteActionStart]; //延时问题

    if (!delay) {
        delay = [NSTimer scheduledTimerWithTimeInterval:0.15 target:self selector:@selector(delayAction) userInfo:nil repeats:NO];
    }
}
- (void)didTouchUp {
    NSLog(@"didTouchUp");
    [delay invalidate];
    delay = nil;
    [timer_more invalidate];
    timer_more = nil;
    [self deleteActionStop];
}
- (void)delayAction {
    if (!timer_more) {
        timer_more = [NSTimer scheduledTimerWithTimeInterval:0.5 target:self selector:@selector(deleteActionStart) userInfo:nil repeats:NO];
    }
}
- (void)deleteActionStart {
    if (self.sendDeleteTap) {
        self.sendDeleteTap(YES);
    }
}
- (void)deleteActionStop {
    if (self.sendDeleteTap) {
        self.sendDeleteTap(NO);
    }
}


- (void)playSound:(int)soundID {
    if ([[GZPublicMethod sharedPublicMethod] isAllowFullAccess]) {
        GZUserDefaults *share = [GZUserDefaults shareUserDefaults];
        NSNumber *shock = [share getValueForKey:@"shock"];
        NSNumber *sound = [share getValueForKey:@"sound"];
        if ([shock isEqualToNumber:@1]) {
            AudioServicesPlaySystemSound(kSystemSoundID_Vibrate); //震动
        }
        if ([sound isEqualToNumber:@1]) {
            AudioServicesPlaySystemSound(soundID);
        }
    }
}



- (void)dealloc {
    NSLog(@"展示更多候选键盘 销毁");
    if (delay) {
        [delay invalidate];
        delay = nil;
    }
    if (timer_more) {
        NSLog(@"timer_more 停止");
        [timer_more invalidate];
        timer_more = nil;
        [self deleteActionStop];
    }

    UIView *collectionsuperView = (UIView*)[self viewWithTag:100];
    if (collectionsuperView) {
        [collectionsuperView removeFromSuperview];
        collectionsuperView = nil;
    }

    UIView *superView = (UIView*)[self viewWithTag:110];
    if (superView) {
        [superView removeFromSuperview];
        superView = nil;
    }

    for (int i=0; i<3; i++) {
        UIButton *button = (UIButton*)[self viewWithTag:121+i];
        if (button) {
            [button removeFromSuperview];
            button = nil;
        }
    }
    if (_collectionView) {
        [_collectionView removeFromSuperview];
        _collectionView = nil;
    }
    if (_dataArray) {
        _dataArray = nil;
    }

    for (UIView *view in self.subviews) {
        [view removeFromSuperview];
    }

    //拼音候选
    GZKeyboardSuspendView_bottom *scrollsuperView = (GZKeyboardSuspendView_bottom*)[self viewWithTag:91];
    if (scrollsuperView) {
        [scrollsuperView removeFromSuperview];
        scrollsuperView = nil;
    }
    UIScrollView *scroll = (UIScrollView*)[self viewWithTag:92];
    if (scroll) {
        [scroll removeFromSuperview];
        scroll = nil;
    }
    for (int i=0; i<_originalNum; i++) {
        GZSymbolButton *button = (GZSymbolButton*)[self viewWithTag:301+i];
        if (button) {
            [button removeFromSuperview];
            button = nil;
        }
        UILabel *line = (UILabel*)[self viewWithTag:201+i];
        if (line) {
            [line removeFromSuperview];
            line = nil;
        }
    }

    self.sendSelectedStr = nil;
    self.sendSelectedConpont = nil;
    self.sendSelectedFunc = nil;
    self.sendDeleteTap = nil;

    [self removeFromSuperview];
}



@end
