//
//  GZCandidateBarView.m
//  HanvonKeyboard
//
//  Created by hanvon on 2017/11/4.
//  Copyright © 2017年 hanvon. All rights reserved.
//

#import "GZCandidateBarView.h"
#import "GZButton+GZEnlargeEdge.h"
#import "UIColor+GZColorHex.h"

#define wordFont [UIFont systemFontOfSize:18]; //按钮字号
#define pinyinHeight 15.0 //拼音串的高度
#define lineHeight 0.5 //分割线高度

@interface GZCandidateBarView()
@property (nonatomic,strong) NSArray *data;
@property (nonatomic,assign) BOOL isShowMore; //是否是展示更多候选 状态
@property (nonatomic,assign) BOOL changeToDelete; //更多候选按钮 是否转成删除功能
@end


@implementation GZCandidateBarView

- (instancetype)initWithFrame:(CGRect)frame {
    self = [super initWithFrame:frame];
    if (self) {
        //创建view
        self.layer.borderWidth = lineHeight;
        self.layer.borderColor = [Color_background_kb CGColor];

        _isShowMore = NO;
        //创建固定view
        [self createFixedUI];
    }
    return self;
}

//改变拼音
- (void)changeShowPinyin:(NSString *)pinyin {//} andRange:(NSRange)range {

    if (!pinyin || pinyin.length == 0) {
        UILabel *PinyinLabel = (UILabel*)[self viewWithTag:10];
        [PinyinLabel removeFromSuperview];
        return;
    }

    CGFloat left = 7.0;
    CGFloat height = pinyinHeight; //拼音的高度
    CGFloat showButtonH = self.frame.size.height; //展开更多的宽高

    GZKeyboardSkin *skin = [GZKeyboardSkin defaultKeyboardSkin];

    //拼音label
    UILabel *PinyinLabel = (UILabel*)[self viewWithTag:10];
    if (!PinyinLabel) {
        PinyinLabel = [[UILabel alloc] initWithFrame:CGRectMake(left, 0, self.frame.size.width-showButtonH-left, height)];
        PinyinLabel.backgroundColor = skin.backgroungColor_cd_subs;;
        PinyinLabel.font = [UIFont systemFontOfSize:11];
        PinyinLabel.textAlignment = NSTextAlignmentLeft;
        PinyinLabel.textColor = [UIColor blackColor];
        [self addSubview:PinyinLabel];
        PinyinLabel.tag = 10;
    }

    PinyinLabel.text = pinyin;
    //PinyinLabel.attributedText = [self addUnderlineWithPinyin:pinyin andRange:range];

    //固定view在最上层
    [self setToFront];
}

//改变候选的展示内容
- (void)changeShowText:(NSArray*)textArr {
    if (!textArr || textArr.count == 0) {
        //清除最后一次的所以按钮
        for (int i=0 ; i<_data.count; i++) {
            GZCadidateButton *button = (GZCadidateButton*)[self viewWithTag:130+i];
            [button setTitle:@"" forState:UIControlStateNormal];
            button.hidden = YES;
        }
        return;
    }

    UIScrollView *candidateView = (UIScrollView*)[self viewWithTag:6];

    //scroll偏移回起始
    [UIView animateWithDuration:0.3 animations:^{
        candidateView.contentOffset = CGPointMake(0, 0);
    }];


    int originNum = (int)_data.count; //最后一次的按钮个数
    int newNum; //本次的按钮个数
    if (textArr.count > 30) {
        newNum = 30;
    }else {
        newNum = (int)textArr.count;
    }

    _data = [textArr copy];
    textArr = nil;
    
    CGFloat left = 7.0;
    CGFloat height = self.frame.size.height-pinyinHeight-lineHeight; //候选按钮的高度
    CGFloat y = pinyinHeight+lineHeight; //候选按钮的y
    CGFloat space = 20.0; //候选按钮的间距
    UIFont *font = wordFont;//[UIFont systemFontOfSize:16]; //按钮字号
    CGFloat showButtonH = height; //展开更多按钮的宽高
    CGFloat candidateShowWidth = self.frame.size.width - showButtonH; //候选区域的总宽度

    //按钮的父视图
    //GZUserDefaults *share = [GZUserDefaults shareUserDefaults];
    //NSString *skinName = [share getGroupValueForKey:@"keyboardSkin"];
    GZKeyboardSkin *skin = [GZKeyboardSkin defaultKeyboardSkin];

    if (!candidateView) {
        candidateView = [[UIScrollView alloc] initWithFrame:CGRectMake(0, y, candidateShowWidth, height)];
        candidateView.contentOffset = CGPointMake(0, 0);
        candidateView.bounces = YES;
        candidateView.showsHorizontalScrollIndicator = NO; //水平
        candidateView.showsVerticalScrollIndicator = NO; //垂直
        candidateView.pagingEnabled = NO;
//        candidateView.delegate = self;
        candidateView.backgroundColor = skin.backgroungColor_cd_subs;
        [self addSubview:candidateView];
        candidateView.tag = 6;
    }


    //候选按钮

    //最后一次按钮数量为0 重新创建
    if (originNum == 0) {
        [self createCandidateButton:_data withLeft:left from:0 to:newNum];
        //固定view在最上层
        [self setToFront];
        return;
    }

    CGSize size; //按钮文字宽度

    //最后一次按钮数量不为0 存在候选按钮
    if (originNum >= newNum) {
        //修改已存在按钮的title
        for (int i=0; i<newNum; i++) {
            GZCadidateButton *button = (GZCadidateButton*)[self viewWithTag:130+i];
            [button setTitle:_data[i] forState:UIControlStateNormal];

            size = [[GZPublicMethod sharedPublicMethod] getStringSize:_data[i] withFont:font wordSpace:@(3) lineSpace:3.0];
            button.frame = CGRectMake(left, 0, size.width, height); //width*1.4
            [button setEnlargeEdgeWithTop:2.0 right:5.0 bottom:2.0 left:5.0];

            CGFloat buttonW = button.frame.size.width;
            left = left + buttonW + space;

            button.hidden = NO;
        }

        //多余的按钮 显示文字置空 并隐藏
        for (int i=newNum ; i<originNum; i++) {
            GZCadidateButton *button = (GZCadidateButton*)[self viewWithTag:130+i];
            [button setTitle:@"" forState:UIControlStateNormal];
            button.hidden = YES;
        }

        //修改contentsize
        //CGFloat lastW = size.width;
        candidateView.contentSize = CGSizeMake(left,height);

    }else {
        //修改已存在按钮的title
        int fromNum = 0;
        for (int i=0; i<newNum; i++) {
            GZCadidateButton *button = (GZCadidateButton*)[self viewWithTag:130+i];

            if (button) {
                [button setTitle:_data[i] forState:UIControlStateNormal];

                size = [[GZPublicMethod sharedPublicMethod] getStringSize:_data[i] withFont:font wordSpace:@(3) lineSpace:3.0];
                button.frame = CGRectMake(left, 0, size.width, height); //width*1.4
                [button setEnlargeEdgeWithTop:2.0 right:5.0 bottom:2.0 left:5.0];

                CGFloat buttonW = button.frame.size.width;
                left = left + buttonW + space;

                fromNum ++;

                button.hidden = NO;
            }else {
                continue;
            }
        }

        //修改缺少的按钮
        [self createCandidateButton:_data withLeft:left from:fromNum to:newNum];
    }

    //固定view在最上层
    [self setToFront];
}

//是否存在候选内容
- (BOOL)isTabBarHasData {
    for (UIButton *bbt in self.subviews) {
        if (bbt) {
            return YES;
        }
    }
    return NO;
}

//是否有拼音
- (BOOL)isTabBarHasPinyin {
    UILabel *PinyinLabel = (UILabel*)[self viewWithTag:10];
    NSString *string = PinyinLabel.text;
    if (string != nil && string.length != 0) {
        string = nil;
        return YES;
    }
    string = nil;
    return NO;
}

//scroll初始化位置
- (void)scrollToTop {
    UIScrollView *candidateView = (UIScrollView*)[self viewWithTag:6];
    [UIView animateWithDuration:0.3 animations:^{
        candidateView.contentOffset = CGPointMake(0, 0);
    }];
}


//改变展示更多 按钮   0收起 1展示更多
- (void)changeShowMoreButton:(int)type {
    UIButton *moreButton = (UIButton*)[self viewWithTag:7];
    if (!moreButton) {
        return;
    }

    if (type == 0) {
        //收起
        _isShowMore = NO;
        [moreButton setImage:[UIImage imageNamed:@"keyboard_down"] forState:UIControlStateNormal];
    }else if (type == 1) {
        //展开
        _isShowMore = YES;
        [moreButton setImage:[UIImage imageNamed:@"keyboard_up"] forState:UIControlStateNormal];
    }else {

    }
}

//改变展示更多按钮 成为删除按钮 1添加删除 0移除删除并移除tabbar
- (void)changeShowMoreToDelete:(BOOL)changeToDelete {
    _changeToDelete = changeToDelete;

    UIButton *moreButton = (UIButton*)[self viewWithTag:7];

    if (!changeToDelete) {
        //移除tabbar 并移除删除按钮
        if (moreButton) {
            if (!_isShowMore) {
                [moreButton setImage:[UIImage imageNamed:@"keyboard_down"] forState:UIControlStateNormal];
            }else {
                [moreButton setImage:[UIImage imageNamed:@"keyboard_up"] forState:UIControlStateNormal];
            }
            [moreButton setTitle:nil forState:UIControlStateNormal];
        }
    }else {
        //添加删除按钮
        [moreButton setImage:nil forState:UIControlStateNormal];
        [moreButton setTitle:@"X" forState:UIControlStateNormal];
    }
}

//获取候选内容
- (NSArray*)getCadidateArray {
    return [_data copy];
}

//获取候选第一个
- (NSString*)getFirstCandidate {
    return [[_data objectAtIndex:0] copy];
}

//获取拼音
- (NSString*)getPinyin {
    UILabel *PinyinLabel = (UILabel*)[self viewWithTag:10];
    NSString *text = [PinyinLabel.text copy];
    if (text != nil && text.length != 0) {
        text = [text stringByReplacingOccurrencesOfString:@"'" withString:@""];
        return text;
    }
    return nil;
}


//切换横竖屏时，传入的新高度
- (void)changeViewFrame:(CGRect)newFrame {

    self.frame = newFrame;

    //展开候选
    UIButton *showButton = (UIButton*)[self viewWithTag:7];
    CGFloat showButtonH = self.frame.size.height-pinyinHeight-0.5;
    CGFloat showButtonX = newFrame.size.width - showButtonH;
    showButton.frame = CGRectMake(showButtonX, pinyinHeight+0.5, showButtonH, showButtonH);

    //候选、拼音 分割线
    UILabel *line = (UILabel*)[self viewWithTag:8];
    line.frame = CGRectMake(0, line.frame.origin.y, newFrame.size.width, lineHeight);

    //拼音
    UILabel *PinyinLabel = (UILabel*)[self viewWithTag:10];
    CGRect frame = PinyinLabel.frame;
    PinyinLabel.frame = CGRectMake(frame.origin.x, frame.origin.y, newFrame.size.width-showButtonH-frame.origin.x, frame.size.height);

    //候选
    UIScrollView *candidateView = (UIScrollView*)[self viewWithTag:6];
    candidateView.frame = CGRectMake(0, candidateView.frame.origin.y, newFrame.size.width-showButtonH, candidateView.frame.size.height);
}

//更改模式颜色
- (void)changeBackgroudColor {

    GZKeyboardSkin *skin = [GZKeyboardSkin defaultKeyboardSkin];

    //背景图
    if (skin.backgroudImage_cd) {
        UIImageView *imageview = [[UIImageView alloc] initWithFrame:self.bounds];
        imageview.image = [UIImage imageNamed:skin.backgroudImage_cd];
        [self addSubview:imageview];
    }

    //背景色
    self.backgroundColor = skin.backgroungColor_cd;


    GZFunctionButton *showButton = (GZFunctionButton*)[self viewWithTag:7];
    showButton.backgroundColor = skin.backgroungColor_cd;

    //拼音
    UILabel *PinyinLabel = (UILabel*)[self viewWithTag:10];
    PinyinLabel.backgroundColor = skin.backgroungColor_cd_subs;

    //候选
    UIScrollView *candidateView = (UIScrollView*)[self viewWithTag:6];
    candidateView.backgroundColor = skin.backgroungColor_cd_subs;
}

//点击删除键 删除第一个候选内容的 最后一个字符（手写键盘专用）
- (void)deleteBackwardActionByNowCandidates:(NSArray*)texArr complation:(SuccesDeleteBackwardBlock)data {

    NSMutableArray *newTexArr = [[NSMutableArray alloc] init];

    if (!texArr || texArr.count == 0) {

        UIScrollView *candidateView = (UIScrollView*)[self viewWithTag:6];

        for (UIView *bbt in candidateView.subviews) {
            if ([bbt isKindOfClass:[UIButton class]]) {
                UIButton *button = (UIButton*)bbt;
                NSString *text = button.titleLabel.text;
                [newTexArr addObject:text];
            }
        }
    }else {
        newTexArr = [texArr mutableCopy];
        texArr = nil;
    }

    //候选框没有任何候选内容
    if (newTexArr.count == 0 || !newTexArr) {
        data(YES,YES);//第一个候选  只有一个字符  直接移除当前候选框
        [newTexArr removeAllObjects];
        newTexArr = nil;
        return;
    }


    NSString *first = [newTexArr objectAtIndex:0];
    if (first.length <= 1) {
        data(YES,YES);//第一个候选  只有一个字符  直接移除当前候选框
        [newTexArr removeAllObjects];
        newTexArr = nil;
        return;
    }

    NSString *newFirst = [first substringToIndex:first.length-1];
    [newTexArr replaceObjectAtIndex:0 withObject:newFirst];

    [self changeShowText:newTexArr];
    data(YES,NO);

    [newTexArr removeAllObjects];
    newTexArr = nil;
}

#pragma mark -- UI
//候选框父视图
- (void)createFixedUI {
    //展开候选
    CGFloat showButtonH = self.frame.size.height-pinyinHeight-0.5; //展开更多的宽高
    CGFloat showButtonX = self.frame.size.width - showButtonH;
    CGFloat showButtonY = pinyinHeight+0.5;

    GZKeyboardSkin *skin = [GZKeyboardSkin defaultKeyboardSkin];

    GZFunctionButton *showButton = (GZFunctionButton*)[self viewWithTag:7];
    if (!showButton) {
        showButton = [GZFunctionButton buttonWithType:UIButtonTypeCustom];
        showButton.backgroundColor = skin.backgroungColor_cd;
        showButton.layer.borderWidth = lineHeight;
        showButton.layer.borderColor = [Color_background_kb CGColor];
        showButton.frame = CGRectMake(showButtonX, showButtonY, showButtonH, showButtonH);
        [showButton addTarget:self action:@selector(showMoreTap:) forControlEvents:UIControlEventTouchUpInside];
        [self addSubview:showButton];
        showButton.tag = 7;

        [showButton setTitleColor:[UIColor colorWithHexString:float_Color_button_function] forState:UIControlStateNormal];
        showButton.titleLabel.font = [UIFont systemFontOfSize:20];
        [showButton setImage:[UIImage imageNamed:@"keyboard_down"] forState:UIControlStateNormal];
    }

    CGFloat height = pinyinHeight; //拼音的高度

    //分割线
    UILabel *line = (UILabel*)[self viewWithTag:8];
    if (!line) {
        line = [[UILabel alloc] initWithFrame:CGRectMake(0, height, self.frame.size.width, lineHeight)];
        line.backgroundColor = RGBA(210, 213, 219, 1);
        [self addSubview:line];
        line.tag = 8;
    }
}

//创建候选按钮
- (void)createCandidateButton:(NSArray*)data withLeft:(CGFloat)left from:(int)from to:(int)to {
    GZUserDefaults *share = [GZUserDefaults shareUserDefaults];
    NSString *skinName = [share getGroupValueForKey:@"keyboardSkin"];

    CGFloat height = self.frame.size.height-pinyinHeight-lineHeight; //候选按钮的高度
    CGFloat space = 20.0; //候选按钮的间距
    UIFont *font = wordFont;//[UIFont systemFontOfSize:16]; //按钮字号

    UIScrollView *candidateView = (UIScrollView*)[self viewWithTag:6];

    //添加
    for (int i=from; i<to; i++) {
        CGSize size = [[GZPublicMethod sharedPublicMethod] getStringSize:_data[i] withFont:font wordSpace:@(3) lineSpace:3.0];
        GZCadidateButton *button = [GZCadidateButton buttonWithType:UIButtonTypeCustom];
        button.frame = CGRectMake(left, 0, size.width, height); //width*1.4
        [button setTitle:_data[i] forState:UIControlStateNormal];
        button.titleLabel.font = font;
        [button setButtonStyleWithSkin:skinName];
        button.tag = 130 + i;
        [button addTarget:self action:@selector(buttonClickAction:) forControlEvents:UIControlEventTouchUpInside];
        [candidateView addSubview:button];

        [button setEnlargeEdgeWithTop:2.0 right:5.0 bottom:2.0 left:5.0];

        CGFloat buttonW = button.frame.size.width;
        left = left + buttonW + space;

        button.hidden = NO;

        //设置滚动视图的宽
        if (i == to - 1) { //最后一个按钮 开始计算
            CGFloat lastW = size.width;
            candidateView.contentSize = CGSizeMake(left+lastW,height);
        }
    }
}


#pragma mark -- private
//选择候选内容
- (void)buttonClickAction:(UIButton*)tap {
    UIColor *color = tap.backgroundColor;
    [UIView animateWithDuration:0.01 animations:^{
        tap.backgroundColor = float_Color_button_hightlight;
    } completion:^(BOOL finished) {
        tap.backgroundColor = color;
    }];
    NSString *str = tap.titleLabel.text;
    if (self.sendSelectedStr) {
        self.sendSelectedStr(str, (int)tap.tag-130);
    }
}

//点击展示更多
- (void)showMoreTap:(UIButton*)tap {

    if (_changeToDelete) {
        if (self.sendRemoveTabbar) {
            self.sendRemoveTabbar(YES);
        }
        return;
    }

    UIButton *moreButton = (UIButton*)[self viewWithTag:7];

    _isShowMore = !_isShowMore;

    if (_isShowMore) {
        //展示
        [moreButton setImage:[UIImage imageNamed:@"keyboard_up"] forState:UIControlStateNormal];
        if (_data && self.sendShowMoreFunc) {
            self.sendShowMoreFunc(YES,_data);
        }
    }else {
        //收起
        [moreButton setImage:[UIImage imageNamed:@"keyboard_down"] forState:UIControlStateNormal];
        if (self.sendShowMoreFunc) {
            self.sendShowMoreFunc(NO,nil);
        }
    }
}


//固定view在最上层
- (void)setToFront {
    UIButton *showButton = (UIButton*)[self viewWithTag:7];
    UILabel *line = (UILabel*)[self viewWithTag:8];
    [self bringSubviewToFront:showButton];
    [self bringSubviewToFront:line];
}

//拼音下划线
- (NSMutableAttributedString*)addUnderlineWithPinyin:(NSString*)pinyin andRange:(NSRange)range {
    NSMutableAttributedString *attrStr = [[NSMutableAttributedString alloc] initWithString:pinyin];
    [attrStr addAttribute:NSUnderlineStyleAttributeName
                    value:[NSNumber numberWithInteger:NSUnderlineStyleSingle]
                    range:range];
    return attrStr;
}

- (void)dealloc {
    NSLog(@"候选框 销毁");
    //分割线
    UILabel *line = (UILabel*)[self viewWithTag:8];
    if (line) {
        [line removeFromSuperview];
        line = nil;
    }
    //候选按钮
    for (int i=0; i<30; i++) {
        UIButton *button = (UIButton*)[self viewWithTag:130 + i];
        if (button) {
            [button removeFromSuperview];
            button = nil;
        }
    }
    //拼音
    UILabel *PinyinLabel = (UILabel*)[self viewWithTag:10];
    [PinyinLabel removeFromSuperview];
    PinyinLabel = nil;

    UIScrollView *candidateView = (UIScrollView*)[self viewWithTag:6];
    if (candidateView) {
        [candidateView removeFromSuperview];
        candidateView = nil;
    }

    UIButton *showButton = (UIButton*)[self viewWithTag:7];
    if (showButton) {
        [showButton removeFromSuperview];
        showButton = nil;
    }

    [self removeFromSuperview];
    _data = nil;
}

@end
