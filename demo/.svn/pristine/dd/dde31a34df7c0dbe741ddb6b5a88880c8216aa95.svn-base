//
//  GZNumberKeyboard.m
//  HanvonKeyboard
//
//  Created by hanvon on 2017/11/4.
//  Copyright © 2017年 hanvon. All rights reserved.
//

#import "GZNumberKeyboard.h"

@interface GZNumberKeyboard ()
{
    NSTimer *timer; //定时器 删除按钮长按
}

@end



@implementation GZNumberKeyboard

- (instancetype)initWithFrame:(CGRect)frame {
    self = [super initWithFrame:frame];
    if (self) {
        //创建view
        self.backgroundColor = RGBA(210, 213, 219, 1.0);

        [self createButtons];
    }
    return self;
}



- (void)changeViewFrame:(CGRect)newFrame {
    for (UIView *views in self.subviews) {
        [views removeFromSuperview];
    }
    self.frame = newFrame;

    for (UIView *view in self.subviews) {
        if ([view isKindOfClass:[GZButton class]]) {
            [view removeFromSuperview];
        }
    }
    [self createButtons];
}




- (void)createButtons {
    //键盘布局 水平间距5 垂直间距7
    //键盘布局 顶部间距3 底部间距3
    CGFloat spaceX = 5.0;
    CGFloat spaceY = 7.0;
    CGFloat top = 3.0;
    CGFloat bottom = 3.0;

    CGFloat buttonH = (self.frame.size.height - top - bottom - spaceY*3)/4.0; //按钮的高度
    CGFloat numButtonW = (self.frame.size.width - spaceX*6)/4.2; //数字按钮的宽度 功能按钮是数字按钮的0.6倍
    CGFloat funcButtonW = numButtonW*0.6; //功能按钮宽度

    //创建数字按钮部分
    NSArray *numArr = [NSArray arrayWithObjects:
                            @[@"1",@"2",@"3"],
                            @[@"4",@"5",@"6"],
                            @[@"7",@"8",@"9"],
                            @[@"@",@"0",@"空格"],
                            nil];
    for (int i=0; i<4; i++) {
        for (int j=0; j<3; j++) {
            GZNumberButton *button = [GZNumberButton buttonWithType:UIButtonTypeSystem];
            button.backgroundColor = [UIColor whiteColor];
            [button setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
            button.titleLabel.font = [UIFont systemFontOfSize:20];
            button.layer.cornerRadius = 5;
            //button.clipsToBounds = YES; 会导致阴影不显示
            button.layer.shadowColor = [UIColor blackColor].CGColor;
            button.layer.shadowOpacity = 1.0;
            button.layer.shadowOffset = CGSizeMake(0, 3);
            button.layer.shadowRadius = 5;
            [button addTarget:self action:@selector(didButtonTap:) forControlEvents:UIControlEventTouchUpInside];
            [button setTitle:numArr[i][j] forState:UIControlStateNormal];
            button.frame = CGRectMake(spaceX*2 + funcButtonW + j*(numButtonW+spaceX), top + i*(buttonH+spaceY), numButtonW, buttonH);
            button.tag = 61+ i*3 + j;
            [self addSubview:button];
        }
    }

    //左侧快捷符号部分
    CGFloat superViewH = self.frame.size.height - top - bottom;
    CGFloat subH = superViewH/5.0; //快捷符号的高度

    UIView *superView1 = [[UIView alloc] initWithFrame:CGRectMake(spaceX, top, funcButtonW, superViewH)];
    superView1.backgroundColor = [UIColor whiteColor];
    superView1.layer.cornerRadius = 5;
    superView1.layer.shadowColor = [UIColor blackColor].CGColor;
    superView1.layer.shadowOpacity = 1.0;
    superView1.layer.shadowOffset = CGSizeMake(0, 3);
    superView1.layer.shadowRadius = 5;
    [self addSubview:superView1];

    NSArray *superViewSubs = [NSArray arrayWithObjects:@"+",@"-",@"*",@"/",@".", nil];
    for (int i=0; i<5; i++) {
        //按钮
        GZSymbolButton *button = [GZSymbolButton buttonWithType:UIButtonTypeSystem];
        button.backgroundColor = [UIColor clearColor];
        [button setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
        button.titleLabel.font = [UIFont systemFontOfSize:18];
        [button addTarget:self action:@selector(didButtonTap:) forControlEvents:UIControlEventTouchUpInside];
        [button setTitle:superViewSubs[i] forState:UIControlStateNormal];
        button.frame = CGRectMake(0, i*subH, funcButtonW, subH);
        button.tag = 81+i;
        [superView1 addSubview:button];

        //分割线
        if (i != 4) {
            UILabel *line = [[UILabel alloc] initWithFrame:CGRectMake(5, (i+1)*subH, funcButtonW-10, 0.5)];
            line.backgroundColor = RGBA(210, 213, 219, 1.0);
            line.tag = 91+i;
            [superView1 addSubview:line];
        }
    }

    //右侧的功能按钮
    CGFloat funcX = spaceX*5 + funcButtonW + numButtonW*3;
    NSArray *funcArr = [NSArray arrayWithObjects:@"删除",@"符",@"回车",@"返回", nil];
    for (int i=0; i<4; i++) {
        GZFunctionButton *button = [GZFunctionButton buttonWithType:UIButtonTypeSystem];
        button.backgroundColor = [UIColor lightGrayColor];
        [button setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
        button.titleLabel.font = [UIFont systemFontOfSize:18];
        button.layer.cornerRadius = 5;
        //button.clipsToBounds = YES; 会导致阴影不显示
        button.layer.shadowColor = [UIColor blackColor].CGColor;
        button.layer.shadowOpacity = 1.0;
        button.layer.shadowOffset = CGSizeMake(0, 3);
        button.layer.shadowRadius = 5;
        [button setTitle:funcArr[i] forState:UIControlStateNormal];
        button.frame = CGRectMake(funcX, top + i*(buttonH+spaceY), funcButtonW, buttonH);
        button.tag = 101+i;
        [self addSubview:button];

        if (i != 0) {
            [button addTarget:self action:@selector(didFuncTap:) forControlEvents:UIControlEventTouchUpInside];
        }else {
            [button addTarget:self action:@selector(didTouchDown) forControlEvents:UIControlEventTouchDown];
            [button addTarget:self action:@selector(didTouchUp) forControlEvents:UIControlEventTouchUpInside];
            [button addTarget:self action:@selector(didTouchUp) forControlEvents:UIControlEventTouchDragInside]; //移动手指出按钮
        }
    }
}







#pragma mark -- button click action
- (void)didButtonTap:(UIButton*)tap {
    NSInteger tagN = tap.tag;
    NSString *text = nil;

    NSArray *numArr = [NSArray arrayWithObjects:@"1",@"2",@"3",@"4",@"5",@"6",@"7",@"8",@"9",@"@",@"0",@" ",nil];
    NSArray *superViewSubs = [NSArray arrayWithObjects:@"+",@"-",@"*",@"/",@".", nil];

    switch (tagN) {
        case 61:
            text = numArr[0];
            break;
        case 62:
            text = numArr[1];
            break;
        case 63:
            text = numArr[2];
            break;
        case 64:
            text = numArr[3];
            break;
        case 65:
            text = numArr[4];
            break;
        case 66:
            text = numArr[5];
            break;
        case 67:
            text = numArr[6];
            break;
        case 68:
            text = numArr[7];
            break;
        case 69:
            text = numArr[8];
            break;
        case 70:
            text = numArr[9];
            break;
        case 71:
            text = numArr[10];
            break;
        case 72:
            text = numArr[11];
            break;
        case 81:
            text = superViewSubs[0];
            break;
        case 82:
            text = superViewSubs[1];
            break;
        case 83:
            text = superViewSubs[2];
            break;
        case 84:
            text = superViewSubs[3];
            break;
        case 85:
            text = superViewSubs[4];
            break;
        default:
            break;
    }

    if (text.length != 0 && self.sendSelectedStr) {
        self.sendSelectedStr(text);
    }
}

- (void)didFuncTap:(UIButton*)tap {
    NSInteger tagN = tap.tag;
    int type = 0; //1删除  2符  3回车  4返回

    switch (tagN) {
        case 101:
            //type = 1;
            break;
        case 102:
            type = 2;
            break;
        case 103:
            type = 3;
            break;
        case 104:
            type = 4;
            break;
        default:
            break;
    }

    if (type != 0 && self.sendSelectedFunc) {
        self.sendSelectedFunc(type);
    }
}

//删除按钮---------------------------------
/*
 UIControlEventTouchDown即按钮按下时应触发的方法。
 实际使用过程中会出现延迟响应或间歇无响应，
 但是放开手指时会直接响应UIControlEventTouchDown、UIControlEventTouchUpInside两个方法
 touchesBegan不响应 不能用之获取按钮坐标
 */
- (void)didTouchDown {
    NSLog(@"didTouchDown");

    [self deleteActionStart]; //延时问题
    
    if (!timer) {
        timer = [NSTimer scheduledTimerWithTimeInterval:0.12 target:self selector:@selector(deleteActionStart) userInfo:nil repeats:YES];
    }
}
- (void)didTouchUp {
    NSLog(@"didTouchUp");
    [timer invalidate];
    timer = nil;
    [self deleteActionStop];
}

- (void)deleteActionStart {
    if (self.sendDeleteTap) {
        self.sendDeleteTap(YES);
    }
}
- (void)deleteActionStop {
    if (self.sendDeleteTap) {
        self.sendDeleteTap(NO);
    }
}



- (void)dealloc {
    NSLog(@"数字键盘 销毁");
    for (UIView *view in self.subviews) {
        [view removeFromSuperview];
    }
    if (timer) {
        [timer invalidate];
        timer = nil;
    }
}





@end
