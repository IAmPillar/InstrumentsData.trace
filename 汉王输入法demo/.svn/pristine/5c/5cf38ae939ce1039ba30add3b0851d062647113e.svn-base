//
//  GZSettingBoard.m
//  HanvonKeyboard
//
//  Created by hanvon on 2017/11/21.
//  Copyright © 2017年 hanvon. All rights reserved.
//

#import "GZSettingBoard.h"
//#import "GZKeyboardSkin.h"

@implementation GZSettingBoard

- (instancetype)initWithFrame:(CGRect)frame {
    self = [super initWithFrame:frame];
    if (self) {
        //创建view
        self.layer.borderWidth = 0.5;
        self.layer.borderColor = [Color_background_kb CGColor];

        [self createUI];
        [self setData];
    }
    return self;
}

- (void)changeViewFrame:(CGRect)newFrame {

    self.frame = newFrame;

    //键盘布局 水平间距5 垂直间距7
    //键盘布局 顶部间距3 底部间距3
    CGFloat spaceX = 5.0;
    CGFloat spaceY = 7.0;
    CGFloat top = 3.0;
    //CGFloat bottom = 3.0;
    CGFloat width = 80;
    CGFloat height = 80;
    NSArray *titles;

    //是否支持完全访问
    if ([[GZPublicMethod sharedPublicMethod] isAllowFullAccess]) {
        titles = [NSArray arrayWithObjects:@"联想输入",@"模糊音",@"按键纠错",@"夜间模式",@"声音",@"快捷短语",@"详细设置", nil];
    }else {
        titles = [NSArray arrayWithObjects:@"联想输入",@"模糊音",@"按键纠错",@"夜间模式",@"快捷短语",@"详细设置", nil];
    }

    int num = (int)floorf((newFrame.size.width-spaceX)/(width+spaceX)); //一行能放的按钮个数
    int row = (int)ceilf(titles.count/num) + 1; //最多能用几行
    spaceX = spaceX + (newFrame.size.width - spaceX - num*(width+spaceX))/(num+1); //重新计算间距

    for (int i=0; i<row; i++) {
        int max = (int)titles.count - i*num;
        for (int j=0; j<max; j++) {
            UIButton *button = (UIButton*)[self viewWithTag:111 + i*num + j];
            button.frame = CGRectMake(spaceX + j*(spaceX+width), top + i*(height+spaceY), width, height);
        }
    }
}

- (void)changeBackgroudColor {

    GZKeyboardSkin *skin = [GZKeyboardSkin defaultKeyboardSkin];

    self.backgroundColor = skin.backgroungColor_kb;

    NSArray *titles;
    //是否支持完全访问
    if ([[GZPublicMethod sharedPublicMethod] isAllowFullAccess]) {
        titles = [NSArray arrayWithObjects:@"联想输入",@"模糊音",@"按键纠错",@"夜间模式",@"声音",@"快捷短语",@"详细设置", nil];
    }else {
        titles = [NSArray arrayWithObjects:@"联想输入",@"模糊音",@"按键纠错",@"夜间模式",@"快捷短语",@"详细设置", nil];
    }

    for (int i=0; i<titles.count; i++) {
        UIButton *button = (UIButton*)[self viewWithTag:111 + i];
        button.backgroundColor = skin.backgroungColor_kb;
    }
}



#pragma mark -- 创建UI
- (void)createUI {
    //键盘布局 水平间距5 垂直间距7
    //键盘布局 顶部间距3 底部间距3
    CGFloat spaceX = 5.0;
    CGFloat spaceY = 7.0;
    CGFloat top = 3.0;
    //CGFloat bottom = 3.0;

    NSArray *titles;
    NSArray *images;
    NSArray *images_select;
    CGFloat width = 80;
    CGFloat height = 80;

    //是否支持完全访问
    if ([[GZPublicMethod sharedPublicMethod] isAllowFullAccess]) {
        titles = [NSArray arrayWithObjects:@"联想输入",@"模糊音",@"按键纠错",@"夜间模式",@"声音",@"快捷短语",@"详细设置", nil];
        images = [NSArray arrayWithObjects:@"set_association",@"set_fuzzy",@"set_recover",@"set_night",@"set_sound",@"set_phrases",@"set_set", nil];
        images_select = [NSArray arrayWithObjects:@"set_association-select",@"set_fuzzy-select",@"set_recover-select",@"set_night-select",@"set_sound-select",@"set_phrases-select",@"set_set-select", nil];
    }else {
        titles = [NSArray arrayWithObjects:@"联想输入",@"模糊音",@"按键纠错",@"夜间模式",@"快捷短语",@"详细设置", nil];
        images = [NSArray arrayWithObjects:@"set_association",@"set_fuzzy",@"set_recover",@"set_night",@"set_phrases",@"set_set", nil];
        images_select = [NSArray arrayWithObjects:@"set_association-select",@"set_fuzzy-select",@"set_recover-select",@"set_night-select",@"set_phrases-select",@"set_set-select", nil];
    }

    GZKeyboardSkin *skin = [GZKeyboardSkin defaultKeyboardSkin];

    int num = (int)floorf((self.frame.size.width-spaceX)/(width+spaceX)); //一行能放的按钮个数
    int row = (int)ceilf(titles.count/num) + 1; //最多能用几行

    spaceX = spaceX + (self.frame.size.width - spaceX - num*(width+spaceX))/(num+1); //重新计算间距

    for (int i=0; i<row; i++) {
        //int max = (int)titles.count - i*num;
        for (int j=0; j<num; j++) {
            GZFunctionButton *button = [GZFunctionButton buttonWithType:UIButtonTypeCustom];

            button.backgroundColor = skin.backgroungColor_kb;

            button.frame = CGRectMake(spaceX + j*(spaceX+width), top + i*(height+spaceY), width, height);
            button.tag = 111 + i*num + j;
            [button addTarget:self action:@selector(didSetTap:) forControlEvents:UIControlEventTouchUpInside];
            button.titleLabel.font = [UIFont systemFontOfSize:16];

            [button setTitle:titles[i*num + j] forState:UIControlStateNormal];

            [button setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
            [button setTitleColor:float_Color_button_hightlight forState:UIControlStateSelected];

            [button setImage:[UIImage imageNamed:images[i*num + j]] forState:UIControlStateNormal];
            [button setImage:[UIImage imageNamed:images_select[i*num +j]] forState:UIControlStateSelected];

            CGFloat imageWith = button.imageView.frame.size.width;
            CGFloat imageHeight = button.imageView.frame.size.height;
            CGFloat labelWidth = button.titleLabel.frame.size.width;
            CGFloat labelHeight = button.titleLabel.frame.size.height;
            CGFloat space_ima_title = labelWidth - imageWith;
            button.titleEdgeInsets = UIEdgeInsetsMake(0, -imageWith, -imageHeight-top/2.0, 0); //top是图和文字的间距
            button.imageEdgeInsets = UIEdgeInsetsMake(-labelHeight-top/2.0, 0, 0, -labelWidth-space_ima_title/2.0);

            [self addSubview:button];

            int max = (int)titles.count - (i*num + (j+1));
            if (max == 0) {
                return;
            }
        }
    }
}

//设置按钮样式
- (void)setData {

    GZUserDefaults *share = [GZUserDefaults shareUserDefaults];

    //中文联想
    NSNumber *chineseAssociation = [share getValueForKey:@"chineseAssociation"];
    UIButton *button = (UIButton*)[self viewWithTag:111];
    if ([chineseAssociation isEqualToNumber:@1]) {
        button.selected = YES;
    }else {
        button.selected = NO;
    }

    //模糊音
    NSNumber *fuzzyMode = [share getValueForKey:@"fuzzy"];
    UIButton *button_fuzzy = (UIButton*)[self viewWithTag:112];
    if ([fuzzyMode isEqualToNumber:@1]) {
        button_fuzzy.selected = YES;
    }else {
        button_fuzzy.selected = NO;
    }

    //键盘纠错
    NSNumber *recovery = [share getValueForKey:@"recovery"];
    UIButton *button_recovery = (UIButton*)[self viewWithTag:113];
    if ([recovery isEqualToNumber:@1]) {
        button_recovery.selected = YES;
    }else {
        button_recovery.selected = NO;
    }

    //夜间模式 0日间模式 1夜间模式
    NSNumber *nightMode = [share getValueForKey:@"nightMode"];
    UIButton *button_night = (UIButton*)[self viewWithTag:114];
    if ([nightMode isEqualToNumber:@1]) {
        button_night.selected = YES;
    }else {
        button_night.selected = NO;
    }

    //是否支持完全访问
    if ([[GZPublicMethod sharedPublicMethod] isAllowFullAccess]) {
        //声音
        NSNumber *sound = [share getValueForKey:@"sound"];
        UIButton *button_sound = (UIButton*)[self viewWithTag:115];
        if ([sound isEqualToNumber:@1]) {
            button_sound.selected = YES;
        }else {
            button_sound.selected = NO;
        }
    }
}


//1详细设置 2夜间模式 3常用短语 4联想输入 5声音 6模糊音 7纠错
- (void)didSetTap:(UIButton*)sender {
    GZUserDefaults *share = [GZUserDefaults shareUserDefaults];

    int t = (int)(sender.tag - 111);
    switch (t) {
        case 0:{
            //联想输入
            sender.selected = !sender.selected;
            if (sender.selected) {
                [share saveValue:@1 forKey:@"chineseAssociation"];
            }else {
                [share saveValue:@0 forKey:@"chineseAssociation"];
            }
            if (self.sendSelectedFunc) {
                self.sendSelectedFunc(4);
            }
            break;
        }
        case 1:{
            //模糊音
            sender.selected = !sender.selected;
            if (sender.selected) {
                [share saveValue:@1 forKey:@"fuzzy"];
            }else {
                [share saveValue:@0 forKey:@"fuzzy"];
            }
            if (self.sendSelectedFunc) {
                self.sendSelectedFunc(6);
            }
            break;
        }
        case 2: {
            //纠错
            sender.selected = !sender.selected;
            if (sender.selected) {
                [share saveValue:@1 forKey:@"recovery"];
            }else {
                [share saveValue:@0 forKey:@"recovery"];
            }
            if (self.sendSelectedFunc) {
                self.sendSelectedFunc(7);
            }
            break;
        }
        case 3: {
            //夜间模式
            sender.selected = !sender.selected;
            if (sender.selected) {
                [share saveValue:@1 forKey:@"nightMode"];
            }else {
                [share saveValue:@0 forKey:@"nightMode"];
            }

            if (self.sendSelectedFunc) {
                self.sendSelectedFunc(2);
            }
            break;
        }
        case 4:{
            //是否支持完全访问
            if ([[GZPublicMethod sharedPublicMethod] isAllowFullAccess]) {
                //声音
                sender.selected = !sender.selected;
                if (sender.selected) {
                    [share saveValue:@1 forKey:@"sound"];
                }else {
                    [share saveValue:@0 forKey:@"sound"];
                }
                if (self.sendSelectedFunc) {
                    self.sendSelectedFunc(5);
                }
            }else {
                //快捷短语
                if (self.sendSelectedFunc) {
                    self.sendSelectedFunc(3);
                }
            }
            break;

        }
//            titles = [NSArray arrayWithObjects:@"联想输入",@"模糊音",@"按键纠错",@"夜间模式",@"声音",@"快捷短语",@"详细设置", nil];
//            titles = [NSArray arrayWithObjects:@"联想输入",@"模糊音",@"按键纠错",@"夜间模式",@"快捷短语",@"详细设置", nil];
        case 5:{
            //是否支持完全访问
            if ([[GZPublicMethod sharedPublicMethod] isAllowFullAccess]) {
                //快捷短语
                if (self.sendSelectedFunc) {
                    self.sendSelectedFunc(3);
                }

            }else {
                //详细设置
                if (self.sendSelectedFunc) {
                    self.sendSelectedFunc(1);
                }
            }
            break;
        }
        case 6:{
            //详细设置
            if (self.sendSelectedFunc) {
                self.sendSelectedFunc(1);
            }
            break;
        }

        default:
            break;
    }
}



#pragma mark -- dealloc
- (void)dealloc {
    NSLog(@"设置键盘，销毁");

    for (UIView *view in self.subviews) {
        [view removeFromSuperview];
    }

    //是否支持完全访问
    int titles;
    if ([[GZPublicMethod sharedPublicMethod] isAllowFullAccess]) {
        titles = 5;
    }else {
        titles = 3;
    }

    for (int i=0; i<titles; i++) {
        UIButton *button = (UIButton*)[self viewWithTag:111 + i];
        if (button) {
            [button removeFromSuperview];
            button = nil;
        }
    }
}

@end
