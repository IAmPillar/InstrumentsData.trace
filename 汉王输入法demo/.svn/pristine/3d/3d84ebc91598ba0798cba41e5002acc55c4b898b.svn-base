//
//  GZCandidateBarView.m
//  HanvonKeyboard
//
//  Created by hanvon on 2017/11/4.
//  Copyright © 2017年 hanvon. All rights reserved.
//

#import "GZCandidateBarView.h"


@interface GZCandidateBarView()
@property (nonatomic,strong) NSArray *data;
@end


@implementation GZCandidateBarView

- (instancetype)initWithFrame:(CGRect)frame {
    self = [super initWithFrame:frame];
    if (self) {
        //创建view
        self.backgroundColor = [UIColor whiteColor];
        self.layer.borderWidth = 0.5;
        self.layer.borderColor = [RGBA(210, 213, 219, 1.0) CGColor];

        //创建固定view
        [self createFixedUI];
    }
    return self;
}
- (void)createFixedUI {
    //展开候选
    CGFloat showButtonH = self.frame.size.height; //展开更多的宽高
    CGFloat showButtonX = self.frame.size.width - showButtonH;
    GZFunctionButton *showButton = (GZFunctionButton*)[self viewWithTag:7];
    if (!showButton) {
        showButton = [GZFunctionButton buttonWithType:UIButtonTypeCustom];
        showButton.backgroundColor = [UIColor whiteColor];
        showButton.layer.borderWidth = 0.5;
        showButton.layer.borderColor = [RGBA(210, 213, 219, 1.0) CGColor];
        showButton.frame = CGRectMake(showButtonX, 0, showButtonH, showButtonH);
        [showButton addTarget:self action:@selector(showMoreTap:) forControlEvents:UIControlEventTouchUpInside];
        [self addSubview:showButton];
        showButton.tag = 7;

        [showButton setTitle:@"more" forState:UIControlStateNormal];
        [showButton setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
        showButton.titleLabel.font = [UIFont systemFontOfSize:12];
    }

    CGFloat height = self.frame.size.height/3.0; //拼音的高度

    //分割线
    UILabel *line = (UILabel*)[self viewWithTag:8];
    if (!line) {
        line = [[UILabel alloc] initWithFrame:CGRectMake(0, height, self.frame.size.width-showButtonH, 0.5)];
        line.backgroundColor = RGBA(210, 213, 219, 1);
        [self addSubview:line];
        line.tag = 8;
    }
}

//改变拼音
- (void)changeShowPinyin:(NSString *)pinyin {

    if (!pinyin || pinyin.length == 0) {
        UILabel *PinyinLabel = (UILabel*)[self viewWithTag:10];
        [PinyinLabel removeFromSuperview];
        return;
    }

    CGFloat left = 7.0;
    CGFloat height = self.frame.size.height/3.0; //拼音的高度
    CGFloat showButtonH = self.frame.size.height; //展开更多的宽高

    //拼音label
    UILabel *PinyinLabel = (UILabel*)[self viewWithTag:10];
    if (!PinyinLabel) {
        PinyinLabel = [[UILabel alloc] initWithFrame:CGRectMake(left, 0, self.frame.size.width-showButtonH-left, height)];
        PinyinLabel.backgroundColor = [UIColor whiteColor];
        PinyinLabel.font = [UIFont systemFontOfSize:11];
        PinyinLabel.textAlignment = NSTextAlignmentLeft;
        PinyinLabel.textColor = [UIColor blackColor];
        PinyinLabel.text = pinyin;
        [self addSubview:PinyinLabel];
        PinyinLabel.tag = 10;
    }else {
        PinyinLabel.text = pinyin;
    }

    //固定view在最上层
    [self setToFront];
}

//改变候选的展示内容
- (void)changeShowText:(NSArray*)textArr {

    UIView *candidateView = (UIView*)[self viewWithTag:6];
    for (UIView *bbt in candidateView.subviews) {
        if ([bbt isKindOfClass:[UIButton class]]) {
            [bbt removeFromSuperview];
        }
    }

    if (!textArr || textArr.count == 0) {
        return;
    }

    if (_data) {
        _data = nil;
        _data = textArr;
    }

    CGFloat left = 7.0;
    CGFloat height = (self.frame.size.height/3.0)*2.0; //候选按钮的高度
    CGFloat y = self.frame.size.height - height; //候选按钮的y
    CGFloat space = 20.0; //候选按钮的间距
    UIFont *font = [UIFont systemFontOfSize:16]; //按钮字号
    CGFloat showButtonH = self.frame.size.height; //展开更多按钮的宽高
    CGFloat candidateShowWidth = self.frame.size.width - showButtonH; //候选区域的总宽度

    //按钮的父视图
    //UIView *candidateView = (UIView*)[self viewWithTag:6];
    if (!candidateView) {
        candidateView = [[UIView alloc] initWithFrame:CGRectMake(0, y, candidateShowWidth, height)];
        candidateView.backgroundColor = [UIColor whiteColor];
        [self addSubview:candidateView];
        candidateView.tag = 6;
    }


    //候选按钮
    for (int i=0; i<textArr.count; i++) {
        CGFloat width = [[GZPublicMethod sharedPublicMethod] widthForString:textArr[i] font:font andHeight:height]; //字符串的宽度
        GZFunctionButton *button = [GZFunctionButton buttonWithType:UIButtonTypeCustom];
        button.frame = CGRectMake(left, 0, width*1.4, height);
        [button setTitle:textArr[i] forState:UIControlStateNormal];
        //[button sizeToFit];
        button.contentHorizontalAlignment = UIControlContentHorizontalAlignmentLeft;
        button.backgroundColor = [UIColor clearColor];
        [button setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
        button.tag = 130 + i;
        [button addTarget:self action:@selector(buttonClickAction:) forControlEvents:UIControlEventTouchUpInside];
        [candidateView addSubview:button];

        button.layer.shadowColor = [UIColor blackColor].CGColor;
        button.layer.shadowOpacity = 1.0;
        button.layer.shadowOffset = CGSizeMake(0, 3);
        button.layer.shadowRadius = 5;
        
        CGFloat buttonW = button.frame.size.width;
        left = left + buttonW + space;
        //添加的按钮 总宽度超出时 停止添加
//        if (left >= candidateShowWidth) {
//            continue;
//        }
    }

    //固定view在最上层
    [self setToFront];
}

//是否存在候选内容
- (BOOL)isTabBarHasData {
    for (UIButton *bbt in self.subviews) {
        if (bbt) {
            return YES;
        }
    }
    return NO;
}

//切换横竖屏时，传入的新高度
- (void)changeViewFrame:(CGRect)newFrame {

    self.frame = newFrame;

    //展开候选
    UIButton *showButton = (UIButton*)[self viewWithTag:7];
    CGFloat showButtonH = self.frame.size.height;
    CGFloat showButtonX = newFrame.size.width - showButtonH;
    showButton.frame = CGRectMake(showButtonX, 0, showButtonH, showButtonH);

    //候选、拼音 分割线
    UILabel *line = (UILabel*)[self viewWithTag:8];
    line.frame = CGRectMake(0, line.frame.origin.y, newFrame.size.width-showButtonH, 0.5);

    //拼音
    UILabel *PinyinLabel = (UILabel*)[self viewWithTag:10];
    CGRect frame = PinyinLabel.frame;
    PinyinLabel.frame = CGRectMake(frame.origin.x, frame.origin.y, newFrame.size.width-showButtonH-frame.origin.x, frame.size.height);

    //候选
    UIView *candidateView = (UIView*)[self viewWithTag:6];
    candidateView.frame = CGRectMake(0, candidateView.frame.origin.y, newFrame.size.width-showButtonH, candidateView.frame.size.height);
}

//点击删除键 删除第一个候选内容的 最后一个字符（手写键盘专用）
- (void)deleteBackwardActionByNowCandidates:(NSArray*)texArr complation:(SuccesDeleteBackwardBlock)data {

    NSMutableArray *newTexArr = [[NSMutableArray alloc] init];

    if (!texArr || texArr.count == 0) {

        UIView *candidateView = (UIView*)[self viewWithTag:6];

        for (UIView *bbt in candidateView.subviews) {
            if ([bbt isKindOfClass:[UIButton class]]) {
                UIButton *button = (UIButton*)bbt;
                NSString *text = button.titleLabel.text;
                [newTexArr addObject:text];
            }
        }
    }else {
        newTexArr = [texArr mutableCopy];
    }

    //候选框没有任何候选内容
    if (newTexArr.count == 0 || !newTexArr) {
        //第一个候选  只有一个字符  直接移除当前候选框
        data(YES,YES);
        return;
    }


    NSString *first = [newTexArr objectAtIndex:0];

    if (first.length <= 1) {
        //第一个候选  只有一个字符  直接移除当前候选框
        data(YES,YES);
        return;
    }

    NSString *newFirst = [first substringToIndex:first.length-1];
    [newTexArr replaceObjectAtIndex:0 withObject:newFirst];

    [self changeShowText:newTexArr];
    data(YES,NO);
}


#pragma mark -- private
- (void)buttonClickAction:(UIButton*)tap {
    UIButton *butt = (UIButton*)tap;
    NSString *str = butt.titleLabel.text;
    if (self.sendSelectedStr) {
        self.sendSelectedStr(str);
    }
}

- (void)showMoreTap:(UIButton*)tap {
    if (_data && self.sendShowMoreFunc) {
        self.sendShowMoreFunc(YES,_data);
    }
}

//固定view在最上层
- (void)setToFront {
    UIButton *showButton = (UIButton*)[self viewWithTag:7];
    UILabel *line = (UILabel*)[self viewWithTag:8];
    [self bringSubviewToFront:showButton];
    [self bringSubviewToFront:line];
}


- (void)dealloc {
    NSLog(@"候选框 销毁");
    for (UIView *view in self.subviews) {
        [view removeFromSuperview];
    }
}

@end
